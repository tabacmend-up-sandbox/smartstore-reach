<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Smartstore.Core</name>
    </assembly>
    <members>
        <member name="T:Smartstore.Core.Catalog.Attributes.AttributeControlType">
            <summary>
            Represents an attribute control type.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.AttributeControlType.DropdownList">
            <summary>
            Dropdown list.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.AttributeControlType.RadioList">
            <summary>
            Radio list.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.AttributeControlType.Checkboxes">
            <summary>
            Checkboxes.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.AttributeControlType.TextBox">
            <summary>
            Text box.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.AttributeControlType.MultilineTextbox">
            <summary>
            Multiline textbox.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.AttributeControlType.Datepicker">
            <summary>
            Datepicker.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.AttributeControlType.FileUpload">
            <summary>
            File upload control.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.AttributeControlType.Boxes">
            <summary>
            Boxes.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValueType">
            <summary>
            Represents a value type for product attributes.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValueType.Simple">
            <summary>
            Simple attribute value.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValueType.ProductLinkage">
            <summary>
            Linked product attribute value.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.ProductAttribute">
            <summary>
            Represents a product attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttribute.Name">
            <summary>
            Gets or sets the attribute name.
            </summary>
            <example>Color</example>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttribute.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttribute.AllowFiltering">
            <summary>
            Gets or sets a value indicating whether the attribute can be filtered.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttribute.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttribute.FacetTemplateHint">
            <summary>
            Gets or sets the facet template hint.
            Only effective in accordance with MegaSearchPlus module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttribute.IndexOptionNames">
            <summary>
            Gets or sets a value indicating whether option names should be included in the search index.
            Only effective in accordance with MegaSearchPlus module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttribute.ExportMappings">
            <summary>
            Gets or sets optional export mappings.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttribute.ProductAttributeOptionsSets">
            <summary>
            Gets or sets the options sets.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.ProductAttributeOption">
            <summary>
            Represents a product attribute option.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.ProductAttributeOptionsSetId">
            <summary>
            Gets or sets the product attribute options set identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.ProductAttributeOptionsSet">
            <summary>
            Gets or sets the product attribute options set.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.Name">
            <summary>
            Gets or sets the option name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.MediaFileId">
            <summary>
            Gets or sets the media file identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.Color">
            <summary>
            Gets or sets the color RGB value (used with "Boxes" attribute type).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.PriceAdjustment">
            <summary>
            Gets or sets the price adjustment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.WeightAdjustment">
            <summary>
            Gets or sets the weight adjustment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.IsPreSelected">
            <summary>
            Gets or sets a value indicating whether the option is pre-selected.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.ValueTypeId">
            <summary>
            Gets or sets the type identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.ValueType">
            <summary>
            Gets or sets the product attribute value type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.LinkedProductId">
            <summary>
            Gets or sets the linked product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.Quantity">
            <summary>
            Gets or sets the quantity for the linked product.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.ProductAttributeOptionsSet">
            <summary>
            Represents an options set for a product attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOptionsSet.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOptionsSet.ProductAttributeId">
            <summary>
            Gets or sets the product attribute identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOptionsSet.ProductAttribute">
            <summary>
            Gets or sets the product attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOptionsSet.ProductAttributeOptions">
            <summary>
            Gets or sets the product attribute options.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute">
            <summary>
            Represents a product specification attribute mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute.SpecificationAttributeOptionId">
            <summary>
            Gets or sets the specification attribute option identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute.SpecificationAttributeOption">
            <summary>
            Gets or sets the specification attribute option.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute.Product">
            <summary>
            Gets or sets the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute.AllowFiltering">
            <summary>
            Gets or sets a value indicating whether the attribute can be filtered.
            Only effective in accordance with MegaSearchPlus module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute.ShowOnProductPage">
            <summary>
            Gets or sets a value indicating whether the attribute will be shown on the product page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute">
            <summary>
            Represents a product attribute mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.Product">
            <summary>
            Gets or sets the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.ProductAttributeId">
            <summary>
            Gets or sets the product attribute identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.ProductAttribute">
            <summary>
            Gets or sets the product attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.TextPrompt">
            <summary>
            Gets or sets a value a text prompt.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.CustomData">
            <summary>
            Gets or sets any custom data.
            It's not used by Smartstore but is being passed to the choice partial view.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether the entity is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.AttributeControlTypeId">
            <summary>
            Gets or sets the attribute control type identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.AttributeControlType">
            <summary>
            Gets or sets the attribute control type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.IsMultipleChoice">
            <summary>
            Gets or sets a value indicating whether the selection of multiple values is supported.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.IsListTypeAttribute">
            <summary>
            Gets a value indicating whether the attribute has a list of values.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.ProductVariantAttributeValues">
            <summary>
            Gets or sets the product variant attribute values.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.RuleSet">
            <summary>
            Gets or sets an optional rule set with conditions for the visibility of the attribute.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination">
            <summary>
            Represents a product variant attribute combination.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.Product">
            <summary>
            Gets or sets the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.Sku">
            <summary>
            Gets or sets the SKU.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.Gtin">
            <summary>
            Gets or sets the GTIN.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.ManufacturerPartNumber">
            <summary>
            Gets or sets the MPN.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.Price">
            <summary>
            Gets or sets the price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.BasePriceAmount">
            <summary>
            Gets or sets the amount of product per packing unit in the given measure unit 
            (e.g. 250 ml shower gel: "0.25" if MeasureUnit = "liter" and BaseAmount = 1).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.BasePriceBaseAmount">
            <summary>
            Gets or sets the reference value for the given measure unit 
            (e.g. "1" liter. Formula: [BaseAmount] [MeasureUnit] = [SellingPrice] / [Amount]).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.AssignedMediaFileIds">
            <summary>
            Gets or sets the assigned media file identifiers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.IsActive">
            <summary>
            Gets or sets a value indicating whether the attribute combination is active.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.DeliveryTimeId">
            <summary>
            Gets or sets the delivery time identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.DeliveryTime">
            <summary>
            Gets or sets the delivery time.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.QuantityUnitId">
            <summary>
            Gets or sets the quantity unit identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.QuantityUnit">
            <summary>
            Gets or sets the quantity unit.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.RawAttributes">
            <summary>
            Gets or sets the product variant attributes in XML or JSON format
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.StockQuantity">
            <summary>
            Gets or sets the stock quantity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.AllowOutOfStockOrders">
            <summary>
            Gets or sets a value indicating whether to allow orders when out of stock.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.HashCode">
            <summary>
            Gets or sets the attributes hash code.
            </summary>
            <remarks>
            Use <see cref="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.GetAttributesHashCode"/> if you want to regenerate hash code.
            Or use <see cref="M:Smartstore.Domain.AttributeSelection.GetHashCode"/> if you want to skip the backing field.
            Do not use or set <see cref="M:Smartstore.Domain.BaseEntity.GetHashCode"/> for this purpose because it creates a hash code for the whole entity which differs!
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.GetAttributesHashCode">
            <summary>
            Gets the attributes hash code.
            </summary>
            <remarks>Uses <see cref="M:Smartstore.Domain.AttributeSelection.GetHashCode"/>, so the returned value differs from that of <see cref="M:Smartstore.Domain.BaseEntity.GetHashCode"/>.</remarks>        
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.GetAssignedMediaIds">
            <summary>
            Gets the assigned media file identifiers.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.SetAssignedMediaIds(System.Int32[])">
            <summary>
            Sets the assigned media file identifiers.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection">
            <summary>
            Represents a product variant attribute selection.
            </summary>
            <remarks>This class can parse strings of XML or JSON format.</remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection.#ctor(System.String)">
            <summary>
            Creates product variant attribute selection from string. 
            Use <see cref="P:Smartstore.Domain.AttributeSelection.AttributesMap"/> to access parsed attributes afterwards.
            </summary>
            <remarks>Automatically differentiates between XML and JSON.</remarks>
            <param name="rawAttributes">XML or JSON attributes string.</param>  
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection.GetGiftCardInfo">
            <summary>
            Gets the gift card information.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection.AddGiftCardInfo(Smartstore.Core.Checkout.GiftCards.GiftCardInfo)">
            <summary>
            Adds gift card infomation to be taken into account when serializing attributes.
            </summary>
            <param name="giftCard">Gift card information.</param>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue">
            <summary>
            Represents a product variant attribute value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.ProductVariantAttributeId">
            <summary>
            Gets or sets the product variant attribute mapping identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.ProductVariantAttribute">
            <summary>
            Gets or sets the product variant attribute mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.Name">
            <summary>
            Gets or sets the product variant attribute name.
            </summary>
            <example>Green</example>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.MediaFileId">
            <summary>
            Gets or sets the media file identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.Color">
            <summary>
            Gets or sets the color RGB value (used with "Boxes" attribute type).
            </summary>
            <example>#00ff00</example>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.PriceAdjustment">
            <summary>
            Gets or sets the price adjustment\surcharge.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.WeightAdjustment">
            <summary>
            Gets or sets the weight adjustment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.IsPreSelected">
            <summary>
            Gets or sets a value indicating whether the value is preselected.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.ValueTypeId">
            <summary>
            Gets or sets the type identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.ValueType">
            <summary>
            Gets or sets the product attribute value type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.LinkedProductId">
            <summary>
            Gets or sets the linked product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.Quantity">
            <summary>
            Gets or sets the quantity for the linked product.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.ProductVariantQueryItem">
            <summary>
            Represents a product variant query item.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantQueryItem.CreateKey(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a key used for form names.
            </summary>
            <param name="productId">Product identifier.</param>
            <param name="bundleItemId">Bundle item identifier. 0 if not a bundle item.</param>
            <param name="attributeId">Product attribute identifier.</param>
            <param name="variantAttributeId">Product variant attribute identifier.</param>
            <returns>Key.</returns>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantQueryItem.ProductId">
            <summary>
            The <see cref="T:Smartstore.Core.Catalog.Products.Product"/> identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantQueryItem.BundleItemId">
            <summary>
            The <see cref="T:Smartstore.Core.Catalog.Products.ProductBundleItem"/> identifier. 0 if this item is not a bundle item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantQueryItem.AttributeId">
            <summary>
            The <see cref="T:Smartstore.Core.Catalog.Attributes.ProductAttribute"/> identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantQueryItem.VariantAttributeId">
            <summary>
            The <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute"/> identifier.
            It is the identifier of the mapping between a product and a product attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantQueryItem.Value">
            <summary>
            The variant value.
            For list type attributes like a dropdown list, this is the <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue"/> identifier.
            If multiple identifiers must be specified (e.g. for checkboxes), they can be separated by commas.
            For a file, this must be a <see cref="P:Smartstore.Core.Content.Media.Download.DownloadGuid"/>.
            </summary>
            <example>1234</example>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductVariantQueryItem.Date">
            <summary>
            The date if the control type is a datepicker. The value property is ignored in this case.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.SpecificationAttribute">
            <summary>
            Represents a specification attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttribute.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttribute.Essential">
            <summary>
            Gets or sets a value indicating whether the specification attribute is essential.
            Essential attributes are also displayed in the checkout (e.g. on the order confirmation page).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttribute.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttribute.ShowOnProductPage">
            <summary>
            Gets or sets a value indicating whether the specification attribute will be shown on the product page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttribute.AllowFiltering">
            <summary>
            Gets or sets a value indicating whether the specification attribute can be filtered.
            Only effective in accordance with MegaSearchPlus module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttribute.FacetSorting">
            <summary>
            Gets or sets the sorting of facets.
            Only effective in accordance with MegaSearchPlus module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttribute.FacetTemplateHint">
            <summary>
            Gets or sets the facet template hint.
            Only effective in accordance with MegaSearchPlus module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttribute.IndexOptionNames">
            <summary>
            Gets or sets a value indicating whether option names should be included in the search index.
            Only effective in accordance with MegaSearchPlus module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttribute.SpecificationAttributeOptions">
            <summary>
            Gets or sets the specification attribute options.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption">
            <summary>
            Represents a specification attribute option.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption.SpecificationAttributeId">
            <summary>
            Gets or sets the specification attribute identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption.SpecificationAttribute">
            <summary>
            Gets or sets the specification attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption.Alias">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption.NumberValue">
            <summary>
            Gets or sets the number value for range filtering.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption.MediaFileId">
            <summary>
            Gets or sets the media file identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption.Color">
            <summary>
            Gets or sets the color RGB value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.SpecificationAttributeOption.ProductSpecificationAttributes">
            <summary>
            Gets or sets the product specification attribute mappings.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductAttributeOptionQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductAttributeOption},System.Nullable{System.Int32})">
            <summary>
            Applies a standard filter and sorts by <see cref="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.DisplayOrder"/>, then by <see cref="P:Smartstore.Core.Catalog.Attributes.ProductAttributeOption.Name"/>.
            </summary>
            <param name="query">Product attribute option query.</param>
            <param name="optionsSetId">Options set identifier.</param>
            <returns>Product attribute option query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttributeQueryExtensions.ApplyProductsFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute},System.Int32[],System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Applies a filter for products and sorts by <see cref="P:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute.DisplayOrder"/>.
            </summary>
            <param name="query">Product specification attribute query.</param>
            <param name="productIds">Identifiers of products to be filtered.</param>
            <param name="allowFiltering">A value indicating whether to filter by <see cref="P:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute.AllowFiltering"/>.</param>
            <param name="showOnProductPage">A value indicating whether to filter by <see cref="P:Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute.ShowOnProductPage"/>.</param>
            <returns>Product specification attribute query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombinationQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination},System.Boolean)">
            <summary>
            Apply standard filter for a product variant combinations query.
            </summary>
            <param name="query">Product attribute combinations query.</param>
            <param name="includeHidden">Applies filter by <c>Product.Published</c> and <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.IsActive"/>.</param>
            <returns>Product attribute combinations query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombinationQueryExtensions.ApplyLowestPriceFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination},System.Int32)">
            <summary>
            Apply a filter to get the lowest attribute combination price and sorts by <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.Price"/>.
            </summary>
            <param name="query">Product attribute combinations query.</param>
            <param name="productId">Product identifier. Must not be zero.</param>
            <returns>Product attribute combinations query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombinationQueryExtensions.ApplySkuFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination},System.String)">
            <summary>
            Applies a filter for SKU.
            </summary>
            <param name="query">Product attribute combinations query.</param>
            <param name="sku">Stock keeping unit (SKU).</param>
            <returns>Product attribute combinations query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombinationQueryExtensions.ApplyGtinFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination},System.String)">
            <summary>
            Applies a filter for GTIN.
            </summary>
            <param name="query">Product attribute combinations query.</param>
            <param name="gtin">Global Trade Item Number (GTIN).</param>
            <returns>Product attribute combinations query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombinationQueryExtensions.ApplyMpnFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination},System.String)">
            <summary>
            Applies a filter for MPN.
            </summary>
            <param name="query">Product attribute combinations query.</param>
            <param name="manufacturerPartNumber">Manufacturer Part Number (MPN).</param>
            <returns>Product attribute combinations query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombinationQueryExtensions.ApplyProductCodeFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination},System.String)">
            <summary>
            Applies a filter to find a <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination"/> by its SKU, MPN or GTIN.
            </summary>
            <param name="query">Product attribute combinations query.</param>
            <param name="productCode">A product code like SKU, MPN or GTIN.</param>
            <returns>Product attribute combinations query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombinationQueryExtensions.ApplyHashCodeFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination},System.Int32,System.Int32)">
            <summary>
            Applies a filter to find a <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination"/> by hash code.
            </summary>
            <param name="productId">Product identifier.</param>
            <param name="hashCode">A hash code generated by <see cref="M:Smartstore.Domain.AttributeSelection.GetHashCode"/> or <see cref="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.GetAttributesHashCode"/>.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeQueryExtensions.ApplyProductFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttribute},System.Int32[])">
            <summary>
            Applies a filter for products and sorts by <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.DisplayOrder"/>.
            </summary>
            <param name="query">Product variant attribute query.</param>
            <param name="productIds">Product identifiers to be filtered.</param>
            <returns>Product variant attribute query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeQueryExtensions.ApplyListTypeFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttribute})">
            <summary>
            Applies a filter for list control types.
            </summary>
            <param name="query"><see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute"/> query.</param>
            <returns><see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute"/> query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelectionExtensions.MaterializeProductVariantAttributeValues(Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Attributes.ProductVariantAttribute})">
            <summary>
            Gets a list of product variant attribute values from an attribute selection. 
            Loads attribute values from <paramref name="attributes"/> and not from database.
            Typically used in conjunction with <see cref="T:Smartstore.Core.Catalog.Products.ProductBatchContext"/>.
            Only returns values of list type attributes (<see cref="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.IsListTypeAttribute"/>).
            </summary>
            <param name="selection">Attributes selection.</param>
            <param name="attributes">Attributes from which the values are loaded.</param>
            <returns>List of product variant attribute values.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValueQueryExtensions.ApplyProductAttributeFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue},System.Int32)">
            <summary>
            Applies a filter for product variant attribute and sorts by <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.DisplayOrder"/>.
            </summary>
            <param name="query">Product variant attribute value query.</param>
            <param name="productVariantAttributeId">Filter by <c>ProductVariantAttribute.Id</c>.</param>
            <returns>Product variant attribute value query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValueQueryExtensions.ApplyListTypeFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue})">
            <summary>
            Applies a filter for list control types and sorts by <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.DisplayOrder"/>, 
            then by <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.DisplayOrder"/>.
            Only product attributes of list types (e.g. dropdown list) can have assigned <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue"/> entities.
            </summary>
            <param name="query">Product variant attribute value query.</param>
            <returns>Product variant attribute value query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValueHook.OnInsertingAsync(Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue,Smartstore.Data.Hooks.IHookedEntity,System.Threading.CancellationToken)">
            <summary>
            Sets all product variant attribute values to <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.IsPreSelected"/> = false if the currently inserted entity is preselected.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValueHook.OnUpdatingAsync(Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue,Smartstore.Data.Hooks.IHookedEntity,System.Threading.CancellationToken)">
            <summary>
            Sets all product variant attribute values to <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.IsPreSelected"/> = false if the currently updated entity is preselected.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.Modelling.IProductVariantQueryFactory">
            <summary>
            Query factory for product variants.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.Modelling.IProductVariantQueryFactory.Current">
            <summary>
            The last created query instance. The model binder uses this property to avoid repeated binding.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.Modelling.IProductVariantQueryFactory.CreateFromQuery">
            <summary>
            Creates a <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantQuery"/> instance from the current <see cref="P:Microsoft.AspNetCore.Http.IHttpContextAccessor.HttpContext"/> 
            by looking up corresponding keys in posted form and/or query string.
            </summary>
            <returns>Product variant query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.Modelling.ProductVariantQueryFactory.IsVariantKeyRegex">
            <remarks>
            Pattern:<br/>
            <code>pvari[0-9]+-[0-9]+-[0-9]+-[0-9]+</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.Singleline</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [Pp].<br/>
            ○ Match a character in the set [Vv].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match a character in the set [Ii\u0130].<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.Modelling.ProductVariantQueryFactory.IsVariantAliasKeyRegex">
            <remarks>
            Pattern:<br/>
            <code>\\w+-[0-9]+-[0-9]+-[0-9]+</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.Singleline</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a word character atomically at least once.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.Modelling.ProductVariantQueryFactory.IsGiftCardKeyRegex">
            <remarks>
            Pattern:<br/>
            <code>giftcard[0-9]+-[0-9]+-\\.\\w+$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.Singleline</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [Gg].<br/>
            ○ Match a character in the set [Ii\u0130].<br/>
            ○ Match a character in the set [Ff].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Cc].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match a character in the set [Dd].<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            ○ Match the string "-.".<br/>
            ○ Match a word character atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.Modelling.ProductVariantQueryFactory.IsCheckoutAttributeKeyRegex">
            <remarks>
            Pattern:<br/>
            <code>cattr[0-9]+</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.Singleline</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [Cc].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Tt] exactly 2 times.<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match a character in the set [0-9] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.Modelling.ProductVariantQueryFactory.TextRegex">
            <remarks>
            Pattern:<br/>
            <code>\\p{C}+</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [\p{C}] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.Modelling.ProductVariantQueryFactory.TextAreaRegex">
            <remarks>
            Pattern:<br/>
            <code>[^\\P{C}\\n]+</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [^\n\P{C}] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.IProductAttributeFormatter">
            <summary>
            Product attribute formatter interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeFormatter.FormatAttributesAsync(Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions,Smartstore.Core.Identity.Customer,Smartstore.Core.Catalog.Products.ProductBatchContext)">
            <summary>
            Formats product and gift card attributes.
            </summary>
            <param name="selection">Attribute selection.</param>
            <param name="product">Product entity.</param>
            <param name="options">Formatting options.</param>
            <param name="customer">Customer entity. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="batchContext">The product batch context. For example used to load all products of a shopping cart in one go. Will be created internally if <c>null</c>.</param>
            <returns>Formatted attributes.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeFormatter.FormatAttributesAsync(Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Identity.Customer,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Smartstore.Core.Catalog.Products.ProductBatchContext)">
            <summary>
            Formats product and gift card attributes.
            </summary>
            <param name="selection">Attribute selection.</param>
            <param name="product">Product entity.</param>
            <param name="customer">Customer entity. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="separator">Separator between the formatted attributes.</param>
            <param name="htmlEncode">A value indicating whether to HTML encode values.</param>
            <param name="includePrices">A value indicating whether to include prices.</param>
            <param name="includeProductAttributes">A value indicating whether to include product attributes.</param>
            <param name="includeGiftCardAttributes">A value indicating whether to include gift card attributes.</param>
            <param name="includeHyperlinks">A value indicating whether to include HTML hyperlinks.</param>
            <param name="batchContext">The product batch context. For example used to load all products of a shopping cart in one go. Will be created internally if <c>null</c>.</param>
            <returns>Formatted attributes.</returns>
            <remarks>This method will be removed in a future release.</remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeFormatter.FormatSpecificationAttributes(System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Attributes.ProductSpecificationAttribute},Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions)">
            <summary>
            Formats product specification attributes.
            </summary>
            <param name="attributes">Product specification attributes to format.</param>
            <param name="options">Formatting options.</param>
            <returns>Formatted product specification attributes. <c>null</c> if <paramref name="attributes"/> is null or empty.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer">
            <summary>
            Product attribute materializer interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer.PrefetchProductVariantAttributesAsync(System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection})">
            <summary>
            Prefetches and caches all passed attribute selections for the current request.
            </summary>
            <param name="selections">All attribute selections to prefetch.</param>
            <returns>Number of prefetched attribute selections.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer.MaterializeProductVariantAttributesAsync(Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection)">
            <summary>
            Gets a list of product variant attributes.
            </summary>
            <param name="selection">Attributes selection.</param>
            <returns>List of product variant attributes.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer.MaterializeProductVariantAttributeValuesAsync(Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection)">
            <summary>
            Gets a list of product variant attribute values.
            </summary>
            <param name="selection">Attributes selection.</param>
            <returns>List of product variant attribute values.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer.CreateAttributeSelectionAsync(Smartstore.Core.Catalog.Attributes.ProductVariantQuery,System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Attributes.ProductVariantAttribute},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates an attribute selection.
            </summary>
            <param name="query">Product variant query.</param>
            <param name="attributes">Product variant attributes for the product.</param>
            <param name="productId">Product identifier.</param>
            <param name="bundleItemId">Bundle item identifier.</param>
            <param name="getFilesFromRequest">A value indicating whether to get the uploaded file from current request. 
            <c>false</c> to get the file GUID from the query object.</param>
            <returns>Created attribute selection and warnings, if any.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer.ClearCachedAttributes">
            <summary>
            Clears cached product attribute and attribute values.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer.FindAttributeCombinationAsync(System.Int32,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection)">
            <summary>
            Finds an attribute combination by attribute selection.
            </summary>
            <param name="productId">Product identifier.</param>
            <param name="selection">Attribute selection.</param>
            <returns>Found attribute combination or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer.MergeWithCombinationAsync(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination)">
            <summary>
            Finds an attribute combination by attribute selection and applies its data to the product.
            </summary>
            <param name="product">Product entity.</param>
            <param name="selection">Attribute selection.</param>
            <param name="combination">The attribute combination to be merged. Loaded by <see cref="M:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer.FindAttributeCombinationAsync(System.Int32,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection)"/> if <c>null</c>.</param>
            <returns>Found attribute combination or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer.MergeWithCombinationAsync(System.Collections.Generic.IEnumerable{Smartstore.Core.Checkout.Cart.ShoppingCartItem})">
            <summary>
            For each cart item, finds an attribute combination by attribute selection and applies its data to the product.
            </summary>
            <param name="cartItems">Cart items.</param>
            <returns>Number of merged attribute combinations.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeMaterializer.IsCombinationAvailableAsync(Smartstore.Core.Catalog.Products.Product,System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Attributes.ProductVariantAttribute},System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue},Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue)">
            <summary>
            Returns informations about the availability of an attribute combination.
            </summary>
            <param name="product">Product.</param>
            <param name="attributes">All product attributes of the specified product. <c>null</c> to test availability of <paramref name="selectedValues"/>.</param>
            <param name="selectedValues">The attribute values of the currently selected attribute combination.</param>
            <param name="currentValue">The current attribute value. <c>null</c> to test availability of <paramref name="selectedValues"/>.</param>
            <returns>Informations about the attribute combination's availability. <c>null</c> if the combination is available.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Attributes.IProductAttributeService">
            <summary>
            Product attribute service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeService.GetExportFieldMappingsAsync(System.String)">
            <summary>
            Gets the export mappings for a given field prefix.
            </summary>
            <param name="fieldPrefix">The export field prefix, e.g. "gmc".</param>
            <returns>A multimap with export field names to <c>ProductAttribute.Id</c> mappings.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeService.CopyAttributeOptionsAsync(Smartstore.Core.Catalog.Attributes.ProductVariantAttribute,System.Int32,System.Boolean)">
            <summary>
            Copies attribute options to product variant attribute values and commits them to the database. Existing values are ignored (identified by name field).
            </summary>
            <param name="productVariantAttribute">The product variant attribute mapping entity.</param>
            <param name="productAttributeOptionsSetId">Identifier of product attribute options set.</param>
            <param name="deleteExistingValues">A value indicating whether to delete all existing product variant attribute values.</param>
            <returns>Number of added product variant attribute values.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeService.GetAttributeCombinationFileIdsAsync(Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Gets a distinct list of media file identifiers.
            Only files that are explicitly assigned to combinations are taken into account.
            </summary>
            <param name="product">Product.</param>
            <returns>List of media file identifiers.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeService.GetAttributeCombinationFileIdsAsync(System.Int32)">
            <summary>
            Gets a distinct list of media file identifiers.
            Only files that are explicitly assigned to combinations are taken into account.
            </summary>
            <param name="productId">Product identifier.</param>
            <returns>List of media file identifiers.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.IProductAttributeService.CreateAllAttributeCombinationsAsync(System.Int32)">
            <summary>
            Creates all variant attributes combinations for a product.
            Already existing combinations will be deleted before.
            </summary>
            <param name="productId">Product identifier.</param>
            <returns>Number of added attribute combinations.</returns>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions.FormatTemplate">
            <summary>
            Format template to be used for each attribute.
            Placeholder {0}: attribute name, placeholder {1}: attribute value. 
            Default: "{0}: {1}".
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions.PriceFormatTemplate">
            <summary>
            Format template to be used for the attribute price adjustment to be appended to the attribute value (if applicable).
            Placeholder {0}: price. Default: " ({0})".
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions.ItemSeparator">
            <summary>
            Separator between each formatted attribute. Default: "<c>&lt;br /&gt;</c>".
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions.OptionsSeparator">
            <summary>
            Separator between grouped attribute options. Default: ", ".
            <c>null</c> to not group at all.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions.HtmlEncode">
            <summary>
            A value indicating whether to HTML encode values. Default = true.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions.IncludePrices">
            <summary>
            A value indicating whether to include prices. Default = true.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions.IncludeProductAttributes">
            <summary>
            A value indicating whether to include product attributes. Default = true.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions.IncludeGiftCardAttributes">
            <summary>
            A value indicating whether to include gift card attributes. Default = true.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Attributes.ProductAttributeFormatOptions.IncludeHyperlinks">
            <summary>
            A value indicating whether to include HTML hyperlinks. Default = true.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Attributes.ProductAttributeMaterializer.AttributeListControlTypeIds">
            <summary>
            All attribute control types to which <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue"/> entities can be assigned.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductAttributeMaterializer.NormalizeSelection(Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection)">
            <summary>
            Excludes all non-list type attributes from given selection.
            </summary>
            <returns>The normalized selection</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Attributes.ProductAttributeMaterializer.GetIntegerValues(Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection)">
            <summary>
            Gets all integer values of an attribute selection that are not 0.
            Usually these are <see cref="P:Smartstore.Domain.BaseEntity.Id"/> but can 
            (depending on <see cref="T:Smartstore.Core.Catalog.Attributes.AttributeControlType"/>) also be other numeric values of text fields.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Brands.Manufacturer">
            <summary>
            Represents a manufacturer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.Name">
            <summary>
            Gets or sets the brand name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.BottomDescription">
            <summary>
            Gets or sets a description displayed at the bottom of the manufacturer page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.ManufacturerTemplateId">
            <summary>
            Gets or sets the manufacturer template identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.MetaKeywords">
            <summary>
            Gets or sets the meta keywords.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.MetaDescription">
            <summary>
            Gets or sets the meta description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.MetaTitle">
            <summary>
            Gets or sets the meta title.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.MediaFileId">
            <summary>
            Gets or sets the media file identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.MediaFile">
            <summary>
            Gets or sets the media file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.PageSize">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.AllowCustomersToSelectPageSize">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.PageSizeOptions">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.PriceRanges">
            <summary>
            Gets or sets the available price ranges.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.LimitedToStores">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.SubjectToAcl">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.Published">
            <summary>
            Gets or sets a value indicating whether the entity is published.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.Deleted">
            <summary>
            Gets or sets a value indicating whether the entity has been deleted.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.CreatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.Manufacturer.UpdatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Catalog.Brands.Manufacturer.GetDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Catalog.Brands.Manufacturer.GetDisplayNameMemberNames">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Catalog.Brands.ManufacturerTemplate">
            <summary>
            Represents a manufacturer template.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.ManufacturerTemplate.Name">
            <summary>
            Gets or sets the template name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.ManufacturerTemplate.ViewPath">
            <summary>
            Gets or sets the view path.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.ManufacturerTemplate.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Brands.ProductManufacturer">
            <summary>
            Represents a product manufacturer mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.ManufacturerId">
            <summary>
            Gets or sets the manufacturer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.Manufacturer">
            <summary>
            Gets or sets the manufacturer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.Product">
            <summary>
            Gets or sets the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.IsFeaturedProduct">
            <summary>
            Gets or sets a value indicating whether the product is featured.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Brands.ManufacturerQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Brands.Manufacturer},System.Boolean,System.Int32[],System.Int32)">
            <summary>
            Applies standard filter and sorts by <see cref="P:Smartstore.Core.Catalog.Brands.Manufacturer.DisplayOrder"/>, then by <see cref="P:Smartstore.Core.Catalog.Brands.Manufacturer.Name"/>.
            </summary>
            <param name="query">Manufacturer query.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Catalog.Brands.Manufacturer.Published"/>.</param>
            <param name="customerRoleIds">Customer roles identifiers to apply filter by ACL restriction.</param>
            <param name="storeId">Store identifier to apply filter by store restriction.</param>
            <returns>Manufacturer query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Brands.ProductManufacturerQueryExtensions.ApplyManufacturerFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Brands.ProductManufacturer},System.Int32)">
            <summary>
            Applies a manufacturer filter and sorts by <see cref="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.DisplayOrder"/>, then by <c>ProductManufacturer.Id</c>
            Includes <see cref="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.Manufacturer"/> and <see cref="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.Product"/>.
            </summary>
            <param name="query">Product manufacturer query.</param>
            <param name="manufacturerId">Applies filter by <see cref="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.ManufacturerId"/>.</param>
            <returns>Product manufacturer query.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Brands.IManufacturerService">
            <summary>
            Manufacturer service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Brands.IManufacturerService.GetProductManufacturersByProductIdsAsync(System.Int32[],System.Boolean)">
            <summary>
            Gets product manufacturer mappings by product identifiers.
            </summary>
            <param name="productIds">Product identifiers.</param>
            <param name="includeHidden">A value indicating whether to include hidden manufacturers.</param>
            <returns>Product manufacturers.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Categories.Category">
            <summary>
            Represents a category of products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.ParentId">
            <summary>
            Gets or sets the parent category identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.TreePath">
            <summary>
            Gets or sets the tree path.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.Parent">
            <summary>
            Gets or sets the parent folder.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.Children">
            <summary>
            Gets or sets the child folders.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.Name">
            <summary>
            Gets or sets the category name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.FullName">
            <summary>
            Gets or sets the full name (category page title).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.BottomDescription">
            <summary>
            Gets or sets a description displayed at the bottom of the category page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.ExternalLink">
            <summary>
            Gets or sets the external link expression. If set, any category menu item will navigate to the specified link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.BadgeText">
            <summary>
            Gets or sets a text displayed in a badge next to the category within menus.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.BadgeStyle">
            <summary>
            Gets or sets the type of the badge within menus.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.Alias">
            <summary>
            Gets or sets the category alias.
            It's an optional key intended for advanced customization.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.CategoryTemplateId">
            <summary>
            Gets or sets the category template identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.MetaKeywords">
            <summary>
            Gets or sets the meta keywords.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.MetaDescription">
            <summary>
            Gets or sets the meta description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.MetaTitle">
            <summary>
            Gets or sets the meta title.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.MediaFileId">
            <summary>
            Gets or sets the media file identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.MediaFile">
            <summary>
            Gets or sets the media file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.PageSize">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.AllowCustomersToSelectPageSize">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.PageSizeOptions">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.PriceRanges">
            <summary>
            Gets or sets the available price ranges.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.ShowOnHomePage">
            <summary>
            Gets or sets a value indicating whether to show the category on home page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.LimitedToStores">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.SubjectToAcl">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.Published">
            <summary>
            Gets or sets a value indicating whether the entity is published.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.IgnoreInMenus">
            <summary>
            Gets or sets a value indicating whether to ignore the category in menus.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.Deleted">
            <summary>
            Gets or sets a value indicating whether the entity has been deleted.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.CreatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.UpdatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.DefaultViewMode">
            <summary>
            Gets or sets the default view mode.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.Category.RuleSets">
            <summary>
            Gets or sets assigned rule sets.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.Category.GetDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.Category.GetDisplayNameMemberNames">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.CategoryNode.Smartstore#Collections#IKeyedNode#GetNodeKey">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.CategoryNode.GetDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.CategoryNode.GetDisplayNameMemberNames">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.CategoryNode.GetEntityName">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Catalog.Categories.CategoryTemplate">
            <summary>
            Represents a category template.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.CategoryTemplate.Name">
            <summary>
            Gets or sets the template name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.CategoryTemplate.ViewPath">
            <summary>
            Gets or sets the view path.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.CategoryTemplate.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Categories.ITreeNode">
            <summary>
            Represents a tree node entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.ITreeNode.ParentId">
            <summary>
            Id of the parent entity or <c>null</c> if the node is the root.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.ITreeNode.TreePath">
            <summary>
            Gets or sets the tree path, like <c>/1/2/3/</c>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ITreeNode.GetParentNode">
            <summary>
            Gets the parent node instance or <c>null</c> if this node is a root.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ITreeNode.GetChildNodes">
            <summary>
            Enumerates the child nodes.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ITreeNode.GetQuery(Smartstore.Core.Data.SmartDbContext)">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryable`1"/> used to access the entity storage.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Categories.ProductCategory">
            <summary>
            Represents a product category mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.ProductCategory.CategoryId">
            <summary>
            Gets or sets the category identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.ProductCategory.Category">
            <summary>
            Gets or sets the category.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.ProductCategory.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.ProductCategory.Product">
            <summary>
            Gets or sets the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.ProductCategory.IsFeaturedProduct">
            <summary>
            Gets or sets a value indicating whether the product is featured.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.ProductCategory.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Categories.ProductCategory.IsSystemMapping">
            <summary>
            Indicates whether the mapping is created by the user or by the system.
            <c>False</c> by default (recommended).
            </summary>
            <remarks>
            System mappings are automatically added and deleted (!) by <see cref="T:Smartstore.Core.Catalog.Rules.ProductRuleEvaluatorTask"/>.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.CategoryNodeExtensions.SortCategoryNodesForTree``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
            Sort categories for tree representation.
            </summary>
            <param name="source">Source categories.</param>
            <param name="parentId">Parent category identifier.</param>
            <param name="ignoreDetachedCategories">A value indicating whether categories without existing parent category in provided category list (source) should be ignored.</param>
            <returns>Sorted categories</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.CategoryNodeExtensions.GetCategoryNameIndented(Smartstore.Collections.TreeNode{Smartstore.Core.Catalog.Categories.ICategoryNode},System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets the indented name of a category.
            </summary>
            <param name="treeNode">Tree node.</param>
            <param name="indentWith">Indent string.</param>
            <param name="languageId">Language identifier.</param>
            <param name="withAlias">A value indicating whether to append the category alias.</param>
            <returns>Indented category name.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.CategoryNodeExtensions.GetTreePath(Smartstore.Collections.TreeNode{Smartstore.Core.Catalog.Categories.ICategoryNode})">
            <summary>
            Gets the tree path of a category.
            </summary>
            <param name="treeNode">Tree node to get tree path for.</param>
            <returns>The tree path, or <c>null</c> if the given <paramref name="treeNode"/> is a root node.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.CategoryQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Categories.Category},System.Boolean,System.Int32[],System.Int32)">
            <summary>
            Applies standard filter and sorts by <see cref="P:Smartstore.Core.Catalog.Categories.Category.ParentId"/>, then by <see cref="P:Smartstore.Core.Catalog.Categories.Category.DisplayOrder"/>, then by <see cref="P:Smartstore.Core.Catalog.Categories.Category.Name"/>.
            </summary>
            <param name="query">Category query.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Catalog.Categories.Category.Published"/>.</param>
            <param name="customerRoleIds">Customer roles identifiers to apply filter by ACL restriction.</param>
            <param name="storeId">Store identifier to apply filter by store restriction.</param>
            <returns>Category query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ITreeNodeQueryExtensions.ApplyDescendantsFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Categories.ITreeNode},Smartstore.Core.Catalog.Categories.ITreeNode)">
            <summary>
            Applies a filter that reads all descendant nodes of the given <paramref name="node"/>.
            </summary>
            <param name="node">The node to retrieve descendants from.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ITreeNodeQueryExtensions.ApplyDescendantsFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Categories.ITreeNode},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Applies a filter that reads all descendant nodes of the node with Id = given <paramref name="parentNodeId"/>.
            </summary>
            <param name="parentNodeId">The parent's id to get descendants from.</param>
            <param name="deep"><c>false</c> = retrieve only direct children, <c>true</c> = retrieve any descendant.</param>
            <param name="includeSelf"><c>true</c> = add the parent node to the result list, <c>false</c> = ignore the parent node.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ITreeNodeQueryExtensions.ApplyDescendantsFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Categories.ITreeNode},System.String,System.Boolean)">
            <summary>
            Applies a filter that reads all descendant nodes of the node with the given <paramref name="treePath"/>.
            </summary>
            <param name="treePath">The parent's tree path to get descendants from.</param>
            <param name="includeSelf"><c>true</c> = add the parent node to the result list, <c>false</c> = ignore the parent node.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ProductCategoryQueryExtensions.ApplyCategoryFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Categories.ProductCategory},System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Applies a category filter and sorts by <see cref="P:Smartstore.Core.Catalog.Categories.ProductCategory.DisplayOrder"/>, then by <see cref="P:Smartstore.Domain.BaseEntity.Id"/>
            Includes <see cref="P:Smartstore.Core.Catalog.Categories.ProductCategory.Category"/> and <see cref="P:Smartstore.Core.Catalog.Categories.ProductCategory.Product"/>.
            </summary>
            <param name="query">Product category query.</param>
            <param name="categoryId">Applies filter by <see cref="P:Smartstore.Core.Catalog.Categories.ProductCategory.CategoryId"/>.</param>
            <param name="isSystemMapping">Applies filter by <see cref="P:Smartstore.Core.Catalog.Categories.ProductCategory.IsSystemMapping"/></param>
            <returns>Product category query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ProductCategoryQueryExtensions.ApplyDescendantsFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Categories.ProductCategory},System.String,System.Boolean)">
            <summary>
            Applies a filter that reads all descendant nodes of the node with the given <paramref name="treePath"/>.
            </summary>
            <param name="treePath">The parent's tree path to get descendants from.</param>
            <param name="includeSelf"><c>true</c> = add the parent node to the result list, <c>false</c> = ignore the parent node.</param>
        </member>
        <member name="T:Smartstore.Core.Catalog.Categories.ICategoryService">
            <summary>
            Category service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ICategoryService.DeleteCategoryAsync(Smartstore.Core.Catalog.Categories.Category,System.Boolean)">
            <summary>
            Deletes a category.
            </summary>
            <param name="category">Category entity.</param>
            <param name="deleteSubCategories">A value indicating whether to delete child categories or to set them to no parent.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ICategoryService.InheritAclIntoChildrenAsync(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns ACL restrictions to sub-categories and products.
            </summary>
            <param name="categoryId">Category identifier.</param>
            <param name="touchProductsWithMultipleCategories">Reserved for future use. 
            A value indicating whether to assign ACL restrictions to products which are contained in multiple categories.</param>
            <param name="touchExistingAcls">Reserved for future use. 
            A value indicating whether to delete existing ACL restrictions.</param>
            <param name="categoriesOnly">Reserved for future use. 
            A value indicating whether to assign ACL restrictions only to categories.</param>
            <returns>Number of affected categories and products.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ICategoryService.InheritStoresIntoChildrenAsync(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns store restrictions to sub-categories and products.
            </summary>
            <param name="categoryId">Category identifier.</param>
            <param name="touchProductsWithMultipleCategories">Reserved for future use.
            A value indicating whether to assign store restrictions to products which are contained in multiple categories.</param>
            <param name="touchExistingAcls">Reserved for future use.
            A value indicating whether to delete existing store restrictions.</param>
            <param name="categoriesOnly">Reserved for future use.
            A value indicating whether to assign store restrictions only to categories.</param>
            <returns>Number of affected categories and products.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ICategoryService.GetCategoriesByParentCategoryIdAsync(System.Int32,System.Boolean)">
            <summary>
            Get categories by parent category identifier.
            </summary>
            <param name="parentCategoryId">Parent category identifier.</param>
            <param name="includeHidden">A value indicating whether to include hidden categories.</param>
            <returns>Categories.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ICategoryService.GetProductCategoriesByProductIdsAsync(System.Int32[],System.Boolean)">
            <summary>
            Gets product category mappings.
            </summary>
            <param name="productIds">Product identifiers.</param>
            <param name="includeHidden">A value indicating whether to include hidden categories.</param>
            <returns>Product categories.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ICategoryService.GetCategoryPathAsync(Smartstore.Core.Catalog.Categories.ICategoryNode,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Builds a category breadcrumb (path) for a particular category node.
            </summary>
            <param name="categoryNode">The category node.</param>
            <param name="languageId">The language identifier. Pass <c>null</c> to skip localization.</param>
            <param name="aliasPattern">How the category alias - if specified - should be appended to the category name (e.g. <c>({0})</c>).</param>
            <param name="separator">The separator string.</param>
            <returns>Category breadcrumb path.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ICategoryService.GetCategoryPath(Smartstore.Collections.TreeNode{Smartstore.Core.Catalog.Categories.ICategoryNode},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Builds a category breadcrumb (path) for a particular category node.
            </summary>
            <param name="treeNode">The category node.</param>
            <param name="languageId">The language identifier. Pass <c>null</c> to skip localization.</param>
            <param name="aliasPattern">How the category alias - if specified - should be appended to the category name (e.g. <c>({0})</c>).</param>
            <param name="separator">The separator string.</param>
            <returns>Category breadcrumb path.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Categories.ICategoryService.GetCategoryTreeAsync(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Gets the tree representation of categories.
            </summary>
            <param name="rootCategoryId">Specifies which node to return as root.</param>
            <param name="includeHidden"><c>false</c> excludes unpublished and ACL-inaccessible categories.</param>
            <param name="storeId">&gt; 0 = apply store mapping, 0 to bypass store mapping.</param>
            <returns>The category tree representation.</returns>
            <remarks>
            This method puts the tree result into application cache, so subsequent calls are very fast.
            Localization is up to the caller because the nodes only contain unlocalized data.
            Subscribe to the <c>CategoryTreeChanged</c> event if you need to evict cache entries which depend
            on this method's result.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowProductSku">
            <summary>
            Gets or sets a value indicating whether to display product SKU
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowManufacturerPartNumber">
            <summary>
            Gets or sets a value indicating whether to display manufacturer part number of a product
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowGtin">
            <summary>
            Gets or sets a value indicating whether to display GTIN of a product
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowWeight">
            <summary>
            Gets or sets a value indicating whether to display weight of a product
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowDimensions">
            <summary>
            Gets or sets a value indicating whether to display dimensions of a product
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.DeliveryTimesInLists">
            <summary>
            Specifies the presentation of delivery times in product lists.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.DeliveryTimesInProductDetail">
            <summary>
            Specifies the presentation of delivery times in product detail pages.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowLinkedAttributeValueQuantity">
            <summary>
            Gets or sets a value indicating whether to display quantity of linked product at attribute values
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowLinkedAttributeValueImage">
            <summary>
            Gets or sets a value indicating whether to display the image of linked product at attribute values
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowProductTags">
            <summary>
            Gets or sets a value indicating whether to display product tags on the product detail page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.MaxItemsToDisplayInCatalogMenu">
            <summary>
            Gets or sets a value indicating how many menu items will be displayed
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.AllowProductSorting">
            <summary>
            Gets or sets a value indicating whether product sorting is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.DefaultSortOrder">
            <summary>
            Gets or sets the default sort order in product lists
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.AllowProductViewModeChanging">
            <summary>
            Gets or sets a value indicating whether customers are allowed to change product view mode
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.DefaultViewMode">
            <summary>
            Gets or sets the default view mode for product lists
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowProductsFromSubcategories">
            <summary>
            Gets or sets a value indicating whether a category details page should include products from subcategories
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowCategoryProductNumber">
            <summary>
            Gets or sets a value indicating whether number of products should be displayed beside each category
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowCategoryProductNumberIncludingSubcategories">
            <summary>
            Gets or sets a value indicating whether we include subcategories (when 'ShowCategoryProductNumber' is 'true')
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.CategoryBreadcrumbEnabled">
            <summary>
            Gets or sets a value indicating whether category breadcrumb is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.SubCategoryDisplayType">
            <summary>
            Gets or sets a value indicating whether and where to display a list of subcategories
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowSubCategoriesInSubPages">
            <summary>
            An option indicating whether sub pages should display the subcategories
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowDescriptionInSubPages">
            <summary>
            An option indicating whether sub pages should display the category/manufacturer description
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowProductReviewsInProductLists">
            <summary>
            Gets or sets a value indicating whether to display reviews in product lists
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowProductReviewsInProductDetail">
            <summary>
            Gets or sets a value indicating whether to display reviews in product detail
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowVerfiedPurchaseBadge">
            <summary>
            Gets or sets a value whether to display the badge for verified purchases.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ProductReviewsMustBeApproved">
            <summary>
            Gets or sets a value indicating product reviews must be approved
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.DefaultProductRatingValue">
            <summary>
            Gets or sets a value indicating the default rating value of the product reviews
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.AllowAnonymousUsersToReviewProduct">
            <summary>
            Gets or sets a value indicating whether to allow anonymous users write product reviews.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.NotifyStoreOwnerAboutNewProductReviews">
            <summary>
            Gets or sets a value indicating whether notification of a store owner about new product reviews is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.EmailAFriendEnabled">
            <summary>
            Gets or sets a value indicating whether product 'Email a friend' feature is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.AskQuestionEnabled">
            <summary>
            Gets or sets a value indicating whether 'ask product question' feature is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.AllowDifferingEmailAddressForEmailAFriend">
            <summary>
            Gets or sets a value indicating whether customers are allowed to enter a differing email address 
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.AllowAnonymousUsersToEmailAFriend">
            <summary>
            Gets or sets a value indicating whether to allow anonymous users to email a friend.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.RecentlyViewedProductsNumber">
            <summary>
            Gets or sets a number of "Recently viewed products"
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.RecentlyViewedProductsEnabled">
            <summary>
            Gets or sets a value indicating whether "Recently viewed products" feature is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.RecentlyAddedProductsNumber">
            <summary>
            Gets or sets a number of "Recently added products"
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.RecentlyAddedProductsEnabled">
            <summary>
            Gets or sets a value indicating whether "Recently added products" feature is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.CompareProductsEnabled">
            <summary>
            Gets or sets a value indicating whether "Compare products" feature is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowBestsellersOnHomepage">
            <summary>
            Gets or sets a value indicating whether to show bestsellers on home page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.NumberOfBestsellersOnHomepage">
            <summary>
            Gets or sets a number of bestsellers on home page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowManufacturersOnHomepage">
            <summary>
            Gets or sets a value indicating whether to show manufacturers on home page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowManufacturersInOffCanvas">
            <summary>
            Gets or sets a value indicating whether to show manufacturers in offcanvas menu
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ManufacturerItemsToDisplayOnHomepage">
            <summary>
            Gets or sets the value indicating how many manufacturers on home page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ManufacturerItemsToDisplayInOffcanvasMenu">
            <summary>
            Gets or sets the value indicating how many manufacturers in offcanvas menu
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowManufacturerPictures">
            <summary>
            Gets or sets a value indicating whether to show manufacturer pictures or names on home page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowManufacturerInProductDetail">
            <summary>
            Gets or sets a value indicating whether to display manufacturer detail links in product detail pages
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowManufacturerPicturesInProductDetail">
            <summary>
            Gets or sets a value indicating whether to display pictures or textual links to manufacturer pages in product detail pages
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.HideManufacturerDefaultPictures">
            <summary>
            Gets or sets a value indicating whether to hide manufacturer default pictures
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.SortManufacturersAlphabetically">
            <summary>
            Gets or sets a value indicating whether to hide manufacturer default pictures
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.HideCategoryDefaultPictures">
            <summary>
            Gets or sets a value indicating whether to hide category default pictures
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.HideProductDefaultPictures">
            <summary>
            Gets or sets a value indicating whether to hide product default pictures
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowProductCondition">
            <summary>
            Gets or sets a value whether to display the product condition.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ProductsAlsoPurchasedEnabled">
            <summary>
            Gets or sets "List of products purchased by other customers who purchased the above" option is enable
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ProductsAlsoPurchasedNumber">
            <summary>
            Gets or sets a number of products also purchased by other customers to display
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.NumberOfProductTags">
            <summary>
            Gets or sets a number of product tags that appear in the tag cloud
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.DefaultProductListPageSize">
            <summary>
            Gets or sets a number of products per page on a product list page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.AllowCustomersToSelectPageSize">
            <summary>
            Gets or sets a value indicating whether customers can select page size in product listings
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.DisplayAllImagesNumber">
            <summary>
            Gets or sets the threshold above which only images that are not assigned to any or the selected attribute combination are displayed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.ShowManufacturerLogoInLists">
            <summary>
            Whether to show brand logo instead of textual name in product lists
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.LinkManufacturerLogoInLists">
            <summary>
            Gets or sets a value indicating whether the manufacturer logo should be linked in product lists.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.LabelAsNewByAvailableDate">
            <summary>
            Gets or sets a value indicating whether to label products as "new" 
            by the availability start date instead of the creation date.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.DefaultPageSizeOptions">
            <summary>
            Gets or sets the available customer selectable default page size options
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.IncludeShortDescriptionInCompareProducts">
            <summary>
            Gets or sets a value indicating whether to include "Short description" in compare products
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.IncludeFullDescriptionInCompareProducts">
            <summary>
            Gets or sets a value indicating whether to include "Full description" in compare products
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.UseSmallProductBoxOnHomePage">
            <summary>
            Gets or sets a value indicating whether to use small product boxes on home page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.IncludeFeaturedProductsInNormalLists">
            <summary>
            An option indicating whether products on category and manufacturer pages should include featured products as well
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.IncludeFeaturedProductsInSubPages">
            <summary>
            An option indicating whether products on category and manufacturer pages should include featured products in sub pages as well
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.IgnoreFeaturedProducts">
            <summary>
            Gets or sets a value indicating whether to ignore featured products (side-wide)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.MaximumBackInStockSubscriptions">
            <summary>
            Gets or sets a value indicating maximum number of 'back in stock' subscription per customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.FileUploadMaximumSizeBytes">
            <summary>
            Gets or sets a maximum file upload size in bytes for product attributes ('File Upload' type)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.FileUploadAllowedExtensions">
            <summary>
            Gets or sets a list of allowed file extensions for customer uploaded files
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.EnableHtmlTextCollapser">
            <summary>
            Gets or sets a value indicating if html long text should be collapsed
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.HtmlTextCollapsedHeight">
            <summary>
            Gets or sets the height of collapsed text
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.DeliveryTimeIdForEmptyStock">
            <summary>
            Gets or sets the identifier of a delivery time displayed when the stock is empty.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.MostRecentlyUsedCategoriesMaxSize">
            <summary>
            Gets or sets how many items to display maximally in the most recently used category list
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.MostRecentlyUsedManufacturersMaxSize">
            <summary>
            Gets or sets how many items to display maximally in the most recently used manufacturer list
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.GridStyleListColumnSpan">
            <summary>
            Gets or sets how many columns per row should be displayed at most in grid style lists on largest screen resolution.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.AssociatedProductsTitle">
            <summary>
            Gets or sets a title for the associated products list.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.AssociatedProductsPageSize">
            <summary>
            Gets or sets the number of associated products per page.
            The default value is 20.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.SearchMinAssociatedProductsCount">
            <summary>
            Gets or sets the minimum number of associated products from which a search box is displayed.
            The default value is 10.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.CollapsibleAssociatedProducts">
            <summary>
            Gets or sets a value indicating whether associated products are collapsible.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.CatalogSettings.CollapsibleAssociatedProductsHeaders">
            <summary>
            Gets or sets name of fields to display in a collapse header of associated products.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Discounts.Discount">
            <summary>
            Represents a discount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.DiscountTypeId">
            <summary>
            Gets or sets the discount type identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.DiscountType">
            <summary>
            Gets or sets the discount type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.UsePercentage">
            <summary>
            Gets or sets a value indicating whether the discount amount is calculated by percentage.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.DiscountPercentage">
            <summary>
            Gets or sets the discount percentage.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.DiscountAmount">
            <summary>
            Gets or sets the discount amount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.StartDateUtc">
            <summary>
            Gets or sets the discount start date.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.EndDateUtc">
            <summary>
            Gets or sets the discount end date.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.RequiresCouponCode">
            <summary>
            Gets or sets a value indicating whether the discount requires a coupon code.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.CouponCode">
            <summary>
            Gets or sets the coupon code.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.DiscountLimitationId">
            <summary>
            Gets or sets the discount limitation identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.DiscountLimitation">
            <summary>
            Gets or sets the discount limitation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.LimitationTimes">
            <summary>
            Gets or sets the discount limitation times.
            It is used when the limitation type is set to "N times only" or "N times per customer".
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.ShowCountdownRemainingHours">
            <summary>
            Sets the discount remaining time (in hours) from which a countdown should be displayed in product detail,
            e.g. "ends in 3 hours, 23 min.". Only applies to limited time discounts with a non-null <see cref="P:Smartstore.Core.Catalog.Discounts.Discount.EndDateUtc"/>.
            A value set here overwrites the system default <see cref="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowOfferCountdownRemainingHours"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.OfferBadgeLabel">
            <summary>
            The label of the discount badge, e.g. "Deal".
            A value set here overwrites the system default <see cref="P:Smartstore.Core.Catalog.Pricing.PriceSettings.OfferBadgeLabel"/>
            or <see cref="P:Smartstore.Core.Catalog.Pricing.PriceSettings.LimitedOfferBadgeLabel"/> accordingly.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.RuleSets">
            <summary>
            Gets or sets assigned rule sets.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.AppliedToManufacturers">
            <summary>
            Gets or sets the manufacturers to which the discount is applied.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.AppliedToCategories">
            <summary>
            Gets or sets the categories to which the discount is applied.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.Discount.AppliedToProducts">
            <summary>
            Gets or sets the products to which the discount is applied.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Discounts.DiscountType">
            <summary>
            Represents a discount type.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountType.AssignedToOrderTotal">
            <summary>
            Assigned to order total .
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountType.AssignedToSkus">
            <summary>
            Assigned to products (SKUs).
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountType.AssignedToCategories">
            <summary>
            Assigned to categories (all products in a category).
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountType.AssignedToManufacturers">
            <summary>
            Assigned to manufacturers (all products of a manufacturer).
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountType.AssignedToShipping">
            <summary>
            Assigned to shipping.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountType.AssignedToOrderSubTotal">
            <summary>
            Assigned to order subtotal.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Discounts.DiscountLimitationType">
            <summary>
            Represents a discount limitation type.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountLimitationType.Unlimited">
            <summary>
            No limitation.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountLimitationType.NTimesOnly">
            <summary>
            N times only.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountLimitationType.NTimesPerCustomer">
            <summary>
            N times per customer.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Discounts.DiscountValidationFlags">
            <summary>
            Allows to specify which discount requirement should be validated.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountValidationFlags.DiscountLimitations">
            <summary>
            Validates <see cref="P:Smartstore.Core.Catalog.Discounts.Discount.DiscountLimitation"/>.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountValidationFlags.GiftCards">
            <summary>
            Checks the shopping cart for the existence of gift cards.
            No discount is applied if the cart contains gift cards because the customer could earn money through that.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountValidationFlags.CartRules">
            <summary>
            Validates cart rules.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Discounts.DiscountValidationFlags.All">
            <summary>
            Validates all discount requirements.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Discounts.DiscountUsageHistory">
            <summary>
            Represents a usage history item for discounts.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.DiscountUsageHistory.DiscountId">
            <summary>
            Gets or sets the discount identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.DiscountUsageHistory.Discount">
            <summary>
            Gets or sets the discount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.DiscountUsageHistory.OrderId">
            <summary>
            Gets or sets the order identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.DiscountUsageHistory.Order">
            <summary>
            Gets or sets the order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.DiscountUsageHistory.CreatedOnUtc">
            <summary>
            Gets or sets the date of instance creation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.EntityWithDiscounts.HasDiscountsApplied">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.EntityWithDiscounts.AppliedDiscounts">
            <summary>
            Gets or sets the applied discounts.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Discounts.IDiscountable">
            <summary>
            Represents an entity with applicable discounts.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.IDiscountable.HasDiscountsApplied">
            <summary>
            Gets or sets a value indicating whether this entity has discounts applied.
            </summary>
            <remarks>
            We use this property for performance optimization:
            if this property is set to false, then we do not need to load AppliedDiscounts navigation property.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Catalog.Discounts.IDiscountable.AppliedDiscounts">
            <summary>
            Gets the applied discounts.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Discounts.DiscountExtensions.IsDateInRange(Smartstore.Core.Catalog.Discounts.Discount)">
            <summary>
            Gets a value indicating whether the current date is within the date range of the discount.
            </summary>
            <returns>
            <c>true</c> current date is within the date range of the discount or discount has no date range at all,
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Discounts.DiscountExtensions.GetDiscountAmount(Smartstore.Core.Catalog.Discounts.Discount,System.Decimal)">
            <summary>
            Gets the discount amount for the specified value.
            </summary>
            <param name="discount">Discount.</param>
            <param name="value">Amount value.</param>
            <returns>The discount amount.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Discounts.DiscountExtensions.GetPreferredDiscount(System.Collections.Generic.ICollection{Smartstore.Core.Catalog.Discounts.Discount},System.Decimal)">
            <summary>
            Gets the discount that achieves the highest discount amount other than zero.
            </summary>
            <param name="discounts">List of discounts.</param>
            <param name="amount">Amount without discount (for percentage discounts).</param>
            <returns>Discount that achieves the highest discount amount other than zero.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Discounts.DiscountUsageHistoryQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Discounts.DiscountUsageHistory},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Applies a standard filter and sorts by <see cref="P:Smartstore.Core.Catalog.Discounts.DiscountUsageHistory.CreatedOnUtc"/> descending.
            </summary>
            <param name="query">Discount usage history query.</param>
            <param name="discountId">Discount identifier.</param>
            <param name="customerId">Customer identifier.</param>
            <returns>Ordered discount usage history query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Discounts.IDiscountServiceExtensions.IsDiscountValidAsync(Smartstore.Core.Catalog.Discounts.IDiscountService,Smartstore.Core.Catalog.Discounts.Discount,Smartstore.Core.Identity.Customer,Smartstore.Core.Stores.Store,Smartstore.Core.Catalog.Discounts.DiscountValidationFlags)">
            <summary>
            Checks whether the discount requirements are met.
            </summary>
            <param name="discountService">Discount service.</param>
            <param name="discount">Discount.</param>
            <param name="customer">Customer.</param>
            <param name="store">Store. If <c>null</c>, store will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
            <param name="flags">
            Specifies which discount requirements to be validated.
            Requirements for which no further data needs to be loaded are always validated (e.g. coupon codes and date ranges).
            </param>
            <returns><c>true</c> discount requirements are met, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Discounts.IDiscountService">
            <summary>
            Discount service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Discounts.IDiscountService.GetAllDiscountsAsync(System.Nullable{Smartstore.Core.Catalog.Discounts.DiscountType},System.String,System.Boolean)">
            <summary>
            Gets all discounts as untracked entities.
            </summary>
            <param name="discountType">Discount type. <c>null</c> to load all discounts.</param>
            <param name="couponCode">Discount coupon code. <c>null</c> to load all discounts.</param>
            <param name="includeHidden">A value indicating whether to include hidden discounts.</param>
            <returns>Discounts.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Discounts.IDiscountService.IsDiscountValidAsync(Smartstore.Core.Catalog.Discounts.Discount,Smartstore.Core.Identity.Customer,System.String,Smartstore.Core.Stores.Store,Smartstore.Core.Catalog.Discounts.DiscountValidationFlags)">
            <summary>
            Checks whether the discount requirements are met.
            </summary>
            <param name="discount">Discount.</param>
            <param name="customer">Customer.</param>
            <param name="couponCodeToValidate">Coupon code to validate.</param>
            <param name="store">Store. If <c>null</c>, store will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
            <param name="flags">
            Specifies which discount requirements to be validated.
            Requirements for which no further data needs to be loaded are always validated (e.g. coupon codes and date ranges).
            </param>
            <returns><c>true</c> discount requirements are met, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Discounts.IDiscountService.ApplyDiscountsAsync``1(``0,System.Int32[],Smartstore.Core.Catalog.Discounts.DiscountType)">
            <summary>
            Applies given <paramref name="selectedDiscountIds"/> to <paramref name="entity"/>.
            The caller is responsible for database commit.
            </summary>
            <param name="entity">The entity to apply discounts to.</param>
            <param name="selectedDiscountIds">Identifiers of discounts to apply.</param>
            <param name="type">The discount type.</param>
            <returns><c>true</c> if a database commit is required. <c>false</c> if nothing changed.</returns>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowBasePriceInProductLists">
            <summary>
            Gets or sets a value indicating whether to display the base price of a product
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowVariantCombinationPriceAdjustment">
            <summary>
            Gets or sets a value indicating whether to display price adjustment of a product variant combination
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowLoginForPriceNote">
            <summary>
            Indicates whether to show a login note if the user is not authorized to see prices.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.BundleItemShowBasePrice">
            <summary>
            Gets or sets a value indicating whether base price should be rendered for bundle items
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowSavingBadgeInLists">
            <summary>
            Gets or sets a value indicating whether to show savings badge in product lists
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.PriceDisplayType">
            <summary>
            Gets or sets the price display type for prices in product lists
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.DisplayTextForZeroPrices">
            <summary>
            Displays a textual resources instead of the decimal value when prices are 0
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.IgnoreDiscounts">
            <summary>
            Gets or sets a value indicating whether to always ignore discounts.
            Discounts explicitly offered for bundle items are excluded from this. They are always applied.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ApplyPercentageDiscountOnTierPrice">
            <summary>
            Gets or sets whether to also apply percentage discounts in tier prices.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ApplyTierPricePercentageToAttributePriceAdjustments">
            <summary>
            Gets or sets a value indicating whether percental values of tierprices should be applied to price adjustments of attributes
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.DefaultComparePriceLabelId">
            <summary>
            The system default id of PriceLabel entity for product compare prices.
            Takes effect when a product does not override the ComparePrice label.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.DefaultRegularPriceLabelId">
            <summary>
            The system default id of PriceLabel entity to use for the crossed out regular price.
            Takes effect when there is an offer or a discount has been applied to a product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.OfferPriceReplacesRegularPrice">
            <summary>
            If TRUE, the special offer price just replaces the regular price
            as if there was no offer. If FALSE, the regular price will be displayed crossed out.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.AlwaysDisplayRetailPrice">
            <summary>
            If TRUE, the MSRP will be displayed in product detail even if there is already an offer or a discount.
            In this case the MSRP will appear as another crossed out price alongside the discounted price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowOfferCountdownRemainingHours">
            <summary>
            Sets the offer remaining time (in hours) from which a countdown should be displayed in product details,
            e.g. "ends in 3 hours, 23 min.". To hide the countdown, set this to NULL.
            Only applies to limited time offers with a non-null end date.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowOfferBadge">
            <summary>
            <c>true</c> to display a badge if an offer price is active.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowOfferBadgeInLists">
            <summary>
            If TRUE, displays a badge in product lists if an offer price is active.
            <see cref="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowOfferBadge"/> must be TRUE for this to take effect.
            </summary>  
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.OfferBadgeLabel">
            <summary>
            The label of the offer badge, e.g. "Deal".
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.OfferBadgeStyle">
            <summary>
            The style of the offer badge.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.LimitedOfferBadgeLabel">
            <summary>
            The label of the offer badge if the offer is limited, e.g. "Limited time deal".
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.LimitedOfferBadgeStyle">
            <summary>
            The style of the limited time offer badge.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowPriceLabelInLists">
            <summary>
            <c>true</c> to display the compare price label's short name in product lists.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ShowRetailPriceSaving">
            <summary>
            If TRUE, displays price saving even if the reference price is the retail price only.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ValidateDiscountLimitationsInLists">
            <summary>
            <c>true</c> to validate discount limitations in product lists.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ValidateDiscountRulesInLists">
            <summary>
            <c>true</c> to validate cart rules assigned to discounts in product lists.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ValidateDiscountGiftCardsInLists">
            <summary>
            <c>true</c> to check the shopping cart for the existence of gift cards when validating discounts in product lists.
            In this case no discount is applied because the customer could earn money through that.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.ApplyPriceRangeFormatInProductDetails">
            <summary>
            <c>true</c> to initially apply the price range format (e.g. "from {0}") in product details.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSettings.IgnoreProductDiscountsForSpecialPrices">
            <summary>
            Gets or sets a value indicating whether to ignore discounts assigned to products when a special price is applied.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.CalculatedDiscount">
            <summary>
            Represents a discount amount calculated during price calculation. Typically used when the discount amount cannot be applied to 
            <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.FinalPrice"/> directly, but only later during the calculation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedDiscount.Origin">
            <summary>
            Origin of the calculated discount amount, e.g. 'MinTierPrice'.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedDiscount.Discount">
            <summary>
            The associated discount entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedDiscount.DiscountAmount">
            <summary>
            The calculated discount amount.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.CalculatedPrice">
            <summary>
            Represents the result of a price calculation process for a single product. All monetary amounts
            are in the target currency and have been exchanged and converted according to input options.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.CalculatedPrice.#ctor(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Pricing.PricingType)">
            <summary>
            For testing or skipped calculations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.Product">
            <summary>
            The product for which a price was calculated. Not necessarily the input product,
            can also be a child of a grouped product, if the lowest price should be calculated.
            In that case this property refers to the lowest price child product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.FinalPrice">
            <summary>
            The final unit price of the input <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.Product"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.RegularPrice">
            <summary>
            The regular unit price of the input <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.Product"/> in the target currency, 
            usually <see cref="P:Smartstore.Core.Catalog.Products.Product.Price"/>, <see cref="P:Smartstore.Core.Catalog.Products.Product.ComparePrice"/> or <see cref="P:Smartstore.Core.Catalog.Products.Product.SpecialPrice"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.RegularPriceLabel">
            <summary>
            The regular price label.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.RetailPrice">
            <summary>
            The retail unit price (MSRP) of the input <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.Product"/>.
            A retail price is given if <see cref="P:Smartstore.Core.Catalog.Products.Product.ComparePrice"/> is not 0
            and <see cref="P:Smartstore.Core.Catalog.Products.Product.ComparePriceLabelId"/> referes to an MSRP label.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.RetailPriceLabel">
            <summary>
            The retail price label if the <see cref="P:Smartstore.Core.Catalog.Products.Product.ComparePrice"/> is not 0
            and <see cref="P:Smartstore.Core.Catalog.Products.Product.ComparePriceLabelId"/> referes to an MSRP label.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.HasPriceRange">
            <summary>
            A value indicating whether the price has a range, which is mostly the case if the lowest price
            was determined or any tier price was applied.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.OfferPrice">
            <summary>
            The special offer price, if any (see <see cref="P:Smartstore.Core.Catalog.Products.Product.SpecialPrice"/>).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.ValidUntilUtc">
            <summary>
            The date until <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.FinalPrice"/> is valid.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.PreselectedPrice">
            <summary>
            The price that is initially displayed on the product detail page, if any.
            Includes price adjustments of preselected attributes and prices of attribute combinations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.LowestPrice">
            <summary>
            The lowest possible price of a product, if any.
            Includes prices of attribute combinations and tier prices. Ignores price adjustments of attributes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.AppliedDiscounts">
            <summary>
            List of discount entities that have been applied during calculation.
            </summary>
            <remarks>
            May contain multiple discounts if both the product and a tier price have been discounted.
            Without a tier price applied, the list will contain no discount or exactly one discount (detected via <see cref="M:Smartstore.Core.Catalog.Discounts.DiscountExtensions.GetPreferredDiscount(System.Collections.Generic.ICollection{Smartstore.Core.Catalog.Discounts.Discount},System.Decimal)"/>).
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.DiscountAmount">
            <summary>
            The discount amount applied to <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.FinalPrice"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.AttributePriceAdjustments">
            <summary>
            Gets a list of calculated attribute price adjustments, usually <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.PriceAdjustment"/>.
            Only filled if <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.DeterminePriceAdjustments"/> is activated.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.Tax">
            <summary>
            Tax for <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.FinalPrice"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.Saving">
            <summary>
            Gets or sets a price saving in relation to <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.FinalPrice"/>.
            The saving results from the applied discounts, if any, otherwise from the difference to the <see cref="P:Smartstore.Core.Catalog.Products.Product.ComparePrice"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.CalculatedPrice.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.CalculatedPrice.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.CalculatedPriceAdjustment">
            <summary>
            Represents a calculated product attribute price adjustment, usually <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.PriceAdjustment"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPriceAdjustment.RawPriceAdjustment">
            <summary>
            The raw calculated price adjustment in primary currency without tax.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPriceAdjustment.Price">
            <summary>
            Gets or sets the calculated attribute price converted to <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.TargetCurrency"/> and included tax.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPriceAdjustment.AttributeValue">
            <summary>
            Gets the product attribute value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPriceAdjustment.ProductId">
            <summary>
            Gets the identifier of the related product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatedPriceAdjustment.BundleItemId">
            <summary>
            Gets the bundle item identifier if the related product is a bundle item.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.CalculatorContext">
            <summary>
            Contains data that <see cref="T:Smartstore.Core.Catalog.Pricing.IPriceCalculator"/> instances require access to.
            All monetary amounts are in the primary store currency, without any tax calculation applied.
            The calculated price is always the unit price of the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.AppliedDiscounts">
            <summary>
            List of discount entities that have been applied during calculation.
            Add an entity to this collection if your calculator applied a discount to the final price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.CalculatedDiscounts">
            <summary>
            List of discount amounts to be applied later during price calculation,
            e.g. the discount amount applied to a tier price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.AppliedAttributeCombination">
            <summary>
            Attribute combination whose price was applied during calculation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.AppliedTierPrice">
            <summary>
            The tier price applied during calculation of the final price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.FinalPrice">
            <summary>
            The final price of the product. A calculator should set this property if any adjustment has been made to the price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.RegularPrice">
            <summary>
            Pipeline emitted candidate for the regular price (unit price).
            The actual regular price is determined later in <see cref="M:Smartstore.Core.Catalog.Pricing.PriceCalculationService.GetRegularPrice(Smartstore.Core.Catalog.Pricing.CalculatorContext)"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.HasPriceRange">
            <summary>
            A value indicating whether the price has a range, which is mostly the case if the lowest price
            was determined or any tier price was applied.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.OfferPrice">
            <summary>
            The special offer price, if any (see <see cref="P:Smartstore.Core.Catalog.Products.Product.SpecialPrice"/>).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.OfferEndDateUtc">
            <summary>
            The end date of the special offer price, if any (see <see cref="P:Smartstore.Core.Catalog.Products.Product.SpecialPrice"/>).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.PreselectedPrice">
            <summary>
            The price that is initially displayed on the product detail page, if any.
            Includes price adjustments of preselected attributes and prices of attribute combinations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.LowestPrice">
            <summary>
            The lowest possible price of a product, if any.
            Includes prices of attribute combinations and tier prices. Ignores price adjustments of attributes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.MinTierPrice">
            <summary>
            Gets or sets the miniumum tier price determined during calculation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.AdditionalCharge">
            <summary>
            The additional charges applied to the <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.FinalPrice"/> during calculation, such as price adjustments of product attributes.
            </summary>
            <remarks>
            A calculator should add any additional charge included in <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.FinalPrice"/> to this property.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.DiscountAmount">
            <summary>
            The discount amount resulting from applying discounts and tier prices.
            </summary>
            <remarks>
            A calculator should add any discount amount included in <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.FinalPrice"/> to this property.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorContext.AttributePriceAdjustments">
            <summary>
            Gets or sets a list of calculated product attribute price adjustments, usually <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.PriceAdjustment"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.CalculatorContext.CopyTo(Smartstore.Core.Catalog.Pricing.CalculatorContext)">
            <summary>
            Copies all data from current context to given <paramref name="target"/> context.
            Mostly called in nested calculation pipelines to merge child with root data.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.CalculatorOrdering">
            <summary>
            Some predefined defaults for the numerical ordering of price calculators.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.CalculatorOrdering.First">
            <summary>
            Not used by Smartstore.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.CalculatorOrdering.Early">
            <summary>
            Used by calculators that should run early in the pipeline.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.CalculatorOrdering.Default">
            <summary>
            Default ordering of stock calculators.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.CalculatorOrdering.Late">
            <summary>
            Used by calculators that should run late in the pipeline (e.g. used by <see cref="T:Smartstore.Core.Catalog.Pricing.Calculators.DiscountPriceCalculator"/>.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.CalculatorOrdering.Last">
            <summary>
            Not used by Smartstore.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.PriceCalculationAttributes">
            <summary>
            Represents product attributes to be taken into account when calculating a product price.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculationAttributes.#ctor(Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="selection">The selected product attributes.</param>
            <param name="productId">The identifier of the related product.</param>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationAttributes.Selection">
            <summary>
            Gets the selected product attributes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationAttributes.ProductId">
            <summary>
            Gets the identifier of the related product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationAttributes.BundleItemId">
            <summary>
            Gets the bundle item identifier if the related product is a bundle item.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.PriceCalculationContext">
            <summary>
            Contains input data that price calculation pipelines require access to.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.#ctor(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Pricing.PriceCalculationOptions)">
            <summary>
            Creates a new context instance for given <paramref name="product"/> and <paramref name="options"/>.
            </summary>
            <param name="product">The product to calculate price for.</param>
            <param name="options">The calculation options.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.#ctor(Smartstore.Core.Catalog.Products.Product,System.Int32,Smartstore.Core.Catalog.Pricing.PriceCalculationOptions)">
            <summary>
            Creates a new context instance for given <paramref name="product"/>, <paramref name="quantity"/> and <paramref name="options"/>.
            </summary>
            <param name="product">The product to calculate price for.</param>
            <param name="quantity">The product quantity.</param>
            <param name="options">The calculation options.</param>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.Product">
            <summary>
            The input product to calculate price for.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.CartItem">
            <summary>
            The shopping cart item to calculate price for, if any.
            Use <see cref="M:Smartstore.Core.Catalog.Pricing.IPriceCalculationService.CreateCalculationContextAsync(Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem,Smartstore.Core.Catalog.Pricing.PriceCalculationOptions)"/>
            to include selected product attributes and attribute combination prices in the price calculation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.Calculators">
            <summary>
            An explicit list of calculator instances that define the pipeline. A non-null array
            skips auto-resolution of calculators by <see cref="M:Smartstore.Core.Catalog.Pricing.IPriceCalculatorFactory.GetCalculators(Smartstore.Core.Catalog.Pricing.PriceCalculationContext)"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.Quantity">
            <summary>
            The product quantity. May have impact on final price, e.g. because of tier prices etc.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.Options">
            <summary>
            The calculation options/settings.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.Metadata">
            <summary>
            Custom input metadata that can be evaluated by custom calculators.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.AssociatedProducts">
            <summary>
            Contains all associated child products of a grouped product (<see cref="F:Smartstore.Core.Catalog.Products.ProductType.GroupedProduct"/>).
            If null, associated products will be auto-resolved during pipeline execution (but only if product type is <see cref="F:Smartstore.Core.Catalog.Products.ProductType.GroupedProduct"/>).
            For performance reasons, it is advisable that in batch calculation scenarios ALL associated products of ALL root products are loaded
            in one roundtrip.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.BundleItems">
            <summary>
            Contains all bundle parts of a bundle product (<see cref="F:Smartstore.Core.Catalog.Products.ProductType.BundledProduct"/>).
            If null, bundle parts will be auto-resolved during pipeline execution 
            (but only if product type is <see cref="F:Smartstore.Core.Catalog.Products.ProductType.BundledProduct"/> and <see cref="P:Smartstore.Core.Catalog.Products.Product.BundlePerItemPricing"/> is <c>true</c>).
            For performance reasons, it is advisable that in batch calculation scenarios ALL bundle parts of ALL root products are loaded
            in one roundtrip.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.BundleItem">
            <summary>
            A single bundle part. Used by bundle price calculator in nested calculation pipeline.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.SelectedAttributes">
            <summary>
            Gets or sets the selected product attributes to be included in the price calculation.
            For example required to take into account price adjustments of attributes selected by the customer.
            It is recommended to use the <see cref="T:Smartstore.Core.Catalog.Pricing.PriceCalculationContext"/> extension methods to apply these attributes, 
            e.g. <see cref="M:Smartstore.Core.Catalog.Pricing.PriceCalculationContextExtensions.AddSelectedAttributes(Smartstore.Core.Catalog.Pricing.PriceCalculationContext,Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem)"/>
            to apply selected attributes of all products indcluded in a shopping cart.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.GetTierPricesAsync">
            <summary>
            Gets tier prices for <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.Product"/>. Tier prices with duplicate quantities are removed.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.GetPreselectedAttributeValuesAsync">
            <summary>
            Gets the product attribute values preselected by the merchant.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions">
            <summary>
            Defines options and settings that affect the way how the price calculation pipeline operates.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.#ctor(Smartstore.Core.Catalog.Products.ProductBatchContext,Smartstore.Core.Identity.Customer,Smartstore.Core.Stores.Store,Smartstore.Core.Localization.Language,Smartstore.Core.Common.Currency)">
            <summary>
            Creates a new options instance.
            </summary>
            <param name="batchContext">The product batch context to use. Required.</param>
            <param name="customer">The current customer. Required.</param>
            <param name="store">The current store. Required.</param>
            <param name="language">The working language. Required.</param>
            <param name="targetCurrency">The target currency for money exchange. Required.</param>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.BatchContext">
            <summary>
            Gets or sets the product batch context.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.Customer">
            <summary>
            Gets or sets the current customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.Store">
            <summary>
            Gets or sets the current store.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.Language">
            <summary>
            Gets or sets the working language.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.TargetCurrency">
            <summary>
            Gets or sets the target currency to use for money exchange after a pipeline has been invoked.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.RoundingCurrency">
            <summary>
            Gets or sets the currency used for rounding.
            Generally this is the working currency (default), Order.CustomerCurrencyCode (for existing orders) 
            or DataExporterContext.ContextCurrency (for exports).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.ChildProductsBatchContext">
            <summary>
            Gets or sets product batch context for nested pipelines (grouped or bundled products).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.ApplyPreselectedAttributes">
            <summary>
            Gets or sets a value indicating whether to apply product attributes preselected by merchant in price calculation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.IgnoreOfferPrice">
            <summary>
            Gets or sets a value indicating whether an offer price should be ignored during price calculation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.IgnoreTierPrices">
            <summary>
            Gets or sets a value indicating whether tier prices should be ignored during price calculation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.IgnorePercentageDiscountOnTierPrices">
            <summary>
            Gets or sets a value indicating whether percentage discounts on tier prices should be ignored during price calculation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.IgnorePercentageTierPricesOnAttributePriceAdjustments">
            <summary>
            Gets or sets a value indicating whether to ignore percentage tier prices on attribute price adjustments.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.IgnoreDiscounts">
            <summary>
            Gets or sets a value indicating whether discounts should be ignored during price calculation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.IsGrossPrice">
            <summary>
            Gets or sets a value indicating whether the source price (the one retrieved from database) includes sales tax already.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.TaxInclusive">
            <summary>
            Gets or sets a value indicating whether resulting monetary amounts (after the pipeline has been invoked) should include sales taxes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.TaxFormat">
            <summary>
            Gets or sets the optional tax format string (e.g. "{0} *", "{0} incl. tax")
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.PriceRangeFormat">
            <summary>
            Gets or sets the optional price range format string (e.g. "from {0}", "ab {0}")
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.ApplyPriceRangeFormat">
            <summary>
            Gets or sets a value indicating whether to apply <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.PriceRangeFormat"/>.
            Only applied if the product has child products, tier prices, attribute combination prices or attribute price adjustments.
            May have impact on performance.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.DiscountValidationFlags">
            <summary>
            Gets or sets flags for discount requirements to be validated.
            </summary>
            <remarks>
            Turning this to <see cref="F:Smartstore.Core.Catalog.Discounts.DiscountValidationFlags.All"/> in larger listings can have heavy impact on calculation performance!
            If set to <see cref="F:Smartstore.Core.Catalog.Discounts.DiscountValidationFlags.None"/> then some discount requirements (such as
            usage history limitation or rule fulfilment) are ignored during price calculation.
            Coupon codes and date ranges are always validated.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.DetermineLowestPrice">
            <summary>
            Gets or sets a value indicating whether the lowest possible price should be determined
            (cheapest child product, cheapest attribute combination, or lowest tier price).
            Turn this on to show price ranges in listings. May have impact on performance.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.DeterminePreselectedPrice">
            <summary>
            Gets or sets a value indicating whether to determine the price that is initially displayed on the product detail page.
            (applies the attribute combination price determined by the attributes preselected by the merchant).
            May have impact on performance.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.DeterminePriceAdjustments">
            <summary>
            Gets or sets a value indicating whether to determine price adjustments of product attributes, see <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.PriceAdjustment"/>.
            Price adjustments are returned through <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.AttributePriceAdjustments"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.PriceCalculatorMetadata">
            <summary>
            Metadata for a <see cref="T:Smartstore.Core.Catalog.Pricing.IPriceCalculator"/> implementation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculatorMetadata.CalculatorType">
            <summary>
            The type of the concrete calculator implementation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculatorMetadata.ValidTargets">
            <summary>
            The valid targets for the calculator. The calculator will be excluded from the pipeline
            if the product for which a price is calculated does not match.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceCalculatorMetadata.Order">
            <summary>
            The order of the calculator within the pipeline. See <see cref="T:Smartstore.Core.Catalog.Pricing.CalculatorOrdering"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.PriceLabel">
            <summary>
            Represents a price label
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceLabel.ShortName">
            <summary>
            Gets or sets the short name that is usually displayed in listings, e.g. "MSRP", "Lowest".
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceLabel.Name">
            <summary>
            Gets or sets the optional name that is usually displayed in product detail, e.g. "Retail price", "Lowest recent price".
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceLabel.Description">
            <summary>
            Gets or sets the optional description that is usually displayed in product detail tooltips.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceLabel.IsRetailPrice">
            <summary>
            Gets or sets a value indicating whether this label represents an MSRP price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceLabel.DisplayShortNameInLists">
            <summary>
            Gets or sets a value indicating if the label's short name should be displayed in product listings.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceLabel.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.PriceSaving">
            <summary>
            Represents a price saving in relation to the calculated final price of a product.
            The saving results from the applied discounts, if any, otherwise from the difference to the <see cref="P:Smartstore.Core.Catalog.Products.Product.ComparePrice"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSaving.HasSaving">
            <summary>
            A value indicating whether there is a price saving on the calculated final price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSaving.SavingPrice">
            <summary>
            The price that represents the saving. Often displayed as a crossed-out price.
            Always greater than the final price if <see cref="P:Smartstore.Core.Catalog.Pricing.PriceSaving.HasSaving"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSaving.SavingPercent">
            <summary>
            The saving, in percent, compared to the final price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.PriceSaving.SavingAmount">
            <summary>
            The saving, as money amount, compared to the final price.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.PricingType.Calculated">
            <summary>
            Price calculated by price calculation.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.PricingType.CallForPrice">
            <summary>
            Customer has to call for price.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.PricingType.CustomerEnteredPrice">
            <summary>
            Customer enters the price.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.PricingTarget">
            <summary>
            Represents pricing targets.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.PricingTarget.Product">
            <summary>
            Pricing target is a product
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.PricingTarget.ShippingCharge">
            <summary>
            Pricing target is a shipping method charge
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.PricingTarget.PaymentFee">
            <summary>
            Pricing target is a payment method fee.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.PriceDisplayType">
            <summary>
            Represents types of product prices to display.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.PriceDisplayType.LowestPrice">
            <summary>
            The lowest possible price of a product (default)
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.PriceDisplayType.PreSelectedPrice">
            <summary>
            The product price initially displayed on the product detail page
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.PriceDisplayType.PriceWithoutDiscountsAndAttributes">
            <summary>
            The product price without associated data like discounts, tier prices, attributes or attribute combinations
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.PriceDisplayType.Hide">
            <summary>
            Do not display a product price
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.TierPriceCalculationMethod">
            <summary>
            Represents the tier price calculation method.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.TierPriceCalculationMethod.Fixed">
            <summary>
            Fixed tier price.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.TierPriceCalculationMethod.Percental">
            <summary>
            Percental tier price.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.TierPriceCalculationMethod.Adjustment">
            <summary>
            Adjusted tier price.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.TierPrice">
            <summary>
            Represents a tier price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.TierPrice.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.TierPrice.Product">
            <summary>
            Gets or sets the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.TierPrice.StoreId">
            <summary>
            Gets or sets the store identifier. 0 means all stores.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.TierPrice.Quantity">
            <summary>
            Gets or sets the quantity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.TierPrice.Price">
            <summary>
            Gets or sets the tier price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.TierPrice.CalculationMethod">
            <summary>
            Gets or sets the tier price calculation method.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.TierPrice.CustomerRoleId">
            <summary>
            Gets or sets the customer role identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.TierPrice.CustomerRole">
            <summary>
            Gets or sets the customer role.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceCalculationServiceExtensions.CalculateAttributePriceAdjustmentsAsync(Smartstore.Core.Catalog.Pricing.IPriceCalculationService,Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,System.Int32,Smartstore.Core.Catalog.Pricing.PriceCalculationOptions)">
            <summary>
            Calculates the price adjustments of product attributes, usually <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.PriceAdjustment"/>.
            Typically used to display price adjustments of selected attributes on the cart page.
            The calculated adjustment is always a unit price.
            </summary>
            <param name="priceCalculationService">Price calculation service.</param>
            <param name="product">The product.</param>
            <param name="selection">Attribute selection. If <c>null</c> then the price adjustments of all attributes of <paramref name="product"/> are determined.</param>
            <param name="quantity">
            The product quantity. May have impact on the price, e.g. if tier prices are applied to price adjustments.
            Note that the calculated price is always the unit price.
            </param>
            <param name="options">Price calculation options. The default options are used if <c>null</c>.</param>
            <returns>Price adjustments of selected attributes. Key: <see cref="P:Smartstore.Domain.BaseEntity.Id"/>, value: attribute price adjustment.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceCalculationServiceExtensions.GetBasePriceInfoAsync(Smartstore.Core.Catalog.Pricing.IPriceCalculationService,Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Pricing.PriceCalculationOptions)">
            <summary>
            Gets the base price info for a product.
            </summary>
            <param name="priceCalculationService">Price calculation service.</param>
            <param name="product">The product to get the base price info for.</param>
            <param name="options">Price calculation options. The default options are used if <c>null</c>.</param>
            <returns>Base price info.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculationContextExtensions.AddSelectedAttributes(Smartstore.Core.Catalog.Pricing.PriceCalculationContext,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Adds selected product attributes to be taken into account in the price calculation.
            For example required for price adjustments of attributes selected by the customer.
            </summary>
            <param name="context">The target product calculation context.</param>
            <param name="selection">The selected product attributes.</param>
            <param name="productId">Product identifier.</param>
            <param name="bundleItemId">Bundle item identifier if the related product is a bundle item.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculationContextExtensions.AddSelectedAttributes(Smartstore.Core.Catalog.Pricing.PriceCalculationContext,Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem)">
            <summary>
            Adds selected product attributes of a shopping cart item to be taken into account in the price calculation.
            For example required for price adjustments of attributes selected by the customer.
            Also adds selected attributes of bundle items if <see cref="P:Smartstore.Core.Catalog.Products.Product.BundlePerItemPricing"/> is activated.
            </summary>
            <param name="context">The target product calculation context.</param>
            <param name="cartItem">Shopping cart item.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.TierPriceExtensions.FilterByStore(System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Pricing.TierPrice},System.Int32)">
            <summary>
            Filter tier prices by a store.
            </summary>
            <param name="source">Tier prices.</param>
            <param name="storeId">Store identifier.</param>
            <returns>Filtered tier prices.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.TierPriceExtensions.FilterForCustomer(System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Pricing.TierPrice},Smartstore.Core.Identity.Customer)">
            <summary>
            Filter tier prices by customer.
            </summary>
            <param name="source">Tier prices.</param>
            <param name="customer">Customer entity.</param>
            <returns>Filtered tier prices.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.TierPriceExtensions.RemoveDuplicatedQuantities(System.Collections.Generic.ICollection{Smartstore.Core.Catalog.Pricing.TierPrice})">
            <summary>
            Remove duplicated quantities (leave only a tier price with minimum price).
            </summary>
            <param name="source">Tier prices.</param>
            <returns>Filtered tier prices.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.Calculators.AttributePriceCalculator">
            <summary>
            Calculates the price of product attributes specified by <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.SelectedAttributes"/>.
            These are usually attributes selected on the product detail page, whose price adjustments must be included in the shopping cart.
            Also applies attributes preselected by merchant if <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.ApplyPreselectedAttributes"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.Calculators.BundlePriceCalculator">
            <summary>
            Calculates the price of a bundled product. If <see cref="P:Smartstore.Core.Catalog.Products.Product.BundlePerItemPricing"/> is activated, 
            then the price for each bundle item is calculated and multiplied by <see cref="P:Smartstore.Core.Catalog.Products.ProductBundleItem.Quantity"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.Calculators.DiscountPriceCalculator">
            <summary>
            Calculates and applies the discount amount.
            Takes into account discounts of products, categories, manufacturers and of bundle items (if per-item pricing is activated).
            Also applies the discount amount on the minimum tier price if <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.IgnorePercentageDiscountOnTierPrices"/> is activated.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.Calculators.GroupedProductPriceCalculator">
            <summary>
            Calculates the price of the first child product associated with a grouped product, or if the lowest price is requested, 
            the lowest price of all associated products.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.Calculators.LowestPriceCalculator">
            <summary>
            Calculates the lowest possible price a product can achieve. 
            The lowest tier price, the lowest attribute combination price and discounts are taken into account during calculation.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.Calculators.OfferPriceCalculator">
            <summary>
            Calculates the offer price (aka special price), if any specified for the product.
            The offer price of bundle items is also taken into account if per-item pricing is activated for the bundle.
            We do not restrict and apply the offer price even if it is greater than the regular price,
            although this scenario is likely to be unusual in real life.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.Calculators.PreselectedPriceCalculator">
            <summary>
            Calculates the price that is initially displayed on the product detail page.
            Actually, it does not calculate anything, but applies the attribute combination price determined by the attributes preselected by the merchant.
            That's why this calculator must run very early.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.Calculators.TierPriceCalculator">
            <summary>
            Calculates the minimum tier price and applies it if it is lower than the FinalPrice.
            Tier prices of bundle items are ignored if per-item pricing is activated for the bundle.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.CalculatorTargets">
            <summary>
            Specifies product types that a price calculator can handle.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.CalculatorTargets.Product">
            <summary>
            A calculator can handle simple products.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.CalculatorTargets.GroupedProduct">
            <summary>
            A calculator can handle grouped products.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.CalculatorTargets.Bundle">
            <summary>
            A calculator can handle bundle products.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Pricing.CalculatorTargets.All">
            <summary>
            A calculator can handle any product type.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.CalculatorUsageAttribute">
            <summary>
            Specifies the usage of a price calculator. Only classes that implement
            <see cref="T:Smartstore.Core.Catalog.Pricing.IPriceCalculator"/> can be annoated with this attribue.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorUsageAttribute.ValidTargets">
            <summary>
            The valid targets for the annotated calculator. The calculator will be excluded from the pipeline
            if the product for which a price is calculated does not match.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Pricing.CalculatorUsageAttribute.Order">
            <summary>
            The order of the calculator within the pipeline. See <see cref="T:Smartstore.Core.Catalog.Pricing.CalculatorOrdering"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.IPriceCalculationService">
            <summary>
            Price calculation service.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceCalculationService.CreateDefaultOptions(System.Boolean,Smartstore.Core.Identity.Customer,Smartstore.Core.Common.Currency,Smartstore.Core.Catalog.Products.ProductBatchContext)">
            <summary>
            Creates a new <see cref="T:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions"/> instance with predefined options. 
            The returned object is ready to be passed to <see cref="T:Smartstore.Core.Catalog.Pricing.PriceCalculationContext"/> constructors.
            This method builds options with context defaults from <see cref="T:Smartstore.Core.IWorkContext"/>, <see cref="T:Smartstore.Core.Catalog.CatalogSettings"/> etc.
            </summary>
            <param name="forListing">
            If <c>false</c>, <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.DetermineLowestPrice" /> and <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.DeterminePreselectedPrice"/>
            will also be <c>false</c>.
            </param>
            <param name="customer">The customer. Obtained from <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/> if <c>null</c>.</param>
            <param name="targetCurrency">The target currency to use for money conversion. Obtained from <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/> if <c>null</c>.</param>
            <param name="batchContext">The product batch context to use during calculation. Will be created internally if <c>null</c>.</param>
            <returns>A new <see cref="T:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions"/> instance.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceCalculationService.CreateCalculationContextAsync(Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem,Smartstore.Core.Catalog.Pricing.PriceCalculationOptions)">
            <summary>
            Creates and prepares a calculation context for calculating a price of a shopping cart item.
            Includes selected product attributes and prices of product attribute combinations.
            </summary>
            <param name="cartItem">Shopping cart item.</param>
            <param name="options">Price calculation options.</param>
            <returns>Price calculation context.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceCalculationService.CalculatePriceAsync(Smartstore.Core.Catalog.Pricing.PriceCalculationContext)">
            <summary>
            Calculates the unit price for a given product. Prices are returned in the currency specified by <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.TargetCurrency"/>.
            </summary>
            <param name="context">The context that contains the input product, the calculation options and some cargo data.</param>
            <returns>A new <see cref="T:Smartstore.Core.Catalog.Pricing.CalculatedPrice"/> instance.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceCalculationService.CalculateSubtotalAsync(Smartstore.Core.Catalog.Pricing.PriceCalculationContext)">
            <summary>
            Calculates both the unit price and the subtotal for a given product.
            The subtotal is calculated by multiplying the unit price (rounded if enabled for <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationOptions.RoundingCurrency"/>)
            by <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.Quantity"/>.
            </summary>
            <param name="context">The context that contains the input product, the calculation options and some cargo data.</param>
            <returns>The unit price and the subtotal.</returns>
            <remarks>
            The subtotal is calculated for <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.FinalPrice"/>, <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.DiscountAmount"/> and <see cref="P:Smartstore.Core.Catalog.Pricing.CalculatedPrice.Tax"/>.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceCalculationService.CalculateProductCostAsync(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection)">
            <summary>
            Calculates the product cost as specified by <see cref="P:Smartstore.Core.Catalog.Products.Product.ProductCost"/> in the primary currency.
            The product cost is the cost of all the different components which make up the product. This may either be the purchase price if the components are bought from outside suppliers, 
            or the combined cost of materials and manufacturing processes if the component is made in-house.
            </summary>
            <param name="product">Product.</param>
            <param name="selection">Selected attributes, if any. Used to include the costs of products linked by attributes (see <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue.LinkedProductId"/>).</param>
            <returns>Product costs in the primary currency.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceCalculationService.GetBasePriceInfo(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Common.Money,Smartstore.Core.Common.Currency,Smartstore.Core.Localization.Language,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Gets the base price info for a product.
            </summary>
            <param name="product">Product entity.</param>
            <param name="price">The calculated product price.</param>
            <param name="targetCurrency">The currency to be used for the formatting. Obtained from <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/> if <c>null</c>.</param>
            <param name="language">The language to be used for the formatting. Obtained from <see cref="P:Smartstore.Core.IWorkContext.WorkingLanguage"/> if <c>null</c>.</param>
            <param name="includePackageContentPerUnit">
            A value indicating whether to include the package content per unit information in the base price info.
            <c>false</c> provides a simple, language-neutral base price information, e.g. "24,90 € / 100 g".
            </param>
            <param name="displayTaxSuffix">
            A value indicating whether to display the tax suffix.
            If <c>null</c>, current setting will be obtained from <see cref="T:Smartstore.Core.Checkout.Tax.TaxSettings"/>.
            </param>
            <returns>The base price info.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Pricing.IPriceCalculatorFactory">
            <summary>
            Responsible for resolving price calculators for a given context,
            and for running them.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceCalculatorFactory.GetCalculators(Smartstore.Core.Catalog.Pricing.PriceCalculationContext)">
            <summary>
            Resolves all calculators for the given <paramref name="context"/>.
            </summary>
            <param name="context">The context to resolve calculators for</param>
            <returns>An array of calculators which represent the calculation pipeline.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceCalculatorFactory.RunCalculators(Smartstore.Core.Catalog.Pricing.IPriceCalculator[],Smartstore.Core.Catalog.Pricing.CalculatorContext)">
            <summary>
            Runs a calculation pipeline by invoking passed <paramref name="calculators"/>.
            </summary>
            <param name="calculators">The calculators to invoke.</param>
            <param name="context">The calculator context that is passed through the pipeline.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceLabelService.GetDefaultComparePriceLabel">
            <summary>
            Gets the system default compare price label as defined by <see cref="P:Smartstore.Core.Catalog.Pricing.PriceSettings.DefaultComparePriceLabelId"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceLabelService.GetDefaultRegularPriceLabel">
            <summary>
            Gets the system default regular price label as defined by <see cref="P:Smartstore.Core.Catalog.Pricing.PriceSettings.DefaultRegularPriceLabelId"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceLabelService.GetComparePriceLabel(Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Gets the compare price label for a given product. Falls back to
            system default compare label if product has no label.
            </summary>
            <param name="product">The product to get label for.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceLabelService.GetRegularPriceLabel(Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Gets the regular price label for a given product. Falls back to
            system default price label if product has no label.
            </summary>
            <param name="product">The product to get label for.</param>
            <remarks>
            Currently this method just returns the default label by calling <see cref="M:Smartstore.Core.Catalog.Pricing.IPriceLabelService.GetDefaultRegularPriceLabel"/>.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceLabelService.GetPricePromoBadge(Smartstore.Core.Catalog.Pricing.CalculatedPrice)">
            <summary>
            Gets a promotion badge for the given calculated price as defined by the badge configuration.
            </summary>
            <param name="price">The calculated price to get a badge for.</param>
            <returns>A value tuple: (localized badge label, badge variant).</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.IPriceLabelService.GetPromoCountdownText(Smartstore.Core.Catalog.Pricing.CalculatedPrice)">
            <summary>
            Gets a promotion countdown text for the given calculated price as defined by countdown configuration.
            </summary>
            <param name="price">The calculated price to get a countdown text for.</param>
            <returns>
            The localized and humanized countdown text, e.g.: "Ends in 3 h, 12 min.".
            Returns <c>null</c> if offer is not limited or remaining time is larger than threshold.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Pricing.PriceCalculator.CalculateChildPriceAsync(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Pricing.CalculatorContext,System.Action{Smartstore.Core.Catalog.Pricing.CalculatorContext})">
            <summary>
            Gets the final price for a child product by running a nested calculation pipeline.
            </summary>
            <param name="childProduct">
            The child product (e.g. associated product of a grouped product or a bundle item part) to calculate price for.
            Must not be the same product as <see cref="P:Smartstore.Core.Catalog.Pricing.PriceCalculationContext.Product"/>.
            </param>
            <param name="context">The calculator context of the root pipeline.</param>
            <param name="childContextConfigurer">An optional configurer action for the child context.</param>
            <returns>The nested calculator context.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.BackInStockSubscription">
            <summary>
            Represents a back in stock subscription.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.BackInStockSubscription.StoreId">
            <summary>
            Gets or sets the store identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.BackInStockSubscription.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.BackInStockSubscription.Product">
            <summary>
            Gets or sets the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.BackInStockSubscription.CustomerId">
            <summary>
            Gets or sets the customer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.BackInStockSubscription.Customer">
            <summary>
            Gets or sets the customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.BackInStockSubscription.CreatedOnUtc">
            <summary>
            Gets or sets the date of instance creation.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.CrossSellProduct">
            <summary>
            Represents a cross-sell product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.CrossSellProduct.ProductId1">
            <summary>
            Gets or sets the first product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.CrossSellProduct.ProductId2">
            <summary>
            Gets or sets the second product identifier.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.GroupedProductConfiguration">
            <summary>
            Represents the configuration of a grouped product and its associated products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.GroupedProductConfiguration.Titles">
            <summary>
            The localized title for the associated products list.
            The key is the language culture and the value is the localized title.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.GroupedProductConfiguration.PageSize">
            <summary>
            The number of associated products per page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.GroupedProductConfiguration.SearchMinAssociatedCount">
            <summary>
            Minimum number of associated products from which the search box is displayed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.GroupedProductConfiguration.Collapsible">
            <summary>
            A value indicating whether the associated products are collapsible.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.GroupedProductConfiguration.HeaderFields">
            <summary>
            Gets or sets name of fields to display in the collapse header.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.Product">
            <summary>
            Represents a product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductTypeId">
            <summary>
            Gets or sets the product type identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductType">
            <summary>
            Gets or sets the product type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductTypeLabelHint">
            <summary>
            Gets the label hint for the product type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ParentGroupedProductId">
            <summary>
            Gets or sets the parent product identifier. It is used if this product is associated with a grouped product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.GroupedProductConfiguration">
            <summary>
            Gets or sets the configuration for a grouped product (optional).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Visibility">
            <summary>
            Gets or sets the visibility level of the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Condition">
            <summary>
            Gets or sets the condition of the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Name">
            <summary>
            Gets or sets the product name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ShortDescription">
            <summary>
            Gets or sets the short description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.FullDescription">
            <summary>
            Gets or sets the full description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AdminComment">
            <summary>
            Gets or sets the admin comment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductTemplateId">
            <summary>
            Gets or sets the product template identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ShowOnHomePage">
            <summary>
            Gets or sets a value indicating whether to show the product on homepage.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.HomePageDisplayOrder">
            <summary>
            Gets or sets the display order for homepage products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.MetaKeywords">
            <summary>
            Gets or sets the meta keywords.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.MetaDescription">
            <summary>
            Gets or sets the meta description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.MetaTitle">
            <summary>
            Gets or sets the meta title.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AllowCustomerReviews">
            <summary>
            Gets or sets a value indicating whether customer reviews are allowed for this product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ApprovedRatingSum">
            <summary>
            Gets or sets the rating sum (approved reviews).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.NotApprovedRatingSum">
            <summary>
            Gets or sets the rating sum (not approved reviews).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ApprovedTotalReviews">
            <summary>
            Gets or sets the total rating votes (approved reviews).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.NotApprovedTotalReviews">
            <summary>
            Gets or sets the total rating votes (not approved reviews).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.SubjectToAcl">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.LimitedToStores">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Sku">
            <summary>
            Gets or sets the stock keeping unit (SKU).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ManufacturerPartNumber">
            <summary>
            Gets or sets the manufacturer part number (MPN).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Gtin">
            <summary>
            Gets or sets the global trade item number (GTIN).
            These identifiers include UPC (in North America), EAN (in Europe), JAN (in Japan) and ISBN (for books).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.IsGiftCard">
            <summary>
            Gets or sets a value indicating whether the product is a gift card.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.GiftCardTypeId">
            <summary>
            Gets or sets the gift card type identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.GiftCardType">
            <summary>
            Gets or sets the gift card type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.RequireOtherProducts">
            <summary>
            Gets or sets a value indicating whether the product requires other products to be added to the cart (product X requires product Y).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.RequiredProductIds">
            <summary>
            Gets or sets the required product identifiers (comma separated).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AutomaticallyAddRequiredProducts">
            <summary>
            Gets or sets a value indicating whether required products are automatically added to the cart.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.IsDownload">
            <summary>
            Gets or sets a value indicating whether the product is a download.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DownloadId">
            <summary>
            Gets or sets the download identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.UnlimitedDownloads">
            <summary>
            Gets or sets a value indicating whether this product can be downloaded unlimited number of times.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.MaxNumberOfDownloads">
            <summary>
            Gets or sets the maximum number of downloads.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DownloadExpirationDays">
            <summary>
            Gets or sets the number of days during customers has access to the downloadable file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DownloadActivationTypeId">
            <summary>
            Gets or sets the download activation type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DownloadActivationType">
            <summary>
            Gets or sets the download activation type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.HasSampleDownload">
            <summary>
            Gets or sets a value indicating whether the product has a sample download file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.SampleDownloadId">
            <summary>
            Gets or sets the sample download identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.SampleDownload">
            <summary>
            Gets or sets the sample download.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.HasUserAgreement">
            <summary>
            Gets or sets a value indicating whether the product has a user agreement.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.UserAgreementText">
            <summary>
            Gets or sets the license agreement text.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.IsRecurring">
            <summary>
            Gets or sets a value indicating whether this is a recurring product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.RecurringCycleLength">
            <summary>
            Gets or sets the recurring cycle length.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.RecurringCyclePeriodId">
            <summary>
            Gets or sets the recurring cycle period.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.RecurringCyclePeriod">
            <summary>
            Gets or sets the cycle period for recurring products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.RecurringTotalCycles">
            <summary>
            Gets or sets the recurring total cycles.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.IsShippingEnabled">
            <summary>
            Gets or sets a value indicating whether the product is ship enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.IsFreeShipping">
            <summary>
            Gets or sets a value indicating whether the product has free shipping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AdditionalShippingCharge">
            <summary>
            Gets or sets the additional shipping charge.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.IsTaxExempt">
            <summary>
            Gets or sets a value indicating whether the product is marked as tax exempt.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.IsEsd">
            <summary>
            Gets or sets a value indicating whether the product is an electronic service
            bound to EU VAT regulations for digital goods.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.TaxCategoryId">
            <summary>
            Gets or sets the tax category identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ManageInventoryMethodId">
            <summary>
            Gets or sets a value indicating how to manage the inventory.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ManageInventoryMethod">
            <summary>
            Gets or sets a value indicating how to manage the inventory.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.StockQuantity">
            <summary>
            Gets or sets the stock quantity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DisplayStockAvailability">
            <summary>
            Gets or sets a value indicating whether to display the stock availability.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DisplayStockQuantity">
            <summary>
            Gets or sets a value indicating whether to display the stock quantity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.MinStockQuantity">
            <summary>
            Gets or sets the minimum stock quantity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.LowStockActivityId">
            <summary>
            Gets or sets the low stock activity identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.LowStockActivity">
            <summary>
            Gets or sets the low stock activity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.NotifyAdminForQuantityBelow">
            <summary>
            Gets or sets the stock quantity when to notify the admin.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BackorderModeId">
            <summary>
            Gets or sets the backorder mode identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BackorderMode">
            <summary>
            Gets or sets the backorder mode.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AllowBackInStockSubscriptions">
            <summary>
            Gets or sets a value indicating whether to allow back in stock subscriptions.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.OrderMinimumQuantity">
            <summary>
            Gets or sets the minimum order quantity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.OrderMaximumQuantity">
            <summary>
            Gets or sets the maximum order quantity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.QuantityStep">
            <summary>
            Gets or sets a value by which the product quantity can be changed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.QuantityControlType">
            <summary>
            Gets or sets the quantity control type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.HideQuantityControl">
            <summary>
            Gets or sets a value indicating whether to hide the quantity input control.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AllowedQuantities">
            <summary>
            Gets or sets the comma seperated list of allowed quantities. If <c>null</c> or empty then any quantity is allowed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DisableBuyButton">
            <summary>
            Gets or sets a value indicating whether to disable the "Add to cart" button.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DisableWishlistButton">
            <summary>
            Gets or sets a value indicating whether to disable "Add to wishlist" button.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AvailableForPreOrder">
            <summary>
            Gets or sets a value indicating whether the product is available for pre-ordering.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.CallForPrice">
            <summary>
            Gets or sets a value indicating whether to show "Call for price" label instead of the product price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Price">
            <summary>
            Gets or sets the product regular price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ComparePrice">
            <summary>
            Gets or sets the compare price, e.g. the retail price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ComparePriceLabelId">
            <summary>
            Gets or sets the label id for <see cref="P:Smartstore.Core.Catalog.Products.Product.ComparePrice"/>. 
            A value set here overwrites the system default <see cref="P:Smartstore.Core.Catalog.Pricing.PriceSettings.DefaultComparePriceLabelId"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ComparePriceLabel">
            <summary>
            Gets or sets the compare price label.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductCost">
            <summary>
            Gets or sets the product cost.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.SpecialPrice">
            <summary>
            Gets or sets a special price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.SpecialPriceStartDateTimeUtc">
            <summary>
            Gets or sets the start date of the special price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.SpecialPriceEndDateTimeUtc">
            <summary>
            Gets or sets the end date of the special price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.CustomerEntersPrice">
            <summary>
            Gets or sets a value indicating whether the customer can enter a price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.MinimumCustomerEnteredPrice">
            <summary>
            Gets or sets the minimum price entered by a customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.MaximumCustomerEnteredPrice">
            <summary>
            Gets or sets the maximum price entered by a customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.HasTierPrices">
            <summary>
            Gets or sets a value indicating whether this product has tier prices configured.
            </summary>
            <remarks>
            We use this property for performance optimization:
            if this property is set to false, then we do not need to load TierPrices navigation property.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.LowestAttributeCombinationPrice">
            <summary>
            Gets or sets a value for the lowest attribute combination price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AttributeCombinationRequired">
            <summary>
            Gets or sets a value indicating whether an attribute combination is required for the product to be ordered.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AttributeChoiceBehaviour">
            <summary>
            Gets or sets the behaviour when selecting product attributes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Weight">
            <summary>
            Gets or sets the weight.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AvailableStartDateTimeUtc">
            <summary>
            Gets or sets the start date from which the product is available.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.AvailableEndDateTimeUtc">
            <summary>
            Gets or sets the end date up to which the item is available.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DisplayOrder">
            <summary>
            Gets or sets a display order. This value is only applied to grouped products when ordering associated products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Published">
            <summary>
            Gets or sets a value indicating whether the product is published.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.Deleted">
            <summary>
            Gets or sets a value indicating whether the product has been deleted.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.IsSystemProduct">
            <summary>
            Gets or sets a value indicating whether the entity is a system product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.SystemName">
            <summary>
            Gets or sets the product system name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.CreatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.UpdatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DeliveryTimeId">
            <summary>
            Gets or sets the delivery time identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.QuantityUnitId">
            <summary>
            Gets or sets the quantity unit identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.DeliveryTime">
            <summary>
            Gets or sets the delivery time.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.QuantityUnit">
            <summary>
            Gets or sets the quantity unit.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.CustomsTariffNumber">
            <summary>
            Gets or sets the customs tariff number.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.CountryOfOriginId">
            <summary>
            Gets or sets the country of origin identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.CountryOfOrigin">
            <summary>
            Gets or sets the country of origin.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BasePriceEnabled">
            <summary>
            Gets or sets a value indicating whether base price quotation (PAnGV) is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BasePriceMeasureUnit">
            <summary>
            Gets or sets the measure unit for the base price (e.g. "kg", "g", "qm²" etc.).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BasePriceAmount">
            <summary>
            Gets or sets the amount of product per packing unit in the given measure unit 
            (e.g. 250 ml shower gel: "0.25" if MeasureUnit = "liter" and BaseAmount = 1).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BasePriceBaseAmount">
            <summary>
            Gets or sets the reference value for the given measure unit 
            (e.g. "1" liter. Formula: [BaseAmount] [MeasureUnit] = [SellingPrice] / [Amount]).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BasePriceHasValue">
            <summary>
            Gets or sets a value indicating whether the product has a base price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BundleTitleText">
            <summary>
            Gets or sets an optional title text of a product bundle.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BundlePerItemShipping">
            <summary>
            Gets or sets a value indicating whether per item shipping of bundle items is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BundlePerItemPricing">
            <summary>
            Gets or sets a value indicating whether per item pricing of bundle items is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.BundlePerItemShoppingCart">
            <summary>
            Gets or sets a value indicating whether per item shopping cart handling of bundle items is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.MainPictureId">
            <summary>
            Gets or sets the main picture identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.HasPreviewPicture">
            <summary>
            Gets or sets a value indicating whether the product has a preview picture.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductCategories">
            <summary>
            Gets or sets the product categories.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductManufacturers">
            <summary>
            Gets or sets the product manufacturers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductMediaFiles">
            <summary>
            Gets or sets the product media files.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductReviews">
            <summary>
            Gets or sets the product reviews.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductSpecificationAttributes">
            <summary>
            Gets or sets the product specification attributes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductTags">
            <summary>
            Gets or sets the product tags.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductVariantAttributes">
            <summary>
            Gets or sets the product variant attributes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductVariantAttributeCombinations">
            <summary>
            Gets or sets the product variant attribute combinations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.TierPrices">
            <summary>
            Gets or sets the tier prices.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.Product.ProductBundleItems">
            <summary>
            Gets or sets the product bundle items.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductBundleItem">
            <summary>
            Represents a product bundle item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.Product">
            <summary>
            Gets or sets the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.BundleProductId">
            <summary>
            Gets or sets the product identifier of the bundle product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.BundleProduct">
            <summary>
            Gets or sets the bundle product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.Quantity">
            <summary>
            Gets or sets the quantity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.Discount">
            <summary>
            Gets or sets the discount value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.DiscountPercentage">
            <summary>
            Gets or sets a value indicating whether the discount amount is calculated by percentage.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.ShortDescription">
            <summary>
            Gets or sets the short description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.FilterAttributes">
            <summary>
            Gets or sets a value indicating whether to filter attributes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.HideThumbnail">
            <summary>
            Gets or sets a value indicating whether to hide the thumbnail.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.Visible">
            <summary>
            Gets or sets a value indicating whether the item is visible.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.Published">
            <summary>
            Gets or sets a value indicating whether the entity is published.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.DisplayOrder">
            <summary>
            Gets or sets a display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.CreatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.UpdatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItem.AttributeFilters">
            <summary>
            Gets or sets the attribute filters.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductBundleItem.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductBundleItemAttributeFilter">
            <summary>
            Represents a filter for a product bundle item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItemAttributeFilter.BundleItemId">
            <summary>
            Gets or sets the product bundle item identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItemAttributeFilter.BundleItem">
            <summary>
            Gets or sets the bundle item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItemAttributeFilter.AttributeId">
            <summary>
            Gets or sets the product attribute identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItemAttributeFilter.AttributeValueId">
            <summary>
            Gets or sets the product attribute value identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductBundleItemAttributeFilter.IsPreSelected">
            <summary>
            Gets or sets a value indicating whether the filtered value is pre-selected.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductBundleItemAttributeFilter.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductBundleItemOrderData">
            <summary>
            Contains the deserialised bundle item data of an ordered product.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductType">
            <summary>
            Represents the product type.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductType.SimpleProduct">
            <summary>
            Simple product.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductType.GroupedProduct">
            <summary>
            Grouped product.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductType.BundledProduct">
            <summary>
            Bundled product.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductVisibility">
            <summary>
            Gradually restricts the visibility of products.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductVisibility.Full">
            <summary>
            Product is fully visible.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductVisibility.SearchResults">
            <summary>
            Product is visible in search results.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductVisibility.ProductPage">
            <summary>
            Product is not visible in lists but clickable on product pages.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductVisibility.Hidden">
            <summary>
            Product is not visible but appears on grouped product pages.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductCondition">
            <summary>
            Represents a product condition. <see href="https://schema.org/OfferItemCondition"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.QuantityControlType">
            <summary>
            Represents a quantity control type.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.AttributeChoiceBehaviour">
            <summary>
            Represents the behaviour when selecting product attributes.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.AttributeChoiceBehaviour.GrayOutUnavailable">
            <summary>
            Gray out unavailable attributes.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.AttributeChoiceBehaviour.None">
            <summary>
            No particular behaviour.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.BackorderMode">
            <summary>
            Represents the backorder mode.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.BackorderMode.NoBackorders">
            <summary>
            No backorders.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.BackorderMode.AllowQtyBelow0">
            <summary>
            Allow quantity below 0.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.BackorderMode.AllowQtyBelow0OnBackorder">
            <summary>
            Allow quantity below 0, product is on backorder.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.DownloadActivationType">
            <summary>
            Represents the download activation type.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.DownloadActivationType.WhenOrderIsPaid">
            <summary>
            Activate when order is paid.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.DownloadActivationType.Manually">
            <summary>
            Activate manually.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.LowStockActivity">
            <summary>
            Represents the low stock activity.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.LowStockActivity.Nothing">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.LowStockActivity.DisableBuyButton">
            <summary>
            Disable buy button.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.LowStockActivity.Unpublish">
            <summary>
            Do not publish.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ManageInventoryMethod">
            <summary>
            Represents the method of inventory management.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ManageInventoryMethod.DontManageStock">
            <summary>
            Don't track inventory.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ManageInventoryMethod.ManageStock">
            <summary>
            Track inventory.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ManageInventoryMethod.ManageStockByAttributes">
            <summary>
            Track inventory by product attributes.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.RecurringProductCyclePeriod">
            <summary>
            Represents the recurring product cycle period.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.RecurringProductCyclePeriod.Days">
            <summary>
            Days.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.RecurringProductCyclePeriod.Weeks">
            <summary>
            Weeks.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.RecurringProductCyclePeriod.Months">
            <summary>
            Months.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.RecurringProductCyclePeriod.Years">
            <summary>
            Years.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductSortingEnum">
            <summary>
            Represents the product sorting.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductSortingEnum.Initial">
            <summary>
            Initial state
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductSortingEnum.Relevance">
            <summary>
            Relevance
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductSortingEnum.NameAsc">
            <summary>
            Name: A to Z
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductSortingEnum.NameDesc">
            <summary>
            Name: Z to A
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductSortingEnum.PriceAsc">
            <summary>
            Price: Low to High
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductSortingEnum.PriceDesc">
            <summary>
            Price: High to Low
            </summary>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductSortingEnum.CreatedOn">
            <summary>
            Product creation date.
            </summary>
            <remarks>Actually "CreatedOnDesc" (but due to localization this remains as is).</remarks>
        </member>
        <member name="F:Smartstore.Core.Catalog.Products.ProductSortingEnum.CreatedOnAsc">
            <summary>
            Product creation date
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductMediaFile">
            <summary>
            Represents a product media file mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductMediaFile.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductMediaFile.Product">
            <summary>
            Gets or sets the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductMediaFile.MediaFileId">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductMediaFile.MediaFile">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductMediaFile.DisplayOrder">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductReview">
            <summary>
            Represents a product review.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReview.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReview.Product">
            <summary>
            Gets or sets the product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReview.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReview.ReviewText">
            <summary>
            Gets or sets the review text.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReview.Rating">
            <summary>
            Gets or sets the review rating.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReview.HelpfulYesTotal">
            <summary>
            Gets or sets the review helpful votes total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReview.HelpfulNoTotal">
            <summary>
            Gets or sets the review not helpful votes total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReview.IsVerifiedPurchase">
            <summary>
            Gets or sets a flag that defines whether the reviewed product was purchased by the customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReview.ProductReviewHelpfulnessEntries">
            <summary>
            Gets or sets the entries of product review helpfulness.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductReviewHelpfulness">
            <summary>
            Represents a product review helpfulness.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReviewHelpfulness.ProductReviewId">
            <summary>
            Gets or sets the product review identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReviewHelpfulness.ProductReview">
            <summary>
            Gets or sets the product review.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductReviewHelpfulness.WasHelpful">
            <summary>
            Gets or sets a value indicating whether a review is helpful.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductTag">
            <summary>
            Represents a product tag.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductTag.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductTag.Published">
            <summary>
            Gets or sets a value indicating whether the entity is published.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductTag.Products">
            <summary>
            Gets or sets the products.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductTemplate">
            <summary>
            Represents a product template.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductTemplate.Name">
            <summary>
            Gets or sets the template name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductTemplate.ViewPath">
            <summary>
            Gets or sets the view path.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductTemplate.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.RelatedProduct">
            <summary>
            Represents a related product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.RelatedProduct.ProductId1">
            <summary>
            Gets or sets the first product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.RelatedProduct.ProductId2">
            <summary>
            Gets or sets the second product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.RelatedProduct.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.BackInStockSubscriptionQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.BackInStockSubscription},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Applies a standard filter and sorts by <see cref="P:Smartstore.Core.Catalog.Products.BackInStockSubscription.CreatedOnUtc"/> descending.
            </summary>
            <param name="query">Back in stock subscription query.</param>
            <param name="productId">Product identifier.</param>
            <param name="customerId">Customer identifier.</param>
            <param name="storeId">Store identifier.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.CatalogMessageFactoryExtensions.SendShareProductMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Identity.Customer,Smartstore.Core.Catalog.Products.Product,System.String,System.String,System.String,System.Int32)">
            <summary>
            Sends an "email a friend" message.
            </summary>
            <param name="factory">Message factory.</param>
            <param name="customer">Customer.</param>
            <param name="product">Product.</param>
            <param name="fromEmail">Sender email address.</param>
            <param name="toEmail">Recipient email address.</param>
            <param name="personalMessage">Message text.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Create message result.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.CatalogMessageFactoryExtensions.SendProductQuestionMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Identity.Customer,Smartstore.Core.Catalog.Products.Product,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Sends an ask product question message.
            </summary>
            <param name="factory">Message factory.</param>
            <param name="customer">Customer.</param>
            <param name="product">Product.</param>
            <param name="senderEmail">Sender email address.</param>
            <param name="senderName">Sender name.</param>
            <param name="senderPhone">Sender phone number.</param>
            <param name="question">Question text.</param>
            <param name="attributeInfo">Attribute informations.</param>
            <param name="productUrl">Product URL.</param>
            <param name="isQuoteRequest">A value indicating whether the message is a quote request.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Create message result.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.CatalogMessageFactoryExtensions.SendProductReviewNotificationMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Catalog.Products.ProductReview,System.Int32)">
            <summary>
            Sends a product review notification message to a store owner.
            </summary>
            <param name="factory">Message factory.</param>
            <param name="productReview">Product review</param>
            <param name="languageId">Language identifier.</param>
            <returns>Create message result.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.CatalogMessageFactoryExtensions.SendQuantityBelowStoreOwnerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Catalog.Products.Product,System.Int32)">
            <summary>
            Sends a "quantity below" notification to a store owner.
            </summary>
            <param name="factory">Message factory.</param>
            <param name="product">Product.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Create message result.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.CatalogMessageFactoryExtensions.SendBackInStockNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Catalog.Products.BackInStockSubscription)">
            <summary>
            Sends a 'Back in stock' notification message to a customer.
            </summary>
            <param name="factory">Message factory.</param>
            <param name="subscription">Back in stock subscription.</param>
            <returns>Create message result.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.CrossSellProductQueryExtensions.ApplyProductId1Filter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.CrossSellProduct},System.Int32,System.Boolean)">
            <summary>
            Applies a filter for <see cref="P:Smartstore.Core.Catalog.Products.CrossSellProduct.ProductId1"/>.
            </summary>
            <param name="query">Cross sell product query.</param>
            <param name="productId1">Product identifier.</param>
            <param name="includeHidden">Applies a filter for <see cref="P:Smartstore.Core.Catalog.Products.Product.Published"/>.</param>
            <returns>Cross sell product query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductServiceExtensions.AdjustInventoryAsync(Smartstore.Core.Catalog.Products.IProductService,Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem,System.Boolean)">
            <summary>
            Adjusts product inventory. The caller is responsible for database commit.
            </summary>
            <param name="productService">Product service.</param>
            <param name="item">Shopping cart item.</param>
            <param name="decrease">A value indicating whether to increase or descrease product stock quantity.</param>
            <returns>Adjust inventory result.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductTagServiceExtensions.CountProductsByTagIdAsync(Smartstore.Core.Catalog.Products.IProductTagService,System.Int32,Smartstore.Core.Identity.Customer,System.Int32,System.Boolean)">
            <summary>
            Gets the number of products associated with a product tag.
            </summary>
            <param name="productTagId">Product tag identifier.</param>
            <param name="customer">Customer entity. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="storeId">Store identifier. 0 to ignore store mappings.</param>
            <param name="includeHidden">A value indicating whether to include hidden product tags. Hidden products are always ignored.</param>
            <returns>Number of products.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductBundleItemExtensions.IsFilteredOut(Smartstore.Core.Catalog.Products.ProductBundleItem,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue,Smartstore.Core.Catalog.Products.ProductBundleItemAttributeFilter@)">
            <summary>
            Gets a value indicating whether an attribute value is filtered out.
            </summary>
            <param name="bundleItem">Bundle item.</param>
            <param name="value">Variant attribute value.</param>
            <param name="filter">Matched filter.</param>
            <returns>A value indicating whether an attribute value is filtered out.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductBundleItemExtensions.GetLocalizedName(Smartstore.Core.Catalog.Products.ProductBundleItem)">
            <summary>
            Gets the localized name of a bundle item. Falls back to the localized product name if empty.
            </summary>
            <param name="bundleItem">Bundle item.</param>
            <returns>The localized name of the bundle item.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductBundleItemExtensions.ToOrderData(Smartstore.Core.Catalog.Products.ProductBundleItem,System.Decimal,System.String,System.String)">
            <summary>
            Gets a <see cref="T:Smartstore.Core.Catalog.Products.ProductBundleItemOrderData"/> for a given <see cref="T:Smartstore.Core.Catalog.Products.ProductBundleItem"/>.
            </summary>
            <param name="bundleItem">Bundle item.</param>
            <param name="priceWithDiscount">The price with discount.</param>
            <param name="rawAttributes">The raw attributes string in XML or JSON format.</param>
            <param name="attributesInfo">A localized and formatted description of selected attributes.</param>
            <returns><see cref="T:Smartstore.Core.Catalog.Products.ProductBundleItemOrderData"/>.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductBundleItemQueryExtensions.ApplyBundledProductsFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.ProductBundleItem},System.Int32[],System.Boolean)">
            <summary>
            Applies a filter for bundled products and sorts by <see cref="P:Smartstore.Core.Catalog.Products.ProductBundleItem.DisplayOrder"/>.
            </summary>
            <param name="query">Product bundle item query.</param>
            <param name="bundledProductIds">Identifiers of bundled products to be filtered.</param>
            <param name="includeHidden">A value indicating whether to include hidden products and bundle items.</param>
            <returns>Product bundle item query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductExtensions.MergeWithCombination(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination)">
            <summary>
            Applies data of an attribute combination to the product.
            </summary>
            <param name="product">Target product entity.</param>
            <param name="combination">Source attribute combination.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductExtensions.IsAvailableByStock(Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Gets a value indicating whether the product is available by stock.
            </summary>
            <param name="product">Product entity.</param>
            <returns>A value indicating whether the product is available by stock</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductExtensions.FormatStockMessage(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Localization.ILocalizationService)">
            <summary>
            Formats a message for stock availability.
            </summary>
            <param name="product">Product entity.</param>
            <param name="localizationService">Localization service.</param>
            <returns>Product stock message.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductExtensions.DisplayDeliveryTimeAccordingToStock(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.CatalogSettings,System.Nullable{System.Boolean})">
            <summary>
            Gets a value indicating whether to display the delivery time according to stock quantity.
            </summary>
            <param name="product">Product entity.</param>
            <param name="catalogSettings">Catalog settings.</param>
            <param name="isStockManaged">
            A value indicating whether the stock of the product is managed.
            Will be obtained via <see cref="P:Smartstore.Core.Catalog.Products.Product.ManageInventoryMethod"/> if <c>null</c>.
            </param>
            <returns>A value indicating whether to display the delivery time according to stock quantity.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductExtensions.GetDeliveryTimeIdAccordingToStock(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.CatalogSettings,System.Nullable{System.Boolean})">
            <summary>
            Gets the delivery time identifier according to stock quantity.
            </summary>
            <param name="product">Product entity.</param>
            <param name="catalogSettings">Catalog settings.</param>
            <param name="isStockManaged">
            A value indicating whether the stock of the product is managed.
            Will be obtained via <see cref="P:Smartstore.Core.Catalog.Products.Product.ManageInventoryMethod"/> if <c>null</c>.
            </param>
            <returns>The delivery time identifier according to stock quantity. <c>null</c> if not specified.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductExtensions.IsNew(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.CatalogSettings)">
            <summary>
            Gets a value indicating whether the product is labeled as NEW.
            </summary>
            <param name="product">Product entity.</param>
            <param name="catalogSettings">Catalog settings.</param>
            <returns>A alue indicating whether the product is labeled as NEW.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductExtensions.ParseAllowedQuantities(Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Gets a list of allowed quantities.
            </summary>
            <param name="product">Product entity.</param>
            <returns>List of allowed quantities.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductExtensions.GetMinOrderQuantity(Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Gets the lowest possible order quantity for a given product,
            which is either <see cref="P:Smartstore.Core.Catalog.Products.Product.OrderMinimumQuantity"/> or the first item
            in <see cref="P:Smartstore.Core.Catalog.Products.Product.AllowedQuantities" />.
            </summary>
            <param name="product">The product to get min order quantity for.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductExtensions.GetMaxOrderQuantity(Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Gets the highest possible order quantity for a given product,
            which is either <see cref="P:Smartstore.Core.Catalog.Products.Product.OrderMaximumQuantity"/> or the last item
            in <see cref="P:Smartstore.Core.Catalog.Products.Product.AllowedQuantities" />.
            </summary>
            <param name="product">The product to get min order quantity for.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductExtensions.ParseRequiredProductIds(Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Gets a list of required product identifiers.
            </summary>
            <param name="product">Product entity.</param>
            <returns>List of required product identifiers.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductMediaFileQueryExtensions.ApplyProductFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.ProductMediaFile},System.Int32)">
            <summary>
            Applies a filter for a product and sorts by <see cref="P:Smartstore.Core.Catalog.Products.ProductMediaFile.DisplayOrder"/>.
            </summary>
            <param name="query">Product media file query.</param>
            <param name="productId">Product identifier to be filtered.</param>
            <returns>Product media file query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product},System.Boolean)">
            <summary>
            Applies standard filter for a product query.
            Filters out <see cref="P:Smartstore.Core.Catalog.Products.Product.IsSystemProduct"/>.
            </summary>
            <param name="query">Product query.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Catalog.Products.Product.Published"/>.</param>
            <returns>Product query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.ApplySystemNameFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product},System.String)">
            <summary>
            Applies a filter for system names.
            </summary>
            <param name="query">Product query.</param>
            <param name="systemName">Product system name.</param>
            <returns>Product query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.ApplySkuFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product},System.String)">
            <summary>
            Applies a filter for SKU and sorts by <see cref="P:Smartstore.Core.Catalog.Products.Product.DisplayOrder"/>, then by <see cref="P:Smartstore.Domain.BaseEntity.Id"/>.
            </summary>
            <param name="query">Product query.</param>
            <param name="sku">Stock keeping unit (SKU).</param>
            <returns>Ordered product query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.ApplyGtinFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product},System.String)">
            <summary>
            Applies a filter for GTIN and sorts by <see cref="P:Smartstore.Core.Catalog.Products.Product.DisplayOrder"/>, then by <see cref="P:Smartstore.Domain.BaseEntity.Id"/>.
            </summary>
            <param name="query">Product query.</param>
            <param name="gtin">Global Trade Item Number (GTIN).</param>
            <returns>Ordered product query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.ApplyMpnFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product},System.String)">
            <summary>
            Applies a filter for MPN and sorts by <see cref="P:Smartstore.Core.Catalog.Products.Product.DisplayOrder"/>, then by <see cref="P:Smartstore.Domain.BaseEntity.Id"/>.
            </summary>
            <param name="query">Product query.</param>
            <param name="manufacturerPartNumber">Manufacturer Part Number (MPN).</param>
            <returns>Ordered product query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.ApplyProductCodeFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product},System.String)">
            <summary>
            Applies a filter to find a product by its SKU, MPN or GTIN and sorts 
            by <see cref="P:Smartstore.Core.Catalog.Products.Product.DisplayOrder"/>, then by <see cref="P:Smartstore.Domain.BaseEntity.Id"/>.
            </summary>
            <param name="query">Product query.</param>
            <param name="code">A product code like SKU, MPN or GTIN.</param>
            <returns>Ordered product query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.ApplyAssociatedProductsFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product},System.Int32[],System.Boolean)">
            <summary>
            Applies a filter for associated products and sorts by <see cref="P:Smartstore.Core.Catalog.Products.Product.ParentGroupedProductId"/>, then by <see cref="P:Smartstore.Core.Catalog.Products.Product.DisplayOrder"/>.
            </summary>
            <param name="query">Product query.</param>
            <param name="groupedProductIds">Product identifiers of grouped products.</param>
            <param name="includeHidden">A value indicating whether to include hidden products.</param>
            <returns>Product query.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.ApplyDescendantsFilter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product},System.String,System.Boolean)">
            <summary>
            Applies a filter that reads all products that are descendants of the category with the given <paramref name="treePath"/>.
            </summary>
            <param name="treePath">The parent's tree path to get descendant products from.</param>
            <param name="includeSelf"><c>true</c> = add the products of the parent category to the result list, <c>false</c> = ignore the parent category.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.IncludeMedia(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product})">
            <summary>
            Includes media for eager loading:
            <see cref="P:Smartstore.Core.Catalog.Products.Product.ProductMediaFiles"/> (sorted by <see cref="P:Smartstore.Core.Catalog.Products.ProductMediaFile.DisplayOrder"/>), then <see cref="P:Smartstore.Core.Catalog.Products.ProductMediaFile.MediaFile"/>
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.IncludeManufacturers(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product})">
            <summary>
            Includes manufacturers for eager loading:
            Published <see cref="P:Smartstore.Core.Catalog.Products.Product.ProductManufacturers"/> (sorted by <see cref="P:Smartstore.Core.Catalog.Brands.Manufacturer.DisplayOrder"/> then by <see cref="P:Smartstore.Core.Catalog.Brands.Manufacturer.Name"/>), 
            then <see cref="P:Smartstore.Core.Catalog.Brands.ProductManufacturer.Manufacturer"/>, then <see cref="P:Smartstore.Core.Catalog.Brands.Manufacturer.MediaFile"/>
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.IncludeBundleItems(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product})">
            <summary>
            Includes bundle items for eager loading:
            Published <see cref="P:Smartstore.Core.Catalog.Products.Product.ProductBundleItems"/> (sorted by <see cref="P:Smartstore.Core.Catalog.Products.ProductBundleItem.DisplayOrder"/>), 
            then <see cref="P:Smartstore.Core.Catalog.Products.ProductBundleItem.BundleProduct"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductQueryExtensions.IncludeReviews(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product})">
            <summary>
            Includes product reviews for eager loading:
            Approved <see cref="P:Smartstore.Core.Catalog.Products.Product.ProductReviews"/> (sorted by <see cref="P:Smartstore.Core.Catalog.Products.ProductBundleItem.CreatedOnUtc"/> desc), 
            then <see cref="P:Smartstore.Core.Identity.CustomerContent.Customer"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductUrlHelperExtensions">
            <summary>
            Extension methods for product URL helper.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductUrlHelperExtensions.GetProductUrl(Smartstore.Core.Catalog.Products.ProductUrlHelper,System.Int32,System.String,System.Int32,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue[])">
            <summary>
            Creates a product URL including variant query string.
            </summary>
            <param name="helper">Product URL helper.</param>
            <param name="productId">Product identifier.</param>
            <param name="productSlug">Product URL slug.</param>
            <param name="bundleItemId">Bundle item identifier. 0 if it's not a bundle item.</param>
            <param name="variantValues">Variant values</param>
            <returns>Product URL</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductUrlHelperExtensions.GetProductUrlAsync(Smartstore.Core.Catalog.Products.ProductUrlHelper,Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeValue[])">
            <summary>
            Creates a product URL including variant query string.
            </summary>
            <param name="helper">Product URL helper</param>
            <param name="product">Product entity</param>
            <param name="variantValues">Variant values</param>
            <returns>Product URL</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductUrlHelperExtensions.GetProductUrlAsync(Smartstore.Core.Catalog.Products.ProductUrlHelper,System.String,Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem)">
            <summary>
            Creates a product URL including variant query string.
            </summary>
            <param name="helper">Product URL helper.</param>
            <param name="productSlug">Product URL slug.</param>
            <param name="cartItem">Organized shopping cart item.</param>
            <returns>Product URL.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductUrlHelperExtensions.GetProductUrlAsync(Smartstore.Core.Catalog.Products.ProductUrlHelper,System.String,Smartstore.Core.Checkout.Orders.OrderItem)">
            <summary>
            Creates a product URL including variant query string.
            </summary>
            <param name="helper">Product URL helper.</param>
            <param name="productSlug">Product URL slug.</param>
            <param name="orderItem">Order item.</param>
            <returns>Product URL.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.RelatedProductQueryExtensions.ApplyProductId1Filter(System.Linq.IQueryable{Smartstore.Core.Catalog.Products.RelatedProduct},System.Int32,System.Boolean)">
            <summary>
            Applies a filter for <see cref="P:Smartstore.Core.Catalog.Products.RelatedProduct.ProductId1"/> and sorts by <see cref="P:Smartstore.Core.Catalog.Products.RelatedProduct.DisplayOrder"/>.
            </summary>
            <param name="query">Related product query.</param>
            <param name="productId1">Product identifier.</param>
            <param name="includeHidden">Applies a filter for <see cref="P:Smartstore.Core.Catalog.Products.Product.Published"/>.</param>
            <returns>Related product query.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.ProductBatchContext">
            <summary>
            Holds cargo data to reduce database roundtrips during price calculation or long running operations (like export etc.).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductBatchContext.Collect(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds more product identifiers. Enables the subsequent loading of products.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductBatchContext.Clear">
            <summary>
            Clears all loaded data. All internal objects will be reset.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.AdjustInventoryResult.StockQuantityOld">
            <summary>
            Gets or sets the stock quantity before adjustment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.AdjustInventoryResult.StockQuantityNew">
            <summary>
            Gets or sets the stock quantity after adjustment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.AdjustInventoryResult.HasClearStockQuantityResult">
            <summary>
            Gets a value indicating whether the adjustment resulted in a clear, unique stock quantity update. For instance <c>false</c> for bundle products.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.IProductCloner">
            <summary>
            Product cloner interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductCloner.CloneProductAsync(Smartstore.Core.Catalog.Products.Product,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copies a product.
            </summary>
            <param name="product">Product to copy. Important: Pass a tracked entity because the navigation properties must be available in order to be copied.</param>
            <param name="cloneName">The product name of the copied product.</param>
            <param name="isPublished">A value indicating whether to publish the copied product.</param>
            <param name="copyAssociatedProducts">A value indicating whether to copy associated products.</param>
            <returns>The copied product.</returns>
            <remarks>
            The caller is responsible for fast retrieval (eager loading) of product navigation properties.
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.IProductCompareService">
            <summary>
            Compare products service.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductCompareService.CountComparedProductsAsync">
            <summary>
            Gets the number of compared products.
            </summary>
            <returns>Number of compared products.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductCompareService.GetCompareListAsync">
            <summary>
            Gets the list of compared products.
            </summary>
            <returns>List of compared products.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductCompareService.ClearCompareList">
            <summary>
            Clears the list of compared products.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductCompareService.RemoveFromList(System.Int32)">
            <summary>
            Removes a product from the list of compared products.
            </summary>
            <param name="productId">Product identifier.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductCompareService.AddToList(System.Int32)">
            <summary>
            Adds a product to the list of compared products.
            </summary>
            <param name="productId">Product identifier.</param>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.IProductService">
            <summary>
            Product service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.GetProductByCodeAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a product by SKU, GTIN or MPN.
            </summary>
            <param name="code">SKU, GTIN or MPN.</param>
            <param name="includeHidden">A value indicating whether to include hidden products.</param>
            <param name="tracked">A value indicating whether to put prefetched entities to EF change tracker.</param>
            <returns>Found product or variant combination.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.GetProductTagsByProductIdsAsync(System.Int32[],System.Boolean)">
            <summary>
            Gets product tags by product identifiers.
            </summary>
            <param name="productIds">Product identifiers.</param>
            <param name="includeHidden">A value indicating whether to include hidden products and product tags.</param>
            <returns>Map of product tags.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.GetCrossSellProductsByProductIdsAsync(System.Int32[],System.Int32,System.Boolean)">
            <summary>
            Gets cross-sell products by shopping cart.
            </summary>
            <param name="productIds">Product identifiers.</param>
            <param name="numberOfProducts">Number of products to return.</param>
            <param name="includeHidden">A value indicating whether to include hidden products.</param>
            <returns>List of products.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.ApplyProductReviewTotals(Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Applies the product review totals to a product entity. The caller is responsible for database commit.
            </summary>
            <param name="product">Product entity.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.AdjustInventoryAsync(Smartstore.Core.Checkout.Orders.OrderItem,System.Boolean,System.Int32)">
            <summary>
            Adjusts product inventory. The caller is responsible for database commit.
            </summary>
            <param name="orderItem">Order item.</param>
            <param name="decrease">A value indicating whether to increase or descrease product stock quantity.</param>
            <param name="quantity">The quantity to adjust.</param>
            <returns>Adjust inventory result.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.AdjustInventoryAsync(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,System.Boolean,System.Int32)">
            <summary>
            Adjusts product inventory. The caller is responsible for database commit.
            </summary>
            <param name="product">Product entity.</param>
            <param name="selection">Selected attributes.</param>
            <param name="decrease">A value indicating whether to increase or descrease product stock quantity.</param>
            <param name="quantity">The quantity to adjust.</param>
            <returns>Adjust inventory result.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.EnsureMutuallyRelatedProductsAsync(System.Int32)">
            <summary>
            Ensures the existence of all mutually related products.
            </summary>
            <param name="productId1">First product identifier.</param>
            <returns>Number of related products added.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.EnsureMutuallyCrossSellProductsAsync(System.Int32)">
            <summary>
            Ensures the existence of all mutually cross selling products.
            </summary>
            <param name="productId1">First product identifier.</param>
            <returns>Number of cross sell products added.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.CreateProductBatchContext(System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Products.Product},Smartstore.Core.Stores.Store,Smartstore.Core.Identity.Customer,System.Boolean,System.Boolean)">
            <summary>
            Creates a product batch context for fast retrieval (eager loading) of product navigation properties.
            </summary>
            <param name="products">Products. <c>null</c> to lazy load data if required.</param>
            <param name="store">Store. If <c>null</c>, store will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
            <param name="customer">Customer. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="includeHidden">A value indicating whether to include hidden records.</param>
            <param name="loadMainMediaOnly">
            A value indicating whether to load the main media per product only.
            The main media file is determined by <see cref="P:Smartstore.Core.Catalog.Products.Product.MainPictureId"/>.
            </param>
            <returns>Product batch context.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.RestoreProductsAsync(System.Int32[],System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Restores soft-deleted products.
            </summary>
            <param name="productIds">Identifiers of products to restore.</param>
            <param name="publishAfterRestore">A value indicating whether to publish restored products.</param>
            <returns>Number of successfully restored products.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductService.DeleteProductsPermanentAsync(System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Permanently deletes soft-deleted products.
            </summary>
            <param name="productIds">Identifiers of products to delete.</param>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.IProductTagService">
            <summary>
            Service interface for product tags.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductTagService.UpdateProductTagsAsync(Smartstore.Core.Catalog.Products.Product,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates product tags. This method commits to database.
            It uses a <see cref="F:Smartstore.Data.Hooks.HookImportance.Important"/> hook scope and therefore all changes to entities should have been committed to the database before calling it.
            </summary>
            <remarks>
            Tags that are not included in <paramref name="tagNames"/> are added and assigned to the product.
            Existing assignments to tags that are not included in <paramref name="tagNames"/> are removed.
            </remarks>
            <param name="product">Product.</param>
            <param name="tagNames">List of tag names to apply.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductTagService.GetProductCountsMapAsync(Smartstore.Core.Identity.Customer,System.Int32,System.Boolean)">
            <summary>
            Counts the number of products associated with product tags.
            </summary>
            <param name="customer">Customer entity. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="storeId">Store identifier. 0 to ignore store mappings.</param>
            <returns>Map with key = <c>ProductTag.Id</c> and value = number of assigned products.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IProductTagService.ClearCacheAsync">
            <summary>
            Clears cached number of products associated with product tags.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.IRecentlyViewedProductsService">
            <summary>
            Recently viewed products service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IRecentlyViewedProductsService.GetRecentlyViewedProductsAsync(System.Int32,System.Int32[],System.Nullable{System.Int32})">
            <summary>
            Gets a list of recently viewed products.
            </summary>
            <param name="count">Number of products to return.</param>
            <param name="excludedProductIds">Array of product identifiers to be excluded.</param>
            <param name="storeId">Store identifier. If <c>null</c>, identifier will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
            <returns>List of recently viewed products.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IRecentlyViewedProductsService.AddProductToRecentlyViewedList(System.Int32)">
            <summary>
            Adds a product identifier to the recently viewed products list.
            </summary>
            <param name="productId">Product identifier.</param>
        </member>
        <member name="T:Smartstore.Core.Catalog.Products.IStockSubscriptionService">
            <summary>
            Back in stock subscription service.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IStockSubscriptionService.IsSubscribedAsync(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Identity.Customer,System.Nullable{System.Int32})">
            <summary>
            Gets a value indicating whether the customer is subscribed to stock notifications.
            </summary>
            <param name="product">Product entity.</param>
            <param name="customer">Customer entity. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="storeId">Store identifier. If <c>null</c>, identifier will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
            <returns>A value indicating whether the customer is subscribed to stock notifications.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IStockSubscriptionService.SubscribeAsync(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Identity.Customer,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Subscribes to stock notifications.
            </summary>
            <param name="product">Product entity.</param>
            <param name="customer">Customer entity. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="storeId">Store identifier. If <c>null</c>, identifier will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
            <param name="unsubscribe">A value indicating whether to unsubscribe if already subscribed.</param>
            <returns>A value indicating whether the operation succeeded and a related message.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IStockSubscriptionService.UnsubscribeAsync(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Identity.Customer,System.Nullable{System.Int32})">
            <summary>
            Unsubscribes to stock notifications.
            </summary>
            <param name="product">Product entity.</param>
            <param name="customer">Customer entity. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="storeId">Store identifier. If <c>null</c>, identifier will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
            <returns>A value indicating whether the operation succeeded and a related message.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.IStockSubscriptionService.SendNotificationsToSubscribersAsync(Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Send notification to subscribers.
            </summary>
            <param name="product">Product entity.</param>
            <returns>Number of sent emails.</returns>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductUrlHelper.Url">
            <summary>
            URL of the product page used to create the new product URL. Created from route if <c>null</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Products.ProductUrlHelper.InitialQuery">
            <summary>
            Initial query string used to create the new query string. Usually <c>null</c>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductUrlHelper.ToQueryString(Smartstore.Core.Catalog.Attributes.ProductVariantQuery)">
            <summary>
            Converts a query object into a URL query string.
            </summary>
            <param name="query">Product variant query.</param>
            <returns>URL query string.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductUrlHelper.AddAttributesToQueryAsync(Smartstore.Core.Catalog.Attributes.ProductVariantQuery,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,System.Int32,System.Int32,System.Collections.Generic.ICollection{Smartstore.Core.Catalog.Attributes.ProductVariantAttribute})">
            <summary>
            Adds selected product variant attributes to a product variant query.
            </summary>
            <param name="query">Target product variant query.</param>
            <param name="source">Selected attributes.</param>
            <param name="productId">Product identifier.</param>
            <param name="bundleItemId">Bundle item identifier.</param>
            <param name="attributes">Product variant attributes.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductUrlHelper.GetProductPath(System.String,Smartstore.Core.Catalog.Attributes.ProductVariantQuery)">
            <summary>
            Creates a product path including variant query string.
            </summary>
            <param name="productSlug">Product URL slug.</param>
            <param name="query">Product variant query.</param>
            <returns>Product URL.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductUrlHelper.GetProductPathAsync(System.Int32,System.String,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection)">
            <summary>
            Creates a product path including variant query string.
            </summary>
            <param name="productId">Product identifier.</param>
            <param name="productSlug">Product URL slug.</param>
            <param name="selection">Selected attributes.</param>
            <returns>Product URL.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.ProductUrlHelper.GetAbsoluteProductUrlAsync(System.Int32,System.String,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,Smartstore.Core.Stores.Store,Smartstore.Core.Localization.Language)">
            <summary>
            Creates an absolute product URL (including scheme and host).
            </summary>
            <param name="productId">Product identifier.</param>
            <param name="productSlug">Product URL slug.</param>
            <param name="selection">Selected attributes.</param>
            <param name="store">Store.</param>
            <param name="language">Language.</param>
            <returns>Absolute product URL.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.Utilities.ProductPictureHelper.FixProductMainPictureId(Smartstore.Core.Data.SmartDbContext,Smartstore.Core.Catalog.Products.Product,System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Products.ProductMediaFile})">
            <summary>
            Fixes 'MainPictureId' property of a single product entity.
            </summary>
            <param name="db">Database context.</param>
            <param name="product">Product to fix.</param>
            <param name="entities">When <c>null</c>, <see cref="P:Smartstore.Core.Catalog.Products.Product.ProductMediaFiles"/> gets called.</param>
            <returns><c>true</c> when value was fixed.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Products.Utilities.ProductPictureHelper.FixProductMainPictureIds(Smartstore.Core.Data.SmartDbContext,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Called from migration seeder and only processes product entities without MainPictureId value.
            </summary>
            <param name="db">Database context.</param>
            <returns>The total count of fixed and updated product entities.</returns>
        </member>
        <member name="P:Smartstore.Core.Catalog.Rules.AttributeRuleContext.Product">
            <summary>
            Gets the product belonging to <see cref="P:Smartstore.Core.Catalog.Rules.AttributeRuleContext.Attribute"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Rules.AttributeRuleContext.Attribute">
            <summary>
            Gets the current product attribute to be checked.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Rules.AttributeRuleContext.SelectedValues">
            <summary>
            Gets the values of the currently selected product attributes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Rules.AttributeRuleContext.SelectedValueIds">
            <summary>
            Gets the identifiers of the selected product attribute values.
            Only includes list-type attributes (<see cref="M:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute.IsListTypeAttribute"/>).
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Rules.IAttributeRuleProvider">
            <summary>
            Represents a product attribute rule provider (conditional attributes).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Rules.IAttributeRuleProvider.GetProcessor(Smartstore.Core.Rules.RuleExpression)">
            <summary>
            Gets the rule processor.
            </summary>
            <param name="expression">Rule expression.</param>
            <returns>Rule processor.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Rules.IAttributeRuleProvider.CreateExpressionGroupAsync(Smartstore.Core.Catalog.Attributes.ProductVariantAttribute,System.Boolean)">
            <summary>
            Creates a rule expression group for a <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute"/>.
            </summary>
            <param name="includeHidden">A value indicating whether to include hidden rulesets.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Rules.IAttributeRuleProvider.GetInactiveAttributesAsync(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,Smartstore.Core.Rules.LogicalRuleOperator)">
            <summary>
            Gets inactive attributes.
            </summary>
            <param name="product">The product to get inactive attributes for.</param>
            <param name="selection">The selected attributes.</param>
            <param name="logicalOperator">Rule operator.</param>
            <returns>Inactive attributes.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Rules.IAttributeRuleProvider.IsAttributeActiveAsync(Smartstore.Core.Catalog.Rules.AttributeRuleContext,Smartstore.Core.Rules.LogicalRuleOperator)">
            <summary>
            Checks whether <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute"/> is active (whether the assigned rule is met).
            </summary>
            <param name="context">Attribute rule context.</param>
            <param name="logicalOperator">Rule operator.</param>
            <returns><c>true</c> the attribute is active, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Rules.AttributeRuleProviderContext">
            <summary>
            Context object provided when instantiating <see cref="T:Smartstore.Core.Catalog.Rules.IAttributeRuleProvider"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Rules.AttributeRuleProviderContext.#ctor(System.Int32)">
            <summary>
            Context object provided when instantiating <see cref="T:Smartstore.Core.Catalog.Rules.IAttributeRuleProvider"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Rules.IProductRuleProvider">
            <summary>
            Interface for a product rule provider.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Rules.IProductRuleProvider.CreateExpressionGroupAsync(System.Int32)">
            <summary>
            Creates a rule expression group.
            </summary>
            <param name="ruleSetId">Rule set identifier.</param>
            <returns>Expression group.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Rules.IProductRuleProvider.MatchesAsync(System.Int32,System.Collections.Generic.IEnumerable{Smartstore.Core.Rules.RuleSetEntity},Smartstore.Core.Rules.LogicalRuleOperator)">
            <summary>
            Checks whether a product meets rules.
            </summary>
            <param name="productId">Identifier of the product to be checked.</param>
            <param name="ruleSets">Rules to be checked.</param>
            <param name="logicalOperator">The rule operator if <paramref name="ruleSets"/> contains more than one <see cref="T:Smartstore.Core.Rules.RuleSetEntity"/>.</param>
            <returns><c>true</c> the rules are met, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Rules.IProductRuleProvider.SearchAsync(Smartstore.Core.Catalog.Rules.SearchFilterExpression[],System.Int32,System.Int32)">
            <summary>
            Searches for products that match the filter expressions.
            </summary>
            <param name="filters">Filter expressions.</param>
            <param name="pageIndex">Page index.</param>
            <param name="pageSize">Page size.</param>
            <returns>Catalog search result.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Rules.ProductRuleEvaluatorTask">
            <summary>
            Updates the system assignments to categories for rules.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.Catalog.Search.CatalogSearchQuery"/> class without a search term being set
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.Clone">
            <summary>
            Returns a new <see cref="T:Smartstore.Core.Catalog.Search.CatalogSearchQuery"/> instance that is a memberwise copy of this query.
            </summary>
            <remarks>
            This creates a shallow copy of the original query! If you clear the filters of the clone, you also clear the filters of the original query.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.CatalogSearchQuery.ParseSearchTerm">
            <summary>
            Gets or sets a value indicating whether to parse the search term using <see cref="T:Smartstore.Core.Rules.Filters.FilterExpressionParser"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.UseHitsFactory(System.Func{Microsoft.EntityFrameworkCore.DbSet{Smartstore.Core.Catalog.Products.Product},System.Int32[],System.Threading.Tasks.Task{System.Collections.Generic.List{Smartstore.Core.Catalog.Products.Product}}})">
            <summary>
            Uses the given factory to load products from database AFTER all matching product ids has been determined.
            Gives you the chance - among other things - to eager load navigation properties.
            </summary>
            <param name="hitsFactory">The factory to use. The second param contains all matched product ids.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.VisibleOnly(Smartstore.Core.Identity.Customer)">
            <summary>
            Only products that are visible in frontend.
            </summary>
            <param name="customer">Customer whose customer roles are to be checked. Can be <c>null</c>.</param>
            <returns>Catalog search query</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.VisibleOnly(System.Int32[])">
            <summary>
            Only products that are visible in frontend.
            </summary>
            <param name="allowedCustomerRoleIds">List of allowed customer role ids. Can be <c>null</c>.</param>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.AvailableOnly(System.Boolean)">
            <summary>
            Filters products based on their stock level.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.AvailableByDate(System.Boolean)">
            <summary>
            Filters products by their availability date.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.WithCategoryIds(System.Nullable{System.Boolean},System.Int32[])">
            <summary>
            Filter products by category identifiers.
            For a large number of category IDs, it is recommended to use <see cref="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.WithCategoryTreePath(System.String,System.Nullable{System.Boolean},System.Boolean)"/> because it is faster.
            </summary>
            <param name="featuredOnly">
            A value indicating whether loaded products are marked as "featured" at their category assignment.
            <c>true</c> to load featured products only, <c>false</c> to load unfeatured products only, <c>null</c> to load all products.
            </param>
            <param name="ids">The category identifiers.</param>
            <returns>Search query.</returns>
            <remarks>
            Use <see cref="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.WithCategoryIds(System.Nullable{System.Boolean},System.Int32[])"/> or <see cref="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.WithCategoryTreePath(System.String,System.Nullable{System.Boolean},System.Boolean)"/>, but not both together.
            Both do the same thing (filter products based on their category assignments), just in different ways.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.WithCategoryTreePath(System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Filter products by category tree path.
            For a large number of category assignments, this method is faster than <see cref="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.WithCategoryIds(System.Nullable{System.Boolean},System.Int32[])"/>.
            </summary>
            <param name="treePath">The parent's tree path to get descendants from.</param>
            <param name="featuredOnly">
            A value indicating whether loaded products are marked as "featured" at their category assignment.
            <c>true</c> to load featured products only, <c>false</c> to load unfeatured products only, <c>null</c> to load all products.
            </param>
            <param name="includeSelf"><c>true</c> = add the parent node to the result list, <c>false</c> = ignore the parent node.</param>
            <returns>Search query.</returns>
            <remarks>
            Use <see cref="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.WithCategoryIds(System.Nullable{System.Boolean},System.Int32[])"/> or <see cref="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.WithCategoryTreePath(System.String,System.Nullable{System.Boolean},System.Boolean)"/>, but not both together.
            Both do the same thing (filter products based on their category assignments), just in different ways.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.HasAnyCategory(System.Boolean)">
            <remarks>Includes only published categories.</remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchQuery.HasAnyManufacturer(System.Boolean)">
            <remarks>Includes only published manufacturers.</remarks>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchResult.#ctor(Smartstore.Core.Catalog.Search.CatalogSearchQuery)">
            <summary>
            Constructor to get an instance without any search hits.
            </summary>
            <param name="query">Catalog search query</param>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.CatalogSearchResult.Query">
            <summary>
            The original catalog search query.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.CatalogSearchResult.HitsEntityIds">
            <summary>
            Entity identifiers of found products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.CatalogSearchResult.SpellCheckerSuggestions">
            <summary>
            Gets spell checking suggestions/corrections.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchResult.GetHitsAsync">
            <summary>
            Gets the product hits. Once loaded, the result is cached so that
            subsequent calls to this method do not hit the database again.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.CatalogSearchService.SearchDirectAsync(Smartstore.Core.Catalog.Search.CatalogSearchQuery)">
            <summary>
            Bypasses the index provider and directly searches in the database.
            </summary>
            <param name="searchQuery">Search query.</param>
            <returns>Catalog search result.</returns>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.SearchMode">
            <summary>
            Gets or sets the search mode
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.SearchFields">
            <summary>
            Gets or sets name of fields to be searched. The name field is always searched.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.InstantSearchEnabled">
            <summary>
            Gets or sets a value indicating whether instant-search is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.ShowProductImagesInInstantSearch">
            <summary>
            Gets or sets a value indicating whether to show product images in instant-search result
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.InstantSearchNumberOfProducts">
            <summary>
            Gets or sets the number of products to return when using "instant-search" feature
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.InstantSearchTermMinLength">
            <summary>
            Gets or sets a minimum instant-search term length
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.FilterMinHitCount">
            <summary>
            Gets or sets the minimum hit count for a filter value. Values with a lower hit count are not displayed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.FilterMaxChoicesCount">
            <summary>
            Gets or sets the maximum number of filter values to be displayed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.DefaultSortOrder">
            <summary>
            Gets or sets the default sort order in search results
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.UseCatalogSearchInBackend">
            <summary>
            Hidden setting indicating whether to use catalog search instead of Linq search in backend.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.SearchProductByIdentificationNumber">
            <summary>
            Specifies whether the product page should be opened directly if the search term matches a SKU, MPN or GTIN.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.SearchSettings.IncludeNotAvailable">
            <summary>
            Gets or sets the a value indicating whether to include or exclude not available products by default.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.SearchSettings.GetSearchFields(System.Boolean)">
            <summary>
            Gets a list of search fields based on <see cref="P:Smartstore.Core.Catalog.Search.SearchSettings.SearchFields"/>.
            </summary>
            <param name="forInstantSearch">
            A value indicating whether to return fields for instant search.
            Returns the fields for search page if <c>false</c>.
            </param>
        </member>
        <member name="T:Smartstore.Core.Catalog.Search.CatalogSearchingEvent">
            <summary>
            An event that is fired before searching the catalog for products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.CatalogSearchingEvent.Direct">
            <summary>
            A value indicating whether the database is directly searched.
            If <c>false</c> then <see cref="T:Smartstore.Core.Search.ISearchEngine"/> is used.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Search.CatalogSearchedEvent">
            <summary>
            An event that is fired after the catalog has been searched for products.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Search.CategoryTreePathFilter">
            <summary>
            Filter products by category tree path.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.CategoryTreePathFilter.FeaturedOnly">
            <summary>
            A value indicating whether loaded products are marked as "featured" at their category assignment.
            <c>true</c> to load featured products only, <c>false</c> to load unfeatured products only, <c>null</c> to load all products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.CategoryTreePathFilter.IncludeSelf">
            <summary>
            <c>true</c> = add the parent node to the result list, <c>false</c> = ignore the parent node.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.CategoryTreePathFilter.TreePath">
            <summary>
            Category tree path.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.CategoryTreePathFilter.CategoryId">
            <summary>
            Category identifier from <see cref="P:Smartstore.Core.Catalog.Search.CategoryTreePathFilter.TreePath"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Search.ICatalogSearchService">
            <summary>
            Catalog search interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.ICatalogSearchService.PrepareQuery(Smartstore.Core.Catalog.Search.CatalogSearchQuery,System.Linq.IQueryable{Smartstore.Core.Catalog.Products.Product})">
            <summary>
            Builds a product query using LINQ search.
            </summary>
            <param name="searchQuery">Search term, filters and other parameters used for searching.</param>
            <param name="baseQuery">Optional query used to build the product query.</param>
            <returns>Product queryable.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.ICatalogSearchService.SearchAsync(Smartstore.Core.Catalog.Search.CatalogSearchQuery,System.Boolean)">
            <summary>
            Searches for products.
            </summary>
            <param name="searchQuery">Search term, filters and other parameters used for searching.</param>
            <param name="direct">Bypasses the index provider (if available) and directly searches in the database.</param>
            <returns>Catalog search result.</returns>
        </member>
        <member name="T:Smartstore.Core.Catalog.Search.TermSearchProduct">
            <summary>
            Helper for building catalog search query including <see cref="T:Smartstore.Core.Localization.LocalizedProperty"/> using <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper">
            <summary>
            Query alias mapper interface for catalog search.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.GetAttributeIdByAlias(System.String,System.Int32)">
            <summary>
            Gets the attribute id by attribute alias.
            </summary>
            <param name="attributeAlias">Attribute alias.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Attribute identifier.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.GetAttributeOptionIdByAlias(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the attribute option id by option alias.
            </summary>
            <param name="optionAlias">Attribute option alias.</param>
            <param name="attributeId">Attribute identifier.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Attribute option identifier.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.GetAttributeAliasById(System.Int32,System.Int32)">
            <summary>
            Gets the attribute alias by attribute identifier.
            </summary>
            <param name="attributeId">Attribute identifier.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Attribute alias.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.GetAttributeOptionAliasById(System.Int32,System.Int32)">
            <summary>
            Get the attribute option alias by option identifier.
            </summary>
            <param name="optionId">Option identifier.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Attribute option alias.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.ClearAttributeCacheAsync">
            <summary>
            Clears all cached attribute mappings.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.GetVariantIdByAlias(System.String,System.Int32)">
            <summary>
            Gets the variant id by variant alias.
            </summary>
            <param name="variantAlias">Variant alias.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Variant identifier.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.GetVariantOptionIdByAlias(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the variant option identifier by option alias.
            </summary>
            <param name="optionAlias">Variant option alias.</param>
            <param name="variantId">Variant identifier.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Variant option identifier.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.GetVariantAliasById(System.Int32,System.Int32)">
            <summary>
            Gets the variant alias by variant identifier.
            </summary>
            <param name="variantId">Variant identifier.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Variant alias.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.GetVariantOptionAliasById(System.Int32,System.Int32)">
            <summary>
            Get the variant option alias by value identifier.
            </summary>
            <param name="optionId">Option identifier.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Variant option alias.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.ClearVariantCacheAsync">
            <summary>
            Clears all cached variant mappings.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.GetCommonFacetAliasByGroupKind(Smartstore.Core.Search.Facets.FacetGroupKind,System.Int32)">
            <summary>
            Get the common facet alias by facet group kind.
            </summary>
            <param name="kind">Facet group kind.</param>
            <param name="languageId">Language identifier.</param>
            <returns>Common facet alias.</returns>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryAliasMapper.ClearCommonFacetCacheAsync">
            <summary>
            Clears all cached common facet mappings.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryFactory">
            <summary>
            Query factory for catalog search.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryFactory.Current">
            <summary>
            The last created query instance. The model binder uses this property to avoid repeated binding.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Catalog.Search.Modelling.ICatalogSearchQueryFactory.CreateFromQueryAsync">
            <summary>
            Creates a <see cref="T:Smartstore.Core.Catalog.Search.CatalogSearchQuery"/> instance from the current <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> 
            by looking up corresponding keys in posted form and/or query string.
            </summary>
            <returns>The query object.</returns>
        </member>
        <member name="M:Smartstore.Core.Bootstrapping.CheckoutBootstrappingExtensions.UseCheckoutState(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds a <see cref="T:Smartstore.Core.Checkout.Orders.CheckoutState"/> middleware to the application. Ensures that the
            <see cref="T:Smartstore.Core.Checkout.Orders.CheckoutState"/> instance is automatically saved right before session
            data is committed (but only if state was loaded and changed during the request).
            Should be registered right after the session middleware.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Bootstrapping.MediaBuilderExtensions.MapMedia(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Maps media middleware as a new branch
            </summary>
        </member>
        <member name="M:Smartstore.Core.Bootstrapping.DbServiceCollectionExtensions.AddDbMigrator(Microsoft.Extensions.DependencyInjection.IServiceCollection,Smartstore.Engine.IApplicationContext)">
            <summary>
            Registers the open generic <see cref="T:Smartstore.Core.Data.Migrations.DbMigrator`1" /> as transient dependency.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Bootstrapping.CommonBuilderExtensions.UseWorkContext(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Initializes work context so that context data can be safely access from here on.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Bootstrapping.CommonBuilderExtensions.UsePoweredBy(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds X-Powered-By Smartstore HTTP header.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Bootstrapping.CommonBuilderExtensions.UseContentSecurityHeaders(Microsoft.AspNetCore.Builder.IApplicationBuilder,Smartstore.Engine.IApplicationContext)">
            <summary>
            Adds the "Content-Security-Policy" HTTP header or "Content-Security-Policy-Report-Only"
            if <see cref="P:Smartstore.Engine.SmartConfiguration.ContentSecurityPolicyConfiguration.Report"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Bootstrapping.LocalizationBuilderExtensions.UseRequestCulture(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Uses culture from current working language and sets globalization clients scripts accordingly.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Bootstrapping.LocalizationBuilderExtensions.UseLocalizedRouting(Microsoft.AspNetCore.Builder.IApplicationBuilder,Smartstore.Engine.IApplicationContext)">
            <summary>
            Adds a routing middleware to the pipeline that is aware of {culture} url segments, e.g. "/en/controller/action".
            </summary>
            <remarks>
            A call to <see cref="M:Smartstore.Core.Bootstrapping.LocalizationBuilderExtensions.UseLocalizedRouting(Microsoft.AspNetCore.Builder.IApplicationBuilder,Smartstore.Engine.IApplicationContext)"/> must be followed by a call to
            <c>UseEndpoints</c> for the same <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/>
            instance.
            <para>
            The localized routing middleware defines a point in the middleware pipeline where routing decisions are
            made, and an <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/> is associated with the <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>. The <see cref="T:Microsoft.AspNetCore.Routing.EndpointMiddleware"/>
            defines a point in the middleware pipeline where the current <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/> is executed. Middleware between
            the <see cref="T:Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware"/> and <see cref="T:Microsoft.AspNetCore.Routing.EndpointMiddleware"/> may observe or change the
            <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/> associated with the <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Bootstrapping.LoggingBuilderExtensions.UseRequestLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Adds middleware for streamlined request logging. Instead of writing HTTP request information
            like method, path, timing, status code and exception details
            in several events, this middleware collects information during the request (including from
            <see langword="IDiagnosticContext"/>), and writes a single event at request completion. Add this
            in <c>Startup.cs</c> before any handlers whose activities should be logged.
            </summary>
            <param name="app">The application builder.</param>
            <returns>The application builder.</returns>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Import.CategoryImporter.ImporterCargoData">
            <summary>
            Perf: contains data that is loaded once per import.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.Import.ProductImporter.TargetProductIdsKey">
            <summary>
            Old Product.Id -> new Product.Id
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.Import.ProductImporter.ParentProductIdsKey">
            <summary>
            Old Product.Id -> old Product.ParentGroupedProductId
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ProductImporter.GetCargoData(Smartstore.Core.DataExchange.Import.ImportExecuteContext)">
            <summary>
            Perf: load certain data only once per import to reduce database roundtrips.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Import.ProductImporter.ImporterCargoData">
            <summary>
            Perf: contains data that is loaded once per import.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Import.Events.ImportBatchExecutedEvent`1">
            <summary>
            An event that is fired after an import of a data batch.
            </summary>
            <typeparam name="TEntity">The entity type to be imported.</typeparam>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.Events.ImportBatchExecutedEvent`1.Context">
            <summary>
            Context of the import.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.Events.ImportBatchExecutedEvent`1.Batch">
            <summary>
            Current batch of import data.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Import.Events.ImportExecutedEvent">
            <summary>
            An event that is fired after a data import.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.Events.ImportExecutedEvent.Context">
            <summary>
            Context of the import.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Import.Events.ImportExecutingEvent">
            <summary>
            An event that is fired before a data import.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.Events.ImportExecutingEvent.Context">
            <summary>
            Context of the import.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportProfileQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.DataExchange.ImportProfile},System.Nullable{System.Boolean})">
            <summary>
            Applies a standard filter for an import profile query.
            Includes <see cref="P:Smartstore.Core.DataExchange.ImportProfile.Task"/> and sorts by 
            <see cref="P:Smartstore.Core.DataExchange.ImportProfile.EntityTypeId"/>, then by <see cref="P:Smartstore.Core.DataExchange.ImportProfile.Name"/>.
            </summary>
            <param name="query">Import profile query.</param>
            <param name="enabled">A value indicating whether to include enabled profiles. <c>null</c> to ignore.</param>
            <returns>Import profile query.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ColumnMap.GetMapping(System.String,System.String)">
            <summary>
            Gets a mapped column value.
            </summary>
            <param name="sourceName">The name of the column to get a mapped value for.</param>
            <param name="index">The column index, e.g. a language code (de, en etc.).</param>
            <returns>The mapped column value OR - if the name is unmapped - a value with the passed <paramref name="sourceName"/>[<paramref name="index"/>].</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ColumnMap.GetMapping(System.String)">
            <summary>
            Gets a mapped column value.
            </summary>
            <param name="sourceName">The name of the column to get a mapped value for.</param>
            <returns>The mapped column value OR - if the name is unmapped - the value of the passed <paramref name="sourceName"/>.</returns>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ColumnMappingItem.SourceName">
            <summary>
            The source name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ColumnMappingItem.MappedName">
            <summary>
            The mapped name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ColumnMappingItem.Default">
            <summary>
            An optional default value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ColumnMappingItem.IgnoreProperty">
            <summary>
            A value indicating whether to explicitly ignore this property.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.EntityImporterBase.ExecuteAsync(Smartstore.Core.DataExchange.Import.ImportExecuteContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.EntityImporterBase.ProcessBatchAsync(Smartstore.Core.DataExchange.Import.ImportExecuteContext,System.Threading.CancellationToken)">
            <summary>
            Imports a batch of data into the database.
            </summary>
            <param name="context">Import execution context.</param>
            <param name="cancelToken">A cancellation token to cancel the import.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.EntityImporterBase.ProcessLocalizationsAsync``1(Smartstore.Core.DataExchange.Import.ImportExecuteContext,Smartstore.Data.DbContextScope,System.Collections.Generic.IEnumerable{Smartstore.Core.DataExchange.Import.ImportRow{``0}},System.String,System.Collections.Generic.IDictionary{System.String,System.Linq.Expressions.Expression{System.Func{``0,System.String}}})">
            <summary>
            Imports localized properties.
            </summary>
            <param name="context">Import execution context.</param>
            <param name="scope">Scope for database commit.</param>
            <param name="batch">Batch of source data.</param>
            <param name="localizableProperties">Keys of localized properties to be included.</param>
            <returns>The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.EntityImporterBase.ProcessStoreMappingsAsync``1(Smartstore.Core.DataExchange.Import.ImportExecuteContext,Smartstore.Data.DbContextScope,System.Collections.Generic.IEnumerable{Smartstore.Core.DataExchange.Import.ImportRow{``0}},System.String)">
            <summary>
            Imports store mappings.
            </summary>
            <param name="context">Import execution context.</param>
            <param name="scope">Scope for database commit.</param>
            <param name="batch">Batch of source data.</param>
            <returns>The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.EntityImporterBase.ProcessSlugsAsync``1(Smartstore.Core.DataExchange.Import.ImportExecuteContext,System.Collections.Generic.IEnumerable{Smartstore.Core.DataExchange.Import.ImportRow{``0}},System.String)">
            <summary>
            Imports URL records.
            </summary>
            <param name="context">Import execution context.</param>
            <param name="batch">Batch of source data.</param>
            <param name="entityName">Name of the entity for which the slugs are intended.</param>
            <returns>The task result contains the number of state entries written to the database.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.EntityImporterBase.AddMessage``1(Smartstore.Core.DataExchange.Import.ImportMessage,Smartstore.Net.Http.DownloadManagerItem,Smartstore.Core.DataExchange.Import.ImportExecuteContext)">
            <summary>
            Adds a message to <see cref="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.Result"/> and prevents from logging too many messages of the same reason.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Import.IDataImporter">
            <summary>
            Data importer contract.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IDataImporter.ImportAsync(Smartstore.Core.DataExchange.Import.DataImportRequest,System.Threading.CancellationToken)">
            <summary>
            Starts importing data. An <see cref="T:Smartstore.Core.DataExchange.Import.IEntityImporter"/> is responsible to save data to the database.
            </summary>
            <param name="request">Contains request data for importing.</param>
            <param name="cancelToken">A cancellation token to cancel the import.</param>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Import.IEntityImporter">
            <summary>
            Entity importer contract.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IEntityImporter.ExecuteAsync(Smartstore.Core.DataExchange.Import.ImportExecuteContext,System.Threading.CancellationToken)">
            <summary>
            Processes a batch of import data and saves it to the database.
            </summary>
            <param name="context">Contains all information to process import data.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportProfileService.GetImportDirectoryAsync(Smartstore.Core.DataExchange.ImportProfile,System.String,System.Boolean)">
            <summary>
            Gets a temporary directory for an import profile.
            </summary>
            <param name="profile">Import profile.</param>
            <param name="path">Optional relative or absolute path, e.g. "Content" to get the content subdirectories.</param>
            <param name="createIfNotExists">A value indicating whether the directory should be created if it does not exist.</param>
            <returns>Import directory.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportProfileService.GetImportFilesAsync(Smartstore.Core.DataExchange.ImportProfile,System.Boolean)">
            <summary>
            Gets import files for an import profile.
            </summary>
            <param name="profile">Import profile.</param>
            <param name="includeRelatedFiles">
            A value indicating whether to include related data files.
            A related data file contains, for example, tier price data that is to be imported together with the associated products.
            </param>
            <returns>List of import files.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportProfileService.GetNewProfileNameAsync(Smartstore.Core.DataExchange.ImportEntityType)">
            <summary>
            Gets a new profile name.
            </summary>
            <param name="entityType">Entity type</param>
            <returns>Suggestion for a new profile name.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportProfileService.InsertImportProfileAsync(System.String,System.String,Smartstore.Core.DataExchange.ImportEntityType)">
            <summary>
            Inserts an import profile.
            </summary>
            <param name="fileName">Name of the import file</param>
            <param name="name">Profile name</param>
            <param name="entityType">Entity type</param>
            <returns>Inserted import profile</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportProfileService.DeleteImportProfileAsync(Smartstore.Core.DataExchange.ImportProfile)">
            <summary>
            Deletes an import profile.
            </summary>
            <param name="profile">Import profile.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportProfileService.DeleteUnusedImportDirectoriesAsync">
            <summary>
            Deletes import directories that are no longer used by any import profile.
            </summary>
            <returns>Number of deleted directories.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportProfileService.GetEntityPropertiesLabels(Smartstore.Core.DataExchange.ImportEntityType)">
            <summary>
            Gets the localized label of all entity properties.
            </summary>
            <param name="entityType">Import entity type.</param>
            <returns>Entity property labels. The key is the property name and the value is the localized label.</returns>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Import.IMediaImporter">
            <summary>
            Helper to import images (like product and category images) in a performant way.
            Images are downloaded if <see cref="P:Smartstore.Net.Http.DownloadManagerItem.Url"/> is specified and
            they will not be imported if they already exist (duplicate check).
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.IMediaImporter.MessageHandler">
            <summary>
            A handler that is called when reportable events such as errors occur.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IMediaImporter.CreateDownloadItem(Smartstore.IO.IDirectory,Smartstore.IO.IDirectory,Smartstore.Domain.BaseEntity,System.String,System.Object,System.Int32,System.Collections.Generic.HashSet{System.String},System.Int32)">
            <summary>
            Creates a download manager item.
            </summary>
            <param name="imageDirectory">
            Directory with images to be imported. 
            In that case, the images in the import file are referenced by file path (absolute or relative).
            </param>
            <param name="downloadDirectory">Directory in which the downloaded images will be saved.</param>
            <param name="entity">The entity to which the file belongs. E.g. <see cref="T:Smartstore.Core.Catalog.Products.Product"/>, <see cref="T:Smartstore.Core.Catalog.Categories.Category"/> etc.</param>
            <param name="urlOrPath">URL or path to download.</param>
            <param name="state">Any state to identify the source later after batch save. E.g. <see cref="T:Smartstore.Core.DataExchange.Import.ImportRow`1"/> etc.</param>
            <param name="displayOrder">Display order of the item.</param>
            <param name="fileNameLookup">Lookup for existing file names to avoid name duplicates.</param>
            <param name="maxFileNameLength">Max length of generated file names. <c>int.MaxValue</c> to not truncate file names.</param>
            <returns>Download manager item or <c>null</c> if none could be created.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IMediaImporter.ImportMediaFilesAsync``1(Smartstore.Data.DbContextScope,System.Collections.Generic.ICollection{Smartstore.Net.Http.DownloadManagerItem},Smartstore.Core.Content.Media.MediaFolderNode,System.Action{Smartstore.Net.Http.DownloadManagerItem,System.Int32},System.Func{Smartstore.Net.Http.DownloadManagerItem,System.IO.Stream,System.Threading.Tasks.Task{System.Boolean}},System.Boolean,Smartstore.Core.Content.Media.DuplicateFileHandling,System.Threading.CancellationToken)">
            <summary>
            Generic method that imports a batch of media files assigned to entities with a 1:1 relationship to media files.
            </summary>
            <typeparam name="T">The type of entity for which the file are imported.</typeparam>
            <param name="items">Collection of files to be imported. Files are downloaded if <see cref="P:Smartstore.Net.Http.DownloadManagerItem.Url"/> is specified.</param>
            <param name="album">Media album to be assigned to the imported files.</param>
            <param name="assignMediaFileHandler">Callback function to assign the imported media file to the designated entity.</param>
            <param name="checkAssignedMediaFileHandler">Callback function to check if the file to be imported is already assigned to the designated entity.</param>
            <param name="checkExistingFile">Defines whether to check for existing files in the same media folder.</param>
            <param name="duplicateFileHandling">A value indicating how to handle duplicate images.</param>
            <returns>Number of actually imported files</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IMediaImporter.ImportMediaFilesManyAsync(Smartstore.Data.DbContextScope,System.Collections.Generic.ICollection{Smartstore.Net.Http.DownloadManagerItem},Smartstore.Core.Content.Media.MediaFolderNode,Smartstore.Collections.Multimap{System.Int32,Smartstore.Core.Content.Media.IMediaFile},System.Func{Smartstore.Core.Content.Media.MediaFile,Smartstore.Net.Http.DownloadManagerItem,Smartstore.Core.Content.Media.IMediaFile},Smartstore.Core.Content.Media.DuplicateFileHandling,System.Threading.CancellationToken)">
            <summary>
            Generic method that imports a batch of media files assigned to entities with a 1:n relationship to media files (e.g. <see cref="T:Smartstore.Core.Catalog.Products.Product"/> --&gt; <see cref="T:Smartstore.Core.Catalog.Products.ProductMediaFile"/>).
            </summary>
            <param name="items">Collection of files to be imported. Files are downloaded if <see cref="P:Smartstore.Net.Http.DownloadManagerItem.Url"/> is specified.</param>
            <param name="album">Media album to be assigned to the imported files.</param>
            <param name="existingFiles">Map of already assigned media files.</param>
            <param name="assignMediaFileHandler">
                Callback function to assign imported files to designated entities which derive from IMediaFile (e.g. <see cref="T:Smartstore.Core.Catalog.Products.ProductMediaFile"/>).
                Returns the assigned media file so it can be added to the existing files dictionary (so that it won't be imported again).
            </param>
            <param name="duplicateFileHandling">A value indicating how to handle duplicate images.</param>
            <returns>Number of actually imported files</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IMediaImporter.ImportProductImagesAsync(Smartstore.Data.DbContextScope,System.Collections.Generic.ICollection{Smartstore.Net.Http.DownloadManagerItem},Smartstore.Core.Content.Media.DuplicateFileHandling,System.Threading.CancellationToken)">
            <summary>
            Imports a batch of product images.
            </summary>
            <param name="items">Collection of product images to be imported. Images are downloaded if <see cref="P:Smartstore.Net.Http.DownloadManagerItem.Url"/> is specified.</param>
            <param name="duplicateFileHandling">A value indicating how to handle duplicate images.</param>
            <returns>Number of new images.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IMediaImporter.ImportProductImagesAsync(Smartstore.Core.Catalog.Products.Product,System.Collections.Generic.ICollection{Smartstore.Core.Content.Media.FileBatchSource},Smartstore.Core.Content.Media.DuplicateFileHandling,System.Threading.CancellationToken)">
            <summary>
            Imports a batch of product images.
            </summary>
            <param name="product">Product entity.</param>
            <param name="items">
            Collection of product images to be imported.
            Existing files can be overwritten by passing a dictionary{string},{oblect} for <see cref="P:Smartstore.Core.Content.Media.FileBatchSource.State"/>
            using key "MediaFileId" and value <see cref="T:Smartstore.Core.Content.Media.MediaFile"/> identifier.
            </param>
            <param name="duplicateFileHandling">A value indicating how to handle duplicate images.</param>
            <returns>Number of new images.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IMediaImporter.ImportCategoryImagesAsync(Smartstore.Data.DbContextScope,System.Collections.Generic.ICollection{Smartstore.Net.Http.DownloadManagerItem},Smartstore.Core.Content.Media.DuplicateFileHandling,System.Threading.CancellationToken)">
            <summary>
            Imports a batch of category images.
            </summary>
            <param name="items">Collection of category images to be imported. Images are downloaded if <see cref="P:Smartstore.Net.Http.DownloadManagerItem.Url"/> is specified.</param>
            <param name="duplicateFileHandling">A value indicating how to handle duplicate images.</param>
            <returns>Number of new images.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IMediaImporter.ImportManufacturerImagesAsync(Smartstore.Data.DbContextScope,System.Collections.Generic.ICollection{Smartstore.Net.Http.DownloadManagerItem},Smartstore.Core.Content.Media.DuplicateFileHandling,System.Threading.CancellationToken)">
            <summary>
            Imports a batch of manufacturer images.
            </summary>
            <param name="items">Collection of manufacturer images to be imported. Images are downloaded if <see cref="P:Smartstore.Net.Http.DownloadManagerItem.Url"/> is specified.</param>
            <param name="duplicateFileHandling">A value indicating how to handle duplicate images.</param>
            <returns>Number of new images.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IMediaImporter.ImportCustomerAvatarsAsync(Smartstore.Data.DbContextScope,System.Collections.Generic.ICollection{Smartstore.Net.Http.DownloadManagerItem},Smartstore.Core.Content.Media.DuplicateFileHandling,System.Threading.CancellationToken)">
            <summary>
            Imports a batch of customer avatars.
            </summary>
            <param name="items">Collection of customer avatars to be imported. Images are downloaded if <see cref="P:Smartstore.Net.Http.DownloadManagerItem.Url"/> is specified.</param>
            <param name="duplicateFileHandling">A value indicating how to handle duplicate images.</param>
            <returns>Number of new images.</returns>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.TotalRows">
            <summary>
            Total number of rows.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.TotalColumns">
            <summary>
            Total number of columgs.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.CurrentSegment">
            <summary>
            Number of current segment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.CurrentSegmentFirstRowIndex">
            <summary>
            Index of the first row in current segment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.TotalSegments">
            <summary>
            Total number of segments.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.IsLastSegment">
            <summary>
            Gets a value indicating whether the current segment is the last one.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.HasColumn(System.String,System.Boolean)">
            <summary>
            Determines whether a specific column exists in the underlying data table.
            </summary>
            <param name="name">The name of the column to find.</param>
            <param name="withAnyIndex">
            	If <c>true</c> and a column with the passed <paramref name="name"/> does not exist,
            	this method tests for the existence of any indexed column with the same name.
            </param>
            <returns><c>true</c> if the column exists, <c>false</c> otherwise.</returns>
            <remarks>This method takes mapped column names into account.</remarks>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.HasColumn(System.String,System.String)">
            <summary>
            Determines whether the column <c>name[index]</c> exists in the underlying data table.
            </summary>
            <param name="name">The name of the column to find.</param>
            <param name="index">The index of the column.</param>
            <returns><c>true</c> if the column exists, <c>false</c> otherwise.</returns>
            <remarks>This method takes mapped column names into account.</remarks>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.IsIgnored(System.String)">
            <summary>
            Indicates whether to ignore the property that is mapped to <paramref name="columnName"/>.
            </summary>
            <param name="columnName">The name of the column.</param>
            <returns><c>true</c> ignore, <c>false</c> do not ignore.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.IsIgnored(System.String,System.String)">
            <summary>
            Indicates whether to ignore the property that is mapped to <paramref name="columnName"/>.
            </summary>
            <param name="columnName">The name of the column.</param>
            <param name="index">The index of the column.</param>
            <returns><c>true</c> ignore, <c>false</c> do not ignore.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.GetColumnIndexes(System.String)">
            <summary>
            Returns an array of exisiting index names for a column.
            </summary>
            <param name="name">The name of the columns without index qualification.</param>
            <returns>An array of index names.</returns>
            <remarks>
            If following columns exist in source: Attr[Color], Attr[Size]
            This method returns: <code>string[] { "Color", "Size" }.</code> 
            </remarks>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.IImportDataSegmenterConsumer.GetCurrentBatch``1">
            <summary>
            Gets the current batch of data (all rows of current segment).
            </summary>
            <returns>Current batch of data.</returns>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.TotalRows">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.TotalColumns">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.CurrentSegment">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.CurrentSegmentFirstRowIndex">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.TotalSegments">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.IsLastSegment">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.HasColumn(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.HasColumn(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.IsIgnored(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.IsIgnored(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.GetColumnIndexes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportDataSegmenter.GetCurrentBatch``1">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.CancelToken">
            <summary>
            A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.DataTable">
            <summary>
            The data source (CSV, Excel etc.).
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.ColumnMap">
            <summary>
            Mapping information between database and data source.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.DataSegmenter">
            <summary>
            The data segmenter that provides batched data to be imported.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.UpdateOnly">
            <summary>
            A value indicating whether to only update existing records.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.ClearCache">
            <summary>
            A value indicating whether to clear the entire cache at the end of the import.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.File">
            <summary>
            Infos about the import file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.UtcNow">
            <summary>
            Date and time at the beginning of the import.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.ImportDirectory">
            <summary>
            The import directory.
            E.g. App_Data\Tenants\Default\ImportProfiles\{my-import-profile}\Content.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.ImageDownloadDirectory">
            <summary>
            The directory for downloading images during import.
            E.g. App_Data\Tenants\Default\ImportProfiles\{my-import-profile}\Content\DownloadedImage.
            If the import file contains URLs for images, they will be downloaded to this directory.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.ImageDirectory">
            <summary>
            The directory with the images to be imported.
            E.g. App_Data\Tenants\Default\ImportProfiles\{my-import-profile}\my-images.
            If the import file contains relative paths for images, then they are expected to be in that directory.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.Log">
            <summary>
            Logger instance to log information into the import log file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.KeyFieldNames">
            <summary>
            Name of key fields to identify existing records for updating.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.Languages">
            <summary>
            All active languages.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.Stores">
            <summary>
            All stores.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.CustomProperties">
            <summary>
            Use this dictionary for any custom data required along the import.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.Result">
            <summary>
            Gets or sets the result of the import.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.ExtraData">
            <summary>
            Extra import configuration data.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExecuteContext.Abort">
            <summary>
            A value indicating whether and how to abort the import.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportExecuteContext.SetProgressAsync(System.Int32,System.Int32)">
            <summary>
            Allows to set a progress message.
            </summary>
            <param name="value">Progress value.</param>
            <param name="maximum">Progress maximum.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportExecuteContext.SetProgressAsync(System.String)">
            <summary>
            Allows to set a progress message.
            </summary>
            <param name="message">Output message.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportExecuteContext.GetCustomProperty``1(System.String)">
            <summary>
            Gets a custom property. Creates it if it does not exist.
            </summary>
            <param name="key">Key\name of the custom property.</param>
            <returns>Custom property.</returns>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportExtraData.NumberOfPictures">
            <summary>
            Number of images per object to be imported.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportFile.RelatedType">
            <summary>
            Related entity type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportFile.Label">
            <summary>
            File label text.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Import.ImportFile.IsCsv">
            <summary>
            Gets a value indicating whether the file has an CSV file extension.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.Import.ImportProfileService._ignoreResourceKeys">
            <summary>
            Names of properties for which no localization exists.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.Import.ImportProfileService._otherResourceKeys">
            <summary>
            Mapping of property name to string ressource key.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportRow`1.HasDataValue(System.String,System.Boolean)">
            <summary>
            Determines whether a specific column exists in the underlying data table 
            and contains a non-null, convertible value.
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="withAnyIndex">
            	If <c>true</c> and a column with the passed <paramref name="columnName"/> does not exist,
            	this method seeks for any indexed column with the same name.
            </param>
            <returns><c>true</c> if the column exists and contains a value, <c>false</c> otherwise</returns>
            <remarks>This method takes mapped column names into account.</remarks>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportRow`1.HasDataValue(System.String,System.String)">
            <summary>
            Determines whether the column <c>name[index]</c> exists in the underlying data table 
            and contains a non-null, convertible value.
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="index">The index of the column</param>
            <returns><c>true</c> if the column exists and contains a value, <c>false</c> otherwise</returns>
            <remarks>This method takes mapped column names into account.</remarks>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportUtility.ZeroToNull(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a raw import value and returns <c>null</c> for a value of zero.
            </summary>
            <param name="value">Import value.</param>
            <param name="culture">Culture info.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportUtility.ValidateXml(System.String,System.Xml.XmlReaderSettings)">
            <summary>
            A simple XML validation by reading the first XML nodes.
            </summary>
            <param name="xml">Raw XML.</param>
            <returns><c>true</c> XML is valid otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportUtility.ValidateJson(System.String)">
            <summary>
            A simple JSON validation by reading the first JSON tokens.
            </summary>
            <param name="json">Raw JSON.</param>
            <returns><c>true</c> JSON is valid otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Import.ImportUtility.ValidateXmlOrJson(System.String@)">
            <summary>
            A simple validation of either XML or JSON formatted string.
            </summary>
            <param name="xmlOrJson">XML or JSON formatted string.</param>
            <returns><c>true</c> valid XML ot JSON otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Import.CustomerImporter.ImporterCargoData">
            <summary>
            Perf: contains data that is loaded once per import.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.DataExchangeSettings.MaxFileNameLength">
            <summary>
            The maximum length of file names (in characters) of files created by the export framework.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.DataExchangeSettings.ImageImportFolder">
            <summary>
            Relative path to a folder with images to be imported.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.DataExchangeSettings.ImageDownloadTimeout">
            <summary>
            The timeout for image download per entity in minutes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.DataExchangeSettings.ImportCompletionEmail">
            <summary>
            Specifies whether to send an email when an import has completed.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Csv.ParseErrorAction">
            <summary>
            Specifies the action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.Csv.ParseErrorAction.RaiseEvent">
            <summary>
            Raises the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.Csv.ParseErrorAction.AdvanceToNextLine">
            <summary>
            Tries to advance to next line.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.Csv.ParseErrorAction.ThrowException">
            <summary>
            Throws an exception.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Csv.MissingFieldAction">
            <summary>
            Specifies the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.Csv.MissingFieldAction.ParseError">
            <summary>
            Treat as a parsing error.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.Csv.MissingFieldAction.ReplaceByEmpty">
            <summary>
            Replaces by an empty value.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.Csv.MissingFieldAction.ReplaceByNull">
            <summary>
            Replaces by a null value (<see langword="null"/>).
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.ExcelFriendlyConfiguration">
            <summary>
            Gets an Excel friendly configuration where the result can be directly edited by Excel
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.PresetCharacters">
            <summary>
            Gets an array with preset characters
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.Comment">
            <summary>
            Gets the comment character indicating that a line is commented out (default: #).
            </summary>
            <value>The comment character indicating that a line is commented out.</value>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.Escape">
            <summary>
            Gets the escape character letting insert quotation characters inside a quoted field (default: ").
            </summary>
            <value>The escape character letting insert quotation characters inside a quoted field.</value>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.Delimiter">
            <summary>
            Gets the delimiter character separating each field (default: ;).
            </summary>
            <value>The delimiter character separating each field.</value>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.Quote">
            <summary>
            Gets the quotation character wrapping every field (default: ").
            </summary>
            <value>The quotation character wrapping every field.</value>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.QuoteString">
            <summary>
            Gets the concatenation of escape and quote char
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.HasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line (default: true).
            </summary>
            <value><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.TrimValues">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed (default: false).
            </summary>
            <value><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.NullValue">
            <summary>
            Contains the value which denotes a DbNull-value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.DefaultParseErrorAction">
            <summary>
            Gets or sets the default action to take when a parsing error has occured.
            </summary>
            <value>The default action to take when a parsing error has occured.</value>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.MissingFieldAction">
            <summary>
            Gets or sets the action to take when a field is missing.
            </summary>
            <value>The action to take when a field is missing.</value>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.SupportsMultiline">
            <summary>
            Gets or sets a value indicating if the reader supports multiline fields (default: true).
            </summary>
            <value>A value indicating if the reader supports multiline field.</value>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.SkipEmptyLines">
            <summary>
            Gets or sets a value indicating if the reader will skip empty lines (default: true).
            </summary>
            <value>A value indicating if the reader will skip empty lines.</value>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.DefaultHeaderName">
            <summary>
            Gets or sets the default header name when it is an empty string or only whitespaces (default: Column).
            The header index will be appended to the specified name.
            </summary>
            <value>The default header name when it is an empty string or only whitespaces.</value>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Csv.CsvDataReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to CSV data.  
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Csv.CsvDataReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the CsvDataReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Csv.CsvDataReader.#ctor(System.IO.TextReader,Smartstore.Core.DataExchange.Csv.CsvConfiguration)">
            <summary>
            Initializes a new instance of the CsvDataReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Csv.CsvDataReader.GetFieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
            <returns>The field headers or an empty array if headers are not supported.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvDataReader.CurrentRowIndex">
            <summary>
            Gets the current row index in the CSV file (0-based).
            </summary>
            <value>The current row index in the CSV file.</value>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Csv.CsvDataReader.GetRawData">
            <summary>
            Gets the current row's raw CSV data.
            </summary>
            <returns>The current raw CSV data.</returns>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvDataReader.Item(System.String)">
            <summary>
            Gets the field with the specified name. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Csv.CsvDataReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="index"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Csv.CsvWriter">
            <summary>
            Simple utility class used to write CSV files.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Csv.CsvWriter.WriteFields(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a sequence of fields to the CSV file. The fields
            may get quotes added to it.
            When all fields are written for a row,
            <see cref="M:Smartstore.Core.DataExchange.Csv.CsvWriter.NextRow" /> must be called
            to complete writing of the current row.
            </summary>
            <param name="fields">The fields to write.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Csv.CsvWriter.WriteFields(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Writes a sequence of fields to the CSV file. This will
            ignore any need to quote and ignore the
            <see cref="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.QuoteAllFields"/>
            and just quote based on the shouldQuote
            parameter.
            When all fields are written for a row,
            <see cref="M:Smartstore.Core.DataExchange.Csv.CsvWriter.NextRow" /> must be called
            to complete writing of the current row.
            </summary>
            <param name="fields">The fields to write.</param>
            <param name="shouldQuote">True to quote the fields, otherwise false.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Csv.CsvWriter.WriteField(System.String)">
            <summary>
            Writes the field to the CSV file. The field
            may get quotes added to it.
            When all fields are written for a row,
            <see cref="M:Smartstore.Core.DataExchange.Csv.CsvWriter.NextRow" /> must be called
            to complete writing of the current row.
            </summary>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Csv.CsvWriter.WriteField(System.String,System.Boolean)">
            <summary>
            Writes the field to the CSV file. This will
            ignore any need to quote and ignore the
            <see cref="P:Smartstore.Core.DataExchange.Csv.CsvConfiguration.QuoteAllFields"/>
            and just quote based on the shouldQuote
            parameter.
            When all fields are written for a row,
            <see cref="M:Smartstore.Core.DataExchange.Csv.CsvWriter.NextRow" /> must be called
            to complete writing of the current row.
            </summary>
            <param name="field">The field to write.</param>
            <param name="shouldQuote">True to quote the field, otherwise false.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Csv.CsvWriter.NextRow">
            <summary>
            Ends writing of the current row
            and starts a new row.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.DataExchangeAbortion">
            <summary>
            Data exchange abortion types.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.DataExchangeAbortion.None">
            <summary>
            No abortion. Go on with processing.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.DataExchangeAbortion.Soft">
            <summary>
            Break item processing but not the rest of the execution. Typically used for demo limitations.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.DataExchangeAbortion.Hard">
            <summary>
            Break processing immediately.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.DataExchangeCompletionEmail.Always">
            <summary>
            Always send a completion email.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.DataExchangeCompletionEmail.OnError">
            <summary>
            Only send a completion email if an error occurred.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.DataExchangeCompletionEmail.Never">
            <summary>
            Never send a completion email.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportDeployment">
            <summary>
            Represents an export deployment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.ProfileId">
            <summary>
            The export profile identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.Profile">
            <summary>
            Gets or sets the export profile.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.Name">
            <summary>
            Name of the deployment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.Enabled">
            <summary>
            A value indicating whether the deployment is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.ResultInfo">
            <summary>
            XML formatted data with information about the last deployment result.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.DeploymentTypeId">
            <summary>
            The deployment type identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.DeploymentType">
            <summary>
            The deployment type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.Url">
            <summary>
            Deployment URL.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.HttpTransmissionTypeId">
            <summary>
            The type identifier of how to transmit via HTTP.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.HttpTransmissionType">
            <summary>
            The type of how to transmit via HTTP.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.FileSystemPath">
            <summary>
            The file system path.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.SubFolder">
            <summary>
            Path of a subfolder.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.EmailAddresses">
            <summary>
            Multiple email addresses can be separated by commas.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.EmailSubject">
            <summary>
            Subject of the email.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.EmailAccountId">
            <summary>
            Identifier of the email account.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.PassiveMode">
            <summary>
            A value indicating whether to use FTP active or passive mode.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportDeployment.UseSsl">
            <summary>
            A value indicating whether to use SSL.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportEntityType">
            <summary>
            Represents export entity types.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.RelatedEntityType">
            <summary>
            Represents related export entity types (data without own export provider or importer).
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportDeploymentType">
            <summary>
            Represents export deployment types.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportHttpTransmissionType">
            <summary>
            Represents export HTTP transmission types.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportDescriptionMerging">
            <summary>
            Controls the merging of various data as product description during an export.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportAttributeValueMerging">
            <summary>
            Controls the merging of various data while exporting attribute combinations as products.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportFeatures">
            <summary>
            Controls data processing and projection items supported by an export provider.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.CreatesInitialPublicDeployment">
            <summary>
            A value indicating whether to automatically create a file based public deployment when an export profile is created.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.CanOmitGroupedProducts">
            <summary>
            A value indicating whether to offer option to include\exclude grouped products.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.CanProjectAttributeCombinations">
            <summary>
            A value indicating whether to offer option to export attribute combinations as products.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.CanProjectDescription">
            <summary>
            A value indicating whether to offer further options to manipulate the product description.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.OffersBrandFallback">
            <summary>
            A value indicating whether to offer option to enter a brand fallback.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.CanIncludeMainPicture">
            <summary>
            A value indicating whether to offer option to set a picture size and to get the URL of the main image.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.UsesSkuAsMpnFallback">
            <summary>
            A value indicating whether to use SKU as manufacturer part number if MPN is empty.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.OffersShippingTimeFallback">
            <summary>
            A value indicating whether to offer option to enter a shipping time fallback.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.OffersShippingCostsFallback">
            <summary>
            A value indicating whether to offer option to enter a shipping costs fallback and a free shipping threshold.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.CanOmitCompletionMail">
            <summary>
            A value indicating whether to not automatically send a completion email.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.UsesAttributeCombination">
            <summary>
            A value indicating whether to provide additional data of attribute combinations.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.UsesAttributeCombinationParent">
            <summary>
            A value indicating whether to export attribute combinations as products including parent product. Only effective with CanProjectAttributeCombinations.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DataExchange.ExportFeatures.UsesRelatedDataUnits">
            <summary>
            A value indicating whether to provide extra data units for related data.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportOrderStatusChange">
            <summary>
            Possible order status change after exporting orders.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportFilter">
            <summary>
            Contains data to filter entities during an export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.StoreId">
            <summary>
            Store identifier. 0 to load all records.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.CreatedFrom">
            <summary>
            Entity created from.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.CreatedTo">
            <summary>
            Entity created to.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.IsPublished">
            <summary>
            A value indicating whether to load only published or non published entities.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.IdMinimum">
            <summary>
            Minimum product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.IdMaximum">
            <summary>
            Maximum product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.PriceMinimum">
            <summary>
            Minimum price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.PriceMaximum">
            <summary>
            Maximum price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.AvailabilityMinimum">
            <summary>
            Minimum product availability.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.AvailabilityMaximum">
            <summary>
            Maximum product availability.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.WithoutCategories">
            <summary>
            A value indicating whether to load products without any category mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.CategoryIds">
            <summary>
            Category identifiers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.IncludeSubCategories">
            <summary>
            A value indicating whether products from subcategories should also be filtered.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.WithoutManufacturers">
            <summary>
            A value indicating whether to load products without any manufacturer mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.ManufacturerId">
            <summary>
            Manufacturer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.ProductTagId">
            <summary>
            Identifiers of product tag.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.FeaturedProducts">
            <summary>
            A value indicating whether to load products that are marked as featured (relates only to categories and manufacturers).
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.ProductType">
            <summary>
            Filter by product type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.Visibility">
            <summary>
            Filter by visibility.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.OrderStatusIds">
            <summary>
            Filter by order status.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.PaymentStatusIds">
            <summary>
            Filter by payment status.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.ShippingStatusIds">
            <summary>
            Filter by shipping status.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.IsActiveCustomer">
            <summary>
            Filter by active or inactive customers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.IsTaxExempt">
            <summary>
            Filter by tax exempt customers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.CustomerRoleIds">
            <summary>
            Identifiers of customer roles.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.BillingCountryIds">
            <summary>
            Filter by billing country identifiers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.ShippingCountryIds">
            <summary>
            Filter by shipping country identifiers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.LastActivityFrom">
            <summary>
            Filter by last activity date from.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.LastActivityTo">
            <summary>
            Filter by last activity date to.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.HasSpentAtLeastAmount">
            <summary>
            Filter by at least spent amount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.HasPlacedAtLeastOrders">
            <summary>
            Filter by at least placed orders.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.IsActiveSubscriber">
            <summary>
            Filter by active or inactive subscriber.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.WorkingLanguageId">
            <summary>
            Filter by language.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportFilter.ShoppingCartTypeId">
            <summary>
            Filter by shopping cart type identifier.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportProfile">
            <summary>
            Represents an export profile.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.Name">
            <summary>
            The name of the profile.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.FolderName">
            <summary>
            The name of the export folder, e.g. 'smartstoreproductcsv'.
            All export files created for a profile are saved in this folder.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.FileNamePattern">
            <summary>
            The pattern for file names.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.SystemName">
            <summary>
            The system name of the profile.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.ProviderSystemName">
            <summary>
            The system name of the export provider.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.IsSystemProfile">
            <summary>
            A value indicating whether the profile is an unremovable system profile.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.Enabled">
            <summary>
            A value indicating whether the export profile is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.ExportRelatedData">
            <summary>
            A value indicating whether the export related data.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.Filtering">
            <summary>
            XML formatted data with filtering information.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.Projection">
            <summary>
            XML formatted data with projection information.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.ProviderConfigData">
            <summary>
            XML formatted data with provider specific configuration data.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.ResultInfo">
            <summary>
            XML formatted data with information about the last export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.Offset">
            <summary>
            The number of records to be skipped.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.Limit">
            <summary>
            Number of records to be loaded per database round-trip.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.BatchSize">
            <summary>
            The maximum number of records of one processed batch.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.PerStore">
            <summary>
            A value indicating whether to start a separate run-through for each store.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.EmailAccountId">
            <summary>
            Email Account identifier used to send a notification message when an export completes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.CompletedEmailAddresses">
            <summary>
            Email addresses where to send the notification message.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.CreateZipArchive">
            <summary>
            A value indicating whether to combine and compress the export files in a ZIP archive.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.Cleanup">
            <summary>
            A value indicating whether to delete unneeded files after deployment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.TaskId">
            <summary>
            The task identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.Task">
            <summary>
            Gets or sets the task descriptor.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProfile.Deployments">
            <summary>
            Gets or sets the export deployments.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.ExportProfile.GetDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.ExportProfile.GetDisplayNameMemberName">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ExportProjection">
            <summary>
            Contains data projected onto an export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.StoreId">
            <summary>
            Store identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.LanguageId">
            <summary>
            The language to be applied to the export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.CurrencyId">
            <summary>
            The currency to be applied to the export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.CustomerId">
            <summary>
            Customer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.DescriptionMergingId">
            <summary>
            Description merging identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.DescriptionMerging">
            <summary>
            Decription merging.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.DescriptionToPlainText">
            <summary>
            A value indicating whether to convert HTML decription to plain text.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.AppendDescriptionText">
            <summary>
            Comma separated text to append to the decription.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.RemoveCriticalCharacters">
            <summary>
            Remove critical characters from the description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.CriticalCharacters">
            <summary>
            Comma separated list of critical characters.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.PriceType">
            <summary>
            The price type for calculating the product price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.ConvertNetToGrossPrices">
            <summary>
            A value indicating whether to convert net to gross prices.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.Brand">
            <summary>
            Fallback for product brand.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.NumberOfMediaFiles">
            <summary>
            Number of images per object to be exported.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.PictureSize">
            <summary>
            The size of exported pictures in pixel.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.ShippingTime">
            <summary>
            Fallback for shipping time.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.ShippingCosts">
            <summary>
            Fallback for shipping costs.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.FreeShippingThreshold">
            <summary>
            Free shipping threshold.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.AttributeCombinationAsProduct">
            <summary>
            A value indicating whether to export attribute combinations as products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.AttributeCombinationValueMergingId">
            <summary>
            Identifier for merging attribute values of attribute combinations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.AttributeCombinationValueMerging">
            <summary>
            Merging attribute values of attribute combinations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.NoGroupedProducts">
            <summary>
            A value indicating whether to export grouped products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.OnlyIndividuallyVisibleAssociated">
            <summary>
            A value indicating whether to ignore associated products with <see cref="P:Smartstore.Core.Catalog.Products.Product.Visibility"/> set to <see cref="F:Smartstore.Core.Catalog.Products.ProductVisibility.Hidden"/> during export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.OrderStatusChangeId">
            <summary>
            Identifier of the new state of order after exporting them.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.OrderStatusChange">
            <summary>
            Gets or sets the new state of orders.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ExportProjection.NoBundleProducts">
            <summary>
            A value indicating whether to export bundle products.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ImportEntityType">
            <summary>
            Supported entity types
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.ImportProfile">
            <summary>
            Represents an import profile.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.Name">
            <summary>
            The name of the profile.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.FolderName">
            <summary>
            The name of the folder (file system).
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.FileTypeId">
            <summary>
            The identifier of the file type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.FileType">
            <summary>
            The file type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.EntityTypeId">
            <summary>
            The identifier of the entity type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.EntityType">
            <summary>
            The entity type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.Enabled">
            <summary>
            A value indicating whether the profile is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.ImportRelatedData">
            <summary>
            A value indicating whether to import related data.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.Skip">
            <summary>
            Number of records to bypass.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.Take">
            <summary>
            Maximum number of records to return.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.UpdateOnly">
            <summary>
            Whether to only update existing data.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.KeyFieldNames">
            <summary>
            Name of key fields to identify existing records during import.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.FileTypeConfiguration">
            <summary>
            File type specific configuration.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.ExtraData">
            <summary>
            XML formatted data with extra data.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.ColumnMapping">
            <summary>
            Mapping of import columns.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.ResultInfo">
            <summary>
            XML formatted data with information about the last import.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.TaskId">
            <summary>
            The task identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.ImportProfile.Task">
            <summary>
            Gets or sets the task descriptor.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.ImportProfile.GetDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.ImportProfile.GetDisplayNameMemberName">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.DataExchange.SyncMapping">
            <summary>
            Holds info about a synchronization operation with an external system.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.SyncMapping.EntityId">
            <summary>
            Gets or sets the entity identifier in Smartstore.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.SyncMapping.SourceKey">
            <summary>
            Gets or sets the entity's key in the external application.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.SyncMapping.EntityName">
            <summary>
            Gets or sets a name representing the entity type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.SyncMapping.ContextName">
            <summary>
            Gets or sets a name for the external application.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.SyncMapping.SourceHash">
            <summary>
            Gets or sets an optional content hash reflecting the source model at the time of last sync.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.SyncMapping.CustomInt">
            <summary>
            Gets or sets a custom integer value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.SyncMapping.CustomString">
            <summary>
            Gets or sets a custom string value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.SyncMapping.CustomBool">
            <summary>
            Gets or sets a custom bool value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.SyncMapping.SyncedOnUtc">
            <summary>
            Gets or sets the date of the last sync operation.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Export.Events.RowExportingEvent">
            <summary>
            An event that is fired before an entity is exported.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Events.RowExportingEvent.Row">
            <summary>
            A dynamic object which wraps and extents the actual entity, e.g. <see cref="T:Smartstore.Core.Catalog.Products.Product"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Events.RowExportingEvent.EntityType">
            <summary>
            The entity type to be exported.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Events.RowExportingEvent.ExportRequest">
            <summary>
            Request of the export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Events.RowExportingEvent.ExecuteContext">
            <summary>
            Context of the export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExporter.PublicDirectoryName">
            <summary>
            The name of the wwwroot subfolder where export files are to be exported to be publicly accessible.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExporter.PageSize">
            <summary>
            The page size for loading data from database during export.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.DataExporter.GetDataUnitsForRelatedEntities(Smartstore.Core.DataExchange.Export.Internal.DataExporterContext)">
            <summary>
            Related data is data without own export provider or importer.
            For a flat formatted export it has to be exported together with metadata to know what to be edited.
            Extra data units are only exported for file based exports, not for memory based on-the-fly exports.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.DataExporter.Convert(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.DataExchange.Export.Internal.DataExporterContext)">
            <summary>
            The main method to create expando objects for a product to be exported.
            Returns several objects if variant combinations are to be exported as products.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.DataExporter.ToDynamic(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.DataExchange.Export.Internal.DataExporterContext,System.String,System.Nullable{Smartstore.Core.Common.Money})">
            <summary>
            Creates an expando object with the most important general properties of a product such as the name and description.
            This method is used for entities where products are to be exported as related data, e.g. order items.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.DataExporter.ToDynamic(Smartstore.Core.Catalog.Products.Product,System.Boolean,Smartstore.Core.DataExchange.Export.Internal.DataExporterContext,Smartstore.Core.DataExchange.Export.DynamicProductContext)">
            <summary>
            Creates an expando object with all product properties.
            This method is used when exporting products and when exporting variant combinations as products.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.DataExporter.ApplyMediaFiles(System.Object,Smartstore.Core.Catalog.Products.Product,Smartstore.Core.DataExchange.Export.Internal.DataExporterContext,Smartstore.Core.DataExchange.Export.DynamicProductContext)">
            <summary>
            Applies data of media files (product pictures) to an expando object.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.DataExporter.ApplyExportFeatures(System.Object,Smartstore.Core.Catalog.Products.Product,System.Collections.Generic.IEnumerable{Smartstore.Core.Catalog.Products.ProductMediaFile},Smartstore.Core.DataExchange.Export.Internal.DataExporterContext)">
            <summary>
            Applies extra data to an expando object.
            Export feature flags set by the export provider controls whether and what to be exported here.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.DataExporter.ApplyProductDescription(System.Object,Smartstore.Core.Catalog.Products.Product,Smartstore.Core.DataExchange.Export.Internal.DataExporterContext)">
            <summary>
            Applies the product description to an expando object.
            Projection settings controls in detail how the product description is to be exported here.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExportResult.Succeeded">
            <summary>
            A value indicating whether the export succeeded.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExportResult.LastError">
            <summary>
            Last error.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExportResult.Files">
            <summary>
            Files created by last export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExportResult.ExportDirectory">
            <summary>
            The path of the folder with the export files.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExportResult.ExportFileInfo.StoreId">
            <summary>
            Store identifier, can be 0.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExportResult.ExportFileInfo.FileName">
            <summary>
            Name of the export file including file extension, e.g. "1-7-0001-ordercsvexport.csv".
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExportResult.ExportFileInfo.Label">
            <summary>
            Short optional text that describes the content of the file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExportResult.ExportFileInfo.RelatedType">
            <summary>
            The related entity type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExportPreviewResult.Data">
            <summary>
            Preview data.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.DataExportPreviewResult.TotalRecords">
            <summary>
            Number of total records.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Deployment.DataDeploymentResult.Succeeded">
            <summary>
            A value indicating whether the deployment succeeded.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Deployment.DataDeploymentResult.LastError">
            <summary>
            Gets or sets the last error.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Deployment.DataDeploymentResult.LastExecutionUtc">
            <summary>
            Gets or sets the last execution date.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.Deployment.IFilePublisher.PublishAsync(Smartstore.Core.DataExchange.ExportDeployment,Smartstore.Core.DataExchange.Export.Deployment.ExportDeploymentContext,System.Threading.CancellationToken)">
            <summary>
            Publishes the result of a file based data export.
            </summary>
            <param name="deployment">Export deployment.</param>
            <param name="context">Deployment context.</param>
            <param name="cancelToken">Cancellation token.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.Deployment.ExportDeploymentContext.GetDeploymentFilesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a list of deployment files.
            </summary>
            <param name="deep">A value indicating whether to get the files from just the top directory or from all sub-directories as well.</param>
            <returns>List of deployment files.</returns>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Export.ExportConfigurationInfo">
            <summary>
            Serves information about export provider specific configuration.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportConfigurationInfo.ConfigurationWidget">
            <summary>
            Gets or sets the widget for the export provider specific configuration.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportConfigurationInfo.ModelType">
            <summary>
            Type of the view model.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.IExportDataSegmenterConsumer.TotalRecords">
            <summary>
            Total number of records.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportDataSegmenterConsumer.GetCurrentSegmentAsync">
            <summary>
            Gets current data segment.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportDataSegmenterConsumer.ReadNextSegmentAsync">
            <summary>
            Reads the next segment.
            </summary>
            <returns><c>true</c> succeeded, <c>false</c> failed.</returns>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.IExportDataSegmenterProvider.HasData">
            <summary>
            A value indicating whether there is data available.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.IExportDataSegmenterProvider.RecordPerSegmentCount">
            <summary>
            Gets or sets the record per segment counter.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataSegmenter`1.TotalRecords">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataSegmenter`1.RecordCount">
            <summary>
            Number of processed records.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataSegmenter`1.RecordPerSegmentCount">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataSegmenter`1.HasData">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportDataSegmenter`1.GetCurrentSegmentAsync">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportDataSegmenter`1.ReadNextSegmentAsync">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportDataSegmenter`1.OnDispose(System.Boolean)">
            <summary>
            Dispose and reset segmenter instance.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.ProfileId">
            <summary>
            Identifier of the export profile.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.Profile">
            <summary>
            The export profile.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.DataSegmenter">
            <summary>
            Provides the data to be exported.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.Store">
            <summary>
            The store context to be used for the export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.Customer">
            <summary>
            The customer context to be used for the export
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.Currency">
            <summary>
            The currency context to be used for the export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.Language">
            <summary>
            The language context to be used for the export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.Filter">
            <summary>
            Filter settings.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.Projection">
            <summary>
            Projection settings.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.Log">
            <summary>
            Logger to log information into the export log file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.Abort">
            <summary>
            Indicates whether and how to abort the export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.DataStreamId">
            <summary>
            Identifier of current data stream. Can be <c>null</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.DataStream">
            <summary>
            Stream used to write data to.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.ExtraDataUnits">
            <summary>
            List with extra data units/streams required by provider.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.MaxFileNameLength">
            <summary>
            The maximum allowed file name length.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.FileIndex">
            <summary>
            Index of current export file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.FileName">
            <summary>
            The name of the current export file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.ExportDirectory">
            <summary>
            The export directory.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.HasPublicDeployment">
            <summary>
            A value indicating whether the profile has a public deployment into "Exchange" folder.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.PublicDirectory">
            <summary>
            The public export directory. In general, this is a subfolder of <see cref="P:Smartstore.Core.DataExchange.Export.DataExporter.PublicDirectoryName"/>.
            <c>null</c> if the profile has no public deployment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.PublicDirectoryUrl">
            <summary>
            The URL of the public export directory. <c>null</c> if the profile has no public deployment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.ConfigurationData">
            <summary>
            Provider specific configuration data.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.CustomProperties">
            <summary>
            Use this dictionary for any custom data required along the export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.RecordsSucceeded">
            <summary>
            Number of successful processed records.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportExecuteContext.RecordsFailed">
            <summary>
            Number of failed records.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportExecuteContext.RecordException(System.Exception,System.Int32)">
            <summary>
            Processes an exception that occurred while exporting a record.
            </summary>
            <param name="entityId">Identifier of the current entity.</param>
            <param name="exception">Exception.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportExecuteContext.RecordOutOfMemoryException(System.OutOfMemoryException,System.Int32,Smartstore.Core.Localization.Localizer)">
            <summary>
            Processes an out-of-memory exception and hard aborts the export.
            </summary>
            <param name="exception">Out-of-memory exception.</param>
            <param name="entityId">Identifier of the current entity.</param>
            <param name="localizer">Localizer.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportExecuteContext.SetProgressAsync(System.String)">
            <summary>
            Allows to set a progress message.
            </summary>
            <param name="message">Output message.</param>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataUnit.Id">
            <summary>
            Your Id to identify this stream within a list of streams.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataUnit.DataStream">
            <summary>
            Stream used to write data to.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataUnit.RelatedType">
            <summary>
            The related entity type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataUnit.FileName">
            <summary>
            The name of the file to be created.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataUnit.Label">
            <summary>
            Short optional text that describes the content of the file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataUnit.DisplayInFileDialog">
            <summary>
            A value indicating whether to display the file in the profile file dialog.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportDataUnit.RecordsSucceeded">
            <summary>
            Number of successful processed records.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Export.ExportFeaturesAttribute">
            <summary>
            Declares data processing types supported by an export provider.
            Projection type controls whether to display corresponding projection fields while editing an export profile.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportFileStream.#ctor(System.IO.Stream,System.Int64)">
            <param name="stream">Stream instance to write to.</param>
            <param name="flushBytesNumber">Number of bytes when to write to the hard disk. Default is each 4 MB.</param>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportProviderBase.EntityType">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportProviderBase.FileExtension">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.ExportProviderBase.ConfigurationInfo">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportProviderBase.ExecuteAsync(Smartstore.Core.DataExchange.Export.ExportExecuteContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportProviderBase.ExportAsync(Smartstore.Core.DataExchange.Export.ExportExecuteContext,System.Threading.CancellationToken)">
            <summary>
            Exports data to a file.
            </summary>
            <param name="context">Export execution context.</param>
            <param name="cancelToken">A cancellation token to cancel the export.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportProviderBase.OnExecutedAsync(Smartstore.Core.DataExchange.Export.ExportExecuteContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Export.ExportXmlExclude">
            <summary>
            Allows to exclude XML nodes from export.
            </summary>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Export.ExportXmlHelper">
            <summary>
            Writes XML formatted entity data using <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <remarks>
            Uses synchronous XmlWriter methods to avoid many atomic asynchronous write statements for each small text portion.
            https://stackoverflow.com/questions/16641074/xmlwriter-async-methods/37391267
            </remarks>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Export.IDataExporter">
            <summary>
            Data exporter contract.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IDataExporter.ExportAsync(Smartstore.Core.DataExchange.Export.DataExportRequest,System.Threading.CancellationToken)">
            <summary>
            Starts exporting data. An export provider is responsible for what happens to the data, 
            e.g. whether it should be written to a file (default).
            </summary>
            <param name="request">Contains request data for exporting.</param>
            <param name="cancelToken">A cancellation token to cancel the export.</param>
            <returns>Data export result.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IDataExporter.PreviewAsync(Smartstore.Core.DataExchange.Export.DataExportRequest,System.Int32,System.Int32)">
            <summary>
            Exports data to display them in a preview grid.
            </summary>
            <param name="request">Contains request data for exporting.</param>
            <param name="pageIndex">The data page index.</param>
            <param name="pageSize">The data ppage size.</param>
            <returns>Data export preview result.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProfileService.GetExportDirectoryAsync(Smartstore.Core.DataExchange.ExportProfile,System.String,System.Boolean)">
            <summary>
            Gets a temporary directory for an export profile.
            </summary>
            <param name="profile">Export profile.</param>
            <param name="subpath">Optional subpath, e.g. "Content" to get the content subfolder.</param>
            <param name="createIfNotExists">A value indicating whether the folder should be created if it does not exist.</param>
            <returns>Export directory.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProfileService.GetDeploymentDirectoryAsync(Smartstore.Core.DataExchange.ExportDeployment,System.Boolean)">
            <summary>
            Gets the directory for deploying export files. <c>null</c> if the profile has no deployment based on file system.
            </summary>
            <param name="deployment">Export deployment.</param>
            <param name="createIfNotExists">A value indicating whether the folder should be created if it does not exist.</param>
            <returns>Deploement directory.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProfileService.GetDeploymentDirectoryUrlAsync(Smartstore.Core.DataExchange.ExportDeployment,Smartstore.Core.Stores.Store)">
            <summary>
            Gets the URL of the public export directory. <c>null</c> if the profile has no public deployment.
            </summary>
            <param name="deployment">Export deployment.</param>
            <param name="store">Store to get the domain from. If <c>null</c>, store will be obtained from <see cref="P:Smartstore.Core.DataExchange.ExportProfile.Filtering"/> or <see cref="P:Smartstore.Core.DataExchange.ExportProfile.Projection"/>,
            or from <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>, if no store information was found at all.</param>
            <returns>URL of the public export directory.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProfileService.InsertExportProfileAsync(Smartstore.Engine.Modularity.Provider{Smartstore.Core.DataExchange.Export.IExportProvider},System.Boolean,System.String,System.Int32)">
            <summary>
            Adds an export profile.
            </summary>
            <param name="provider">Export provider.</param>
            <param name="isSystemProfile">A value indicating whether the new profile is a system profile.</param>
            <param name="profileSystemName">Profile system name.</param>
            <param name="cloneFromProfileId">Identifier of a profile the settings should be copied from.</param>
            <returns>Added export profile.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProfileService.InsertExportProfileAsync(System.String,System.String,System.String,Smartstore.Core.DataExchange.ExportFeatures,System.Boolean,System.String,System.Int32)">
            <summary>
            Adds an export profile.
            </summary>
            <param name="providerSystemName">Provider system name. Must not be empty.</param>
            <param name="name">The name of the profile.</param>
            <param name="fileExtension">The file extension supported by the export provider.</param>
            <param name="features">Features supported by the export provider.</param>
            <param name="isSystemProfile">A value indicating whether the new profile is a system profile.</param>
            <param name="profileSystemName">Profile system name.</param>
            <param name="cloneFromProfileId">Identifier of a profile the settings should be copied from.</param>
            <returns>Added export profile.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProfileService.DeleteExportProfileAsync(Smartstore.Core.DataExchange.ExportProfile,System.Boolean)">
            <summary>
            Deletes an export profile.
            </summary>
            <param name="profile">Export profile.</param>
            <param name="force">A value indicating whether to delete system profiles.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProfileService.LoadAllExportProviders(System.Int32,System.Boolean)">
            <summary>
            Loads all export providers.
            </summary>
            <param name="storeId">Filter providers that are only active for the store specified by this identifier.</param>
            <param name="includeHidden">A value indicating whether to include hidden providers.</param>
            <returns>Export providers.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProfileService.DeleteExportFilesAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Deletes the export files of all export profiles.
            </summary>
            <param name="startDate">Delete only files whose creation date is greater than the specified date.</param>
            <param name="endDate">Delete only files whose creation date is less than the specified date</param>
            <returns>Number of deleted files and folders.</returns>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProfileService.ResolveTokens(Smartstore.Core.DataExchange.ExportProfile,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Smartstore.Core.Stores.Store)">
            <summary>
            Resolves tokens in a pattern string, for example for a profile related file name.
            </summary>
            <param name="pattern">The pattern to resolve.</param>
            <param name="fileIndex">File index if the pattern is a file name.</param>
            <param name="maxLength">Maximum length of the resolved string.</param>
            <returns>Resolved pattern string.</returns>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.IExportProvider.EntityType">
            <summary>
            Gets the exported entity type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.IExportProvider.FileExtension">
            <summary>
            Gets the file extension of the export files (without dot). Return <c>null</c> for a non file based, on-the-fly export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.IExportProvider.ConfigurationInfo">
            <summary>
            Gets provider specific configuration information. Return <c>null</c> when no provider specific configuration is required.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProvider.ExecuteAsync(Smartstore.Core.DataExchange.Export.ExportExecuteContext,System.Threading.CancellationToken)">
            <summary>
            Starts exporting data to a file.
            </summary>
            <param name="context">Export execution context.</param>
            <param name="cancelToken">A cancellation token to cancel the export.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.IExportProvider.OnExecutedAsync(Smartstore.Core.DataExchange.Export.ExportExecuteContext,System.Threading.CancellationToken)">
            <summary>
            Called once per store when the export execution ended.
            </summary>
            <param name="context">Export execution context.</param>
            <param name="cancelToken">A cancellation token to cancel the export.</param>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Internal.DataExporterContext.EntityIdsLoaded">
            <summary>
            All entity identifiers per export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Internal.DataExporterContext.EntityIdsPerSegment">
            <summary>
            All entity identifiers per segment (used to avoid exporting products multiple times).
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Internal.DataExporterContext.Translations">
            <summary>
            All translations for global scopes (like Category, Manufacturer etc.)
            </summary>
        </member>
        <member name="P:Smartstore.Core.DataExchange.Export.Internal.DataExporterContext.TranslationsPerPage">
            <summary>
            All per page translations (like ProductVariantAttributeValue etc.)
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Export.ExportProfileQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.DataExchange.ExportProfile},System.Nullable{System.Boolean})">
            <summary>
            Applies a standard filter for an export profile query.
            Sorts by <see cref="P:Smartstore.Core.DataExchange.ExportProfile.IsSystemProfile"/>, then by <see cref="P:Smartstore.Core.DataExchange.ExportProfile.Name"/>.
            </summary>
            <param name="query">Export profile query.</param>
            <param name="enabled">A value indicating whether to include enabled profiles. <c>null</c> to ignore.</param>
            <returns>Export profile query.</returns>
        </member>
        <member name="T:Smartstore.Core.DataExchange.Excel.ExcelReader">
            <summary>
            Reader for reading Microsoft Excel files.
            </summary>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Excel.ExcelReader.#ctor(System.IO.Stream)">
            <summary>
            Ctor.
            </summary>
            <param name="source">The source stream. Will be closed as soon as the <see cref="T:Smartstore.Core.DataExchange.Excel.ExcelReader"/> is disposed.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.Excel.ExcelReader.#ctor(System.IO.Stream,System.Boolean,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="source">The source stream. Will be closed as soon as the <see cref="T:Smartstore.Core.DataExchange.Excel.ExcelReader"/> is disposed.</param>
        </member>
        <member name="M:Smartstore.Core.DataExchange.SyncMappingQueryExtensions.ApplyEntityFilter(System.Linq.IQueryable{Smartstore.Core.DataExchange.SyncMapping},System.Int32[],System.String,System.String)">
            <summary>
            Applies a filter to get sync mappings by entity identifiers.
            </summary>
            <param name="query">Sync mapping query.</param>
            <param name="entityIds">Filter by entity identifiers. <c>null</c> to ignore.</param>
            <param name="entityName">Filter by entity name. <c>null</c> to ignore.</param>
            <param name="contextName">Filter by context name. <c>null</c> to ignore.</param>
            <returns>Sync mapping query.</returns>
        </member>
        <member name="T:Smartstore.Core.Security.Permissions">
            <summary>
            Provides system names of standard permissions.
            Usage: [Permission(Permissions.Customer.Read)]
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.ResiliencySettings">
            <summary>
            Represents the configuration settings for resiliency and overload protection in the system.
            These settings are used to control the behavior of overload protection mechanisms,
            such as limiting traffic for different user categories (guests, bots, etc.) and handling peak load scenarios.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.ResiliencySettings.EnableOverloadProtection">
            <summary>
            Gets or sets a value indicating whether overload protection is enabled.
            When set to <c>true</c>, the system applies the defined traffic limits and overload protection policies.
            If set to <c>false</c>, overload protection is disabled, and no traffic limits are enforced.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.ResiliencySettings.ForbidNewGuestsIfSubRequest">
            <summary>
            Gets or sets a value indicating whether NEW guest users should be forbidden 
            if the request is a sub/secondary request, e.g., an AJAX request, POST,
            script, media file, etc.
            </summary>
            <remarks>
            This setting can be used to restrict the creation of new guest sessions 
            on successive (secondary) resource requests. A "bad bot" that does not accept cookies
            is difficult to identify as a bot and may create a new guest session with each (sub)-request,
            especially if it varies its client IP address and user agent string with each request.
            If set to <c>true</c>, new guests will be blocked under these circumstances.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Security.ResiliencySettings.LongTrafficWindow">
            <summary>
            Gets or sets the duration of the long traffic observation window.
            The long traffic window defines the period during which sustained traffic is measured.
            Use this setting to control traffic limits over a more extended period, 
            such as one minute or longer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.ResiliencySettings.LongTrafficLimitGuest">
            <summary>
            Gets or sets the long traffic limit for guest users.
            This limit represents the maximum number of requests allowed from guest users 
            within the duration of the <see cref="P:Smartstore.Core.Security.ResiliencySettings.LongTrafficWindow"/>.
            A value of <c>null</c> means there is no limit applied for guest users.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.ResiliencySettings.LongTrafficLimitBot">
            <summary>
            Gets or sets the long traffic limit for bots.
            This limit represents the maximum number of requests allowed from bots 
            within the duration of the <see cref="P:Smartstore.Core.Security.ResiliencySettings.LongTrafficWindow"/>.
            A value of <c>null</c> means there is no limit applied for bots.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.ResiliencySettings.LongTrafficLimitGlobal">
            <summary>
            Gets or sets the global traffic limit for both guests and bots together, 
            within the duration of the <see cref="P:Smartstore.Core.Security.ResiliencySettings.LongTrafficWindow"/>.
            </summary>
            <remarks>
            This global limit applies to the combined traffic from guests and bots.
            It ensures that the overall system load remains within acceptable thresholds, regardless of the distribution 
            of requests among specific user types.
            
            Unlike type-specific limits such as <see cref="P:Smartstore.Core.Security.ResiliencySettings.LongTrafficLimitGuest"/> or <see cref="P:Smartstore.Core.Security.ResiliencySettings.LongTrafficLimitBot"/>, 
            which control the traffic for individual types, this global limit acts as a safeguard for the entire system. 
            If the cumulative requests from both types exceed this limit within the observation window, additional requests 
            may be denied or throttled, even if individual type-specific limits have not been reached.
            
            For example:
            - If `LongTrafficLimitGuest` is 600 and `LongTrafficLimitBot` is 400, the system still ensures that no more than 
              `LongTrafficLimitGlobal` (e.g., 800) requests are processed in total.
            - If this property is <c>null</c>, no global limit is enforced for the long traffic window.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Security.ResiliencySettings.PeakTrafficWindow">
            <summary>
            Gets or sets the duration of the peak traffic observation window.
            The peak traffic window defines the shorter period used for detecting sudden traffic spikes.
            This setting is useful for reacting to bursts of traffic that occur in a matter of seconds.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.ResiliencySettings.PeakTrafficLimitGuest">
            <summary>
            Gets or sets the peak traffic limit for guest users.
            This limit represents the maximum number of requests allowed from guest users 
            within the duration of the <see cref="P:Smartstore.Core.Security.ResiliencySettings.PeakTrafficWindow"/>.
            A value of <c>null</c> means there is no limit applied for guest users during peak windows.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.ResiliencySettings.PeakTrafficLimitBot">
            <summary>
            Gets or sets the peak traffic limit for bots.
            This limit represents the maximum number of requests allowed from bots 
            within the duration of the <see cref="P:Smartstore.Core.Security.ResiliencySettings.PeakTrafficWindow"/>.
            A value of <c>null</c> means there is no limit applied for bots during peak windows.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.ResiliencySettings.PeakTrafficLimitGlobal">
            <summary>
            Gets or sets the global peak traffic limit for both guests and bots together, 
            within the duration of the <see cref="P:Smartstore.Core.Security.ResiliencySettings.PeakTrafficWindow"/>.
            </summary>
            <remarks>
            This global limit applies to the combined traffic from guests and bots during short, high-intensity traffic bursts.
            It acts as an additional layer of protection for the system to prevent overload during sudden spikes in requests.
            
            Type-specific limits, such as <see cref="P:Smartstore.Core.Security.ResiliencySettings.PeakTrafficLimitGuest"/> and <see cref="P:Smartstore.Core.Security.ResiliencySettings.PeakTrafficLimitBot"/>, 
            are used to control traffic for individual types, but the global peak limit ensures that the total 
            number of requests processed during the <see cref="P:Smartstore.Core.Security.ResiliencySettings.PeakTrafficWindow"/> does not exceed the defined threshold.
            
            For example:
            - If `PeakTrafficLimitGuest` is 50 and `PeakTrafficLimitBot` is 30, the system still ensures that no more than 
              `PeakTrafficLimitGlobal` (e.g., 60) requests are processed in total during the peak window.
            - If this property is <c>null</c>, no global limit is enforced for the peak traffic window.
            
            This property is particularly useful in scenarios where the system needs to prioritize overall stability over 
            individual user type fairness.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Security.SecuritySettings.UseSslOnLocalhost">
            <summary>
            When <c>true</c>, bypasses any SSL redirection on localhost
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.SecuritySettings.EncryptionKey">
            <summary>
            Gets or sets an encryption key
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.SecuritySettings.AdminAreaAllowedIpAddresses">
            <summary>
            Gets or sets a list of adminn area allowed IP addresses
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.SecuritySettings.HideAdminMenuItemsBasedOnPermissions">
            <summary>
            Gets or sets a vaule indicating whether to hide admin menu items based on ACL
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.SecuritySettings.EnableHoneypotProtection">
            <summary>
            Gets or sets a vaule indicating whether "Honeypot" is enabled to prevent bots from posting forms.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.AclRecord">
            <summary>
            Represents an ACL record.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.AclRecord.EntityId">
            <summary>
            Gets or sets the entity identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.AclRecord.EntityName">
            <summary>
            Gets or sets the entity name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.AclRecord.CustomerRoleId">
            <summary>
            Gets or sets the customer role identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.AclRecord.CustomerRole">
            <summary>
            Gets or sets the customer role.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.AclRecord.IsIdle">
            <summary>
            Gets or sets a value indicating whether the entry is idle.
            </summary>
            <remarks>
            An entry is idle when it's related entity has been soft-deleted.
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Security.DefaultPermissionRecord">
            <summary>
            Represents a default permission record
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.DefaultPermissionRecord.CustomerRoleSystemName">
            <summary>
            Gets or sets the customer role system name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.DefaultPermissionRecord.PermissionRecords">
            <summary>
            Gets or sets the permissions
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.IAclRestricted">
            <summary>
            Represents an entity with restricted access rights.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.IAclRestricted.SubjectToAcl">
            <summary>
            Gets or sets a value indicating whether the entity has restricted access rights.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.PermissionRecord">
            <summary>
            Represents a permission record.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionRecord.SystemName">
            <summary>
            Gets or sets the permission system name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionRecord.PermissionRoleMappings">
            <summary>
            Gets or sets permission role mappings.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.PermissionRoleMapping">
            <summary>
            Represents a permission to role mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionRoleMapping.Allow">
            <summary>
            Gets or sets a value indicating whether the permission is granted.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionRoleMapping.PermissionRecordId">
            <summary>
            Gets or sets the permission record identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionRoleMapping.PermissionRecord">
            <summary>
            Gets or sets the permission record.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionRoleMapping.CustomerRoleId">
            <summary>
            Gets or sets the customer role identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionRoleMapping.CustomerRole">
            <summary>
            Gets or sets the customer role.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.PermissionTree">
            <summary>
            Represents a premission tree.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionTree.Permissions">
            <summary>
            Gets all permissions structured as a tree.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionTree.LanguageId">
            <summary>
            Gets the identifier of the language of the display names. <c>null</c> if no display names are provided.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionTree.DisplayNames">
            <summary>
            Gets the display names of permissions.
            The key is the string resource name and the value the localized display name of the permission.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.PermissionTree.GetDisplayName(Smartstore.Collections.TreeNode{Smartstore.Core.Security.IPermissionNode})">
            <summary>
            Gets the localized display name for a permission node.
            </summary>
            <param name="node">Permission node.</param>
            <returns>Display name.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.AclRecordQueryExtensions.ApplyEntityFilter``1(System.Linq.IQueryable{Smartstore.Core.Security.AclRecord},``0)">
            <summary>
            Applies a filter for identifier and name of the entity.
            </summary>
            <param name="query">ACL record query.</param>
            <param name="entity">Entity.</param>
            <returns>ACL record query.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.AclRecordQueryExtensions.ApplyEntityFilter(System.Linq.IQueryable{Smartstore.Core.Security.AclRecord},System.String,System.Int32)">
            <summary>
            Applies a filter for identifier and name of the entity.
            </summary>
            <param name="query">ACL record query.</param>
            <param name="entityName">Name of the entity.</param>
            <param name="entityId">Entity identifier.</param>
            <returns>ACL record query.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IAclRestrictedQueryExtensions.ApplyAclFilter``1(System.Linq.IQueryable{``0},Smartstore.Core.Identity.Customer)">
            <summary>
            Applies filter for entities restricted by ACL (access control list).
            </summary>
            <param name="customer">Customer to be filtered according to their assigned customer roles.</param>
        </member>
        <member name="M:Smartstore.Core.Security.IAclRestrictedQueryExtensions.ApplyAclFilter``1(System.Linq.IQueryable{``0},System.Int32[])">
            <summary>
            Applies filter for entities restricted by ACL (access control list).
            </summary>
            <param name="customerRoleIds">Customer role identifiers to be filtered by. <c>null</c> to get all entities.</param>
        </member>
        <member name="M:Smartstore.Core.Security.IAclServiceExtensions.GetAuthorizedCustomerRoleIdsAsync``1(Smartstore.Core.Security.IAclService,``0)">
            <summary>
            Finds customer role identifiers with granted access (mapped to the entity).
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="service">ACL service.</param>
            <param name="entity">Entity.</param>
            <returns>Customer role identifiers.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IAclServiceExtensions.AuthorizeAsync``1(Smartstore.Core.Security.IAclService,``0)">
            <summary>
            Checks whether the current customer has been granted access to an entity.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="service">ACL service.</param>
            <param name="entity">Entity.</param>
            <returns><c>true</c> if granted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IAclServiceExtensions.AuthorizeAsync``1(Smartstore.Core.Security.IAclService,``0,Smartstore.Core.Identity.Customer)">
            <summary>
            Checks whether a customer has been granted access to an entity.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="service">ACL service.</param>
            <param name="entity">Entity.</param>
            <param name="customer">Customer.</param>
            <returns><c>true</c> if granted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IAclServiceExtensions.SelectAuthorizedAsync``1(Smartstore.Core.Security.IAclService,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the current customer has been granted access to entities.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="service">ACL service.</param>
            <param name="entities">Entities to check.</param>
            <returns>Authorized entities.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.PermissionRecordQueryExtensions.ApplySystemNameFilter(System.Linq.IQueryable{Smartstore.Core.Security.PermissionRecord},System.String)">
            <summary>
            Applies a filter for system names and sorts by <see cref="P:Smartstore.Domain.BaseEntity.Id"/>.
            </summary>
            <param name="query">Permission record query.</param>
            <param name="systemName">Permission system name.</param>
            <returns>Permission record query.</returns>
        </member>
        <member name="T:Smartstore.Core.Security.AuthorizeAdminAttribute">
            <summary>
            Checks whether the current user has the permission to access the administration backend.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.AuthorizeShopAccessAttribute">
            <summary>
            Checks whether the current user has the permission to access the shop.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.NeverAuthorizeAttribute">
            <summary>
            A marker filter indicating that the access to the requested endpoint is always permitted (no permission check).
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.PermissionAttribute">
            <summary>
            Checks request permission for the current user.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.PermissionAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            E.g. [Permission(PermissionSystemNames.Customer.Read)]
            </summary>
            <param name="systemName">The system name of the permission.</param>
            <param name="showUnauthorizedMessage">A value indicating whether to show an unauthorization message.</param>
        </member>
        <member name="T:Smartstore.Core.Security.PermissionRequirement">
            <summary>
            Required arguments to check permission by filter attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionRequirement.SystemName">
            <summary>
            The system name of the permission.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.PermissionRequirement.ShowUnauthorizedMessage">
            <summary>
            A value indicating whether to show an unauthorization message.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.ValidateAdminIpAddressAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Smartstore.Core.Security.ValidateAdminIpAddressAttribute"/>.
            </summary>
            <param name="validate">Set to <c>false</c> to override any controller-level <see cref="T:Smartstore.Core.Security.ValidateAdminIpAddressAttribute"/>.</param>
        </member>
        <member name="T:Smartstore.Core.Security.ValidateCaptchaAttribute">
            <summary>
            Checks whether captcha is valid and - if not - outputs a notification.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Security.ValidateCaptchaAttribute.CaptchaSettingName">
            <summary>
            Gets or sets the name of the <see cref="T:Smartstore.Core.Security.CaptchaSettings"/> property that indicates 
            whether the captcha is displayed ("ShowOnContactUsPage" for example).
            Avoids unnecessary validation requests and "invalid-input-response" error if the captcha is not displayed at all.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.ValidateHoneypotAttribute">
            <summary>
            Checks whether captcha is valid and - if not - outputs a notification.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Security.AclService.ACL_SEGMENT_KEY">
            <summary>
            0 = segment (EntityName.IdRange)
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.HttpsUrlFilter">
            <summary>
            Applies the policy for HTTPS according to settings in current <see cref="T:Smartstore.Core.Stores.Store"/>
            </summary>
        </member>
        <member name="T:Smartstore.Core.Security.IAclService">
            <summary>
            ACL (Access Control List) service inerface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.IAclService.HasActiveAcl">
            <summary>
            Gets a value indicating whether at least one ACL record is in active state system-wide.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.IAclService.HasActiveAclAsync">
            <summary>
            Gets a value indicating whether at least one ACL record is in active state system-wide.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.IAclService.ApplyAclMappingsAsync``1(``0,System.Int32[])">
            <summary>
            Creates ACL mapping entities for a mappable entity and begins change tracking.
            The caller is responsible for database commit.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="entity">The entity.</param>
            <param name="selectedCustomerRoleIds">Array of selected customer role identifiers.</param>
        </member>
        <member name="M:Smartstore.Core.Security.IAclService.GetAuthorizedCustomerRoleIdsAsync(System.String,System.Int32)">
            <summary>
            Finds customer role identifiers with granted access (mapped to the entity).
            </summary>
            <param name="entityName">Entity name to check.</param>
            <param name="entityId">Entity identifier to check.</param>
            <returns>Customer role identifiers.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IAclService.AuthorizeAsync(System.String,System.Int32)">
            <summary>
            Checks whether the current customer has been granted access to an entity.
            </summary>
            <param name="entityName">Entity name to check.</param>
            <param name="entityId">Entity identifier to check.</param>
            <returns><c>true</c> if granted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IAclService.AuthorizeAsync(System.String,System.Int32,System.Collections.Generic.IEnumerable{Smartstore.Core.Identity.CustomerRole})">
            <summary>
            Checks whether certain customer roles has been granted access to an entity.
            </summary>
            <param name="entityName">Entity name to check.</param>
            <param name="entityId">Entity identifier to check.</param>
            <param name="roles">Customer roles to check. Inactive roles will be skipped.</param>
            <returns><c>true</c> if granted, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Smartstore.Core.Security.IEncryptor">
            <summary>
            Responsible for hashing passwords, encrypting or decrypting text and generating salt keys.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.IEncryptor.CreateSaltKey(System.Int32)">
            <summary>
            Creates salt key
            </summary>
            <param name="size">Key size</param>
            <returns>Salt key</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IEncryptor.CreatePasswordHash(System.String,System.String,System.String)">
            <summary>
            Creates a password hash
            </summary>
            <param name="password">Password</param>
            <param name="saltkey">Salk key</param>
            <param name="hashAlgorithm">A known hash algorithm</param>
            <returns>Password hash</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IEncryptor.EncryptText(System.String,System.String)">
            <summary>
            Encrypts text
            </summary>
            <param name="plainText">Text to encrypt</param>
            <param name="privateKey">Encryption private key</param>
            <returns>Encrypted text</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IEncryptor.DecryptText(System.String,System.String)">
            <summary>
            Decrypts text
            </summary>
            <param name="cipherText">Text to decrypt</param>
            <param name="privateKey">Encryption private key</param>
            <returns>Decrypted text</returns>
        </member>
        <member name="T:Smartstore.Core.Security.IOverloadProtector">
            <summary>
            Provides methods to protect the system from overload attacks, 
            such as too many guest users, excessive bot activity, etc.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.IOverloadProtector.DenyGuestAsync(Smartstore.Core.Identity.Customer)">
            <summary>
            Determines if a guest user should be denied access due to exceeding 
            the allowed rate limit for guest users. 
            </summary>
            <remarks>
            The rate limit is applied based on a predefined policy, which 
            include thresholds for requests per time window and peak detection strategies. 
            If the guest user exceeds the limits, this method will return <c>true</c>, 
            indicating that the request should be denied.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation, 
            containing a <see cref="T:System.Boolean"/> that indicates whether the guest user should be denied.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Security.IOverloadProtector.DenyBotAsync(Smartstore.Core.Web.IUserAgent)">
            <summary>
            Determines if a bot should be denied access due to exceeding the allowed 
            rate limit for bot activity.
            </summary>
            <remarks>
            Bots typically have stricter rate-limiting policies compared to guests, 
            as they may generate high volumes of traffic. This method applies a bot-specific 
            rate limit to protect the system from excessive bot activity. If the bot exceeds 
            these limits, this method will return <c>true</c>.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation, 
            containing a <see cref="T:System.Boolean"/> that indicates whether the bot should be denied.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Security.IOverloadProtector.ForbidNewGuestAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Determines if access for new guest users should be forbidden based on the current resiliency policy.
            </summary>
            <remarks>
            This can be used to temporarily or permanently block new guests 
            during periods of high load or maintenance.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation, 
            containing a <see cref="T:System.Boolean"/> that indicates whether new guest users should be forbidden.
            </returns>
        </member>
        <member name="T:Smartstore.Core.Security.IPermissionProvider">
            <summary>
            Represents a provider to add permissions.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.IPermissionProvider.GetPermissions">
            <summary>
            Gets a list of <see cref="T:Smartstore.Core.Security.PermissionRecord"/> to be added.
            The permissions are automatically installed when the application is restarted or a module is installed.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.IPermissionProvider.GetDefaultPermissions">
            <summary>
            Gets a list of default permissions which are automatically granted to the given customer role.
            Typically used for <see cref="P:Smartstore.Core.Identity.SystemCustomerRoleNames.Administrators"/> to grant him the root permission.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smartstore.Core.Security.IPermissionService">
            <summary>
            Permission service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Security.IPermissionService.Authorize(System.String,Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Checks whether given permission is granted.
            </summary>
            <param name="permissionSystemName">Permission record system name.</param>
            <param name="customer">Customer. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="allowByDescendantPermission">
            A value indicating whether the permission is granted if any descendant permission is granted.
            Example: if a customer has not been granted the permission to view a menu item, it should still be displayed if he has been granted the right to view any descendant item.
            </param>
            <returns><c>true</c> if granted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IPermissionService.AuthorizeAsync(System.String,Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Checks whether given permission is granted.
            </summary>
            <param name="permissionSystemName">Permission record system name.</param>
            <param name="customer">Customer. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="allowByDescendantPermission">
            A value indicating whether the permission is granted if any descendant permission is granted.
            Example: if a customer has not been granted the permission to view a menu item, it should still be displayed if he has been granted the right to view any descendant item.
            </param>
            <returns><c>true</c> if granted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IPermissionService.GetPermissionTreeAsync(Smartstore.Core.Identity.CustomerRole,System.Boolean)">
            <summary>
            Gets the permission tree for a customer role from cache.
            </summary>
            <param name="role">Customer role.</param>
            <param name="addDisplayNames">A value indicating whether to add permission display names.</param>
            <returns>Permission tree.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IPermissionService.BuildCustomerPermissionTreeAsync(Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Builds the permission tree for a customer.
            </summary>
            <param name="customer">Customer.</param>
            <param name="addDisplayNames">A value indicating whether to add permission display names.</param>
            <returns>Permission tree.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IPermissionService.GetAllSystemNamesAsync">
            <summary>
            Gets system and display names of all permissions.
            </summary>
            <returns>System and display names.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IPermissionService.GetDisplayNameAsync(System.String)">
            <summary>
            Gets the display name for a permission system name.
            </summary>
            <param name="permissionSystemName">Permission record system name.</param>
            <returns>Display name.</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IPermissionService.GetUnauthorizedMessageAsync(System.String)">
            <summary>
            Gets the detailed unauthorization message.
            </summary>
            <param name="permissionSystemName">Permission record system name.</param>
            <returns>Detailed unauthorization message</returns>
        </member>
        <member name="M:Smartstore.Core.Security.IPermissionService.InstallPermissionsAsync(Smartstore.Core.Security.IPermissionProvider[],System.Boolean)">
            <summary>
            Installs permissions. Permissions are automatically installed by <see cref="T:Smartstore.Core.Bootstrapping.InstallPermissionsInitializer"/>.
            </summary>
            <param name="permissionProviders">Providers whose permissions are to be installed.</param>
            <param name="removeUnusedPermissions">Whether to remove permissions no longer supported by the providers.</param>
        </member>
        <member name="M:Smartstore.Core.Security.PermissionHelper.GetPermissions(System.Type)">
            <summary>
            Gets a list of all permission system names for a given type.
            See <see cref="T:Smartstore.Core.Security.Permissions"/> as an example.
            </summary>
            <returns>Permission system names.</returns>
        </member>
        <member name="T:Smartstore.Core.Security.StandardPermissionProvider">
            <summary>
            Provider to get permissions of the core module.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Facets.FacetUtility">
            <summary>
            Contains utilities that are required for facet processing.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.Facet.IsChoice">
            <summary>
            Gets or sets whether the facet can be selected
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Facets.FacetCollector">
            <summary>
            Helper to speed up collecting facets.
            Allows to break the iteration of all facet values if no better facets can be achieved with regard to the hit counts.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Facets.FacetDescriptor">
            <summary>
            A filter and its selection to be applied, e.g. Color=Red.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.FacetDescriptor.Key">
            <summary>
            Gets the key / field name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.FacetDescriptor.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.FacetDescriptor.Values">
            <summary>
            Gets the values for this facet.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.FacetDescriptor.AddValue(Smartstore.Core.Search.Facets.FacetValue[])">
            <summary>
            Adds a facet value.
            </summary>
            <param name="values">Facet values</param>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.FacetDescriptor.IsMultiSelect">
            <summary>
            Gets or sets whether selection of multiple values is allowed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.FacetDescriptor.MinHitCount">
            <summary>
            Gets or sets the minimum number of hits a choice would need to have to be returned.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.FacetDescriptor.MaxChoicesCount">
            <summary>
            Gets or sets the maximum number of choices to return. Default = 0 which means all.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.FacetDescriptor.OrderBy">
            <summary>
            Gets or sets the result choices sort order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.FacetDescriptor.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Facets.FacetTemplateHint">
            <summary>
            Represents a hint for the facet template to be used.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Search.Facets.FacetTemplateHint.Checkboxes">
            <summary>
            Render facets as checkboxes
            </summary>
        </member>
        <member name="F:Smartstore.Core.Search.Facets.FacetTemplateHint.Custom">
            <summary>
            Custom facet rendering like color or picture boxes
            </summary>
        </member>
        <member name="F:Smartstore.Core.Search.Facets.FacetTemplateHint.NumericRange">
            <summary>
            Render facets as a numeric range filter
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.FacetExtensions.OrderBy(System.Collections.Generic.IEnumerable{Smartstore.Core.Search.Facets.Facet},Smartstore.Core.Search.Facets.FacetDescriptor)">
            <summary>
            Orders a facet sequence
            </summary>
            <param name="source">Facets</param>
            <param name="descriptor">Facet descriptor</param>
            <returns>Ordered facets</returns>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.FacetExtensions.OrderBy(System.Collections.Generic.IEnumerable{Smartstore.Core.Search.Facets.Facet},Smartstore.Core.Search.Facets.FacetSorting,System.Boolean)">
            <summary>
            Orders a facet sequence
            </summary>
            <param name="source">Facets</param>
            <param name="sorting">Type of sorting</param>
            <param name="selectedFirst">Whether to display selected facets first</param>
            <returns>Ordered facets</returns>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.FacetExtensions.RemoveFacet(System.Collections.Generic.IList{Smartstore.Core.Search.Facets.Facet},System.Object,System.Boolean)">
            <summary>
            Removes a facet
            </summary>
            <param name="facets">List of facets</param>
            <param name="value">Facet value</param>
            <param name="upperValue">Whether to compare the upper value</param>
        </member>
        <member name="T:Smartstore.Core.Search.Facets.FacetMetadata">
            <summary>
            Metadata for a facet including facet value.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.FacetUrlHelperBase.GetUnmappedQueryName(Smartstore.Core.Search.Facets.Facet)">
            <summary>
            Gets the unmapped name of a query part, e.g. "m" if the URL contains the brand\manufacturer name.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.FacetUrlHelperBase.GetQueryParts(Smartstore.Core.Search.Facets.Facet)">
            <summary>
            Gets a name-to-value map of all query parts.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Facets.IFacetUrlHelperProvider">
            <summary>
            Represents a provider to get facet helpers.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.IFacetUrlHelperProvider.GetUrlHelper(System.String)">
            <summary>
            Gets a facet URL helper.
            </summary>
            <param name="scope">Index scope name.</param>
            <returns>Facet URL helper.</returns>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.FacetValueContext.FieldName">
            <summary>
            The name of the field to be faceted.
            </summary>
            <remarks>
            In rare cases (e.g. for prices), the field to be faceted is different from the actual index field.
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Search.Facets.IFacetMetadataStorage">
            <summary>
            Loading of facet metadata. Metadata is stored during indexing and loaded when searching with facets.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.IFacetMetadataStorage.LoadAsync(Smartstore.Core.Search.ISearchEngine,Smartstore.Core.Search.Facets.FacetMetadataContext)">
            <summary>
            Loads facet metadata from a medium like a file-based search index.
            </summary>
            <remarks>
            Metadata defines which data should be faceted. It can be generated on-the-fly (e.g. for a 1-to-5 stars product rating)
            or loaded via <see cref="T:Smartstore.Core.Search.Facets.IFacetMetadataStorage"/> from a medium (e.g. a file-based search index).
            </remarks>
            <param name="searchEngine">Search engine instance.</param>
            <param name="context">Context for loading facet metadata.</param>
            <returns>Dictionary of <see cref="P:Smartstore.Core.Search.Facets.FacetValue.Value"/> to <see cref="T:Smartstore.Core.Search.Facets.FacetMetadata"/>.</returns>
        </member>
        <member name="T:Smartstore.Core.Search.Facets.IFacetUrlHelper">
            <summary>
            Represents a helper to modify facet URLs.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.IFacetUrlHelper.Order">
            <summary>
            Order of helper implementations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Facets.IFacetUrlHelper.Scope">
            <summary>
            Index scope name.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.IFacetUrlHelper.GetQueryName(Smartstore.Core.Search.Facets.Facet)">
            <summary>
            Gets the query name.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.IFacetUrlHelper.Add(Smartstore.Core.Search.Facets.Facet[])">
            <summary>
            Adds query string parts for facets.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.IFacetUrlHelper.Remove(Smartstore.Core.Search.Facets.Facet[])">
            <summary>
            Removes query string parts for facets.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Facets.IFacetUrlHelper.Toggle(Smartstore.Core.Search.Facets.Facet)">
            <summary>
            Removes a query string part if the facet is selected, otherwise the part is added.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchFilterExtensions.FindFilter(System.Collections.Generic.IEnumerable{Smartstore.Core.Search.ISearchFilter},System.String)">
            <summary>
            Searches for a filter including <see cref="T:Smartstore.Core.Search.ICombinedSearchFilter"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.SearchFilter.Mode">
            <summary>
            Specifies the search mode.
            Note that the mode has an impact on the performance of the search. <see cref="F:Smartstore.Core.Search.SearchMode.ExactMatch"/> is the fastest,
            <see cref="F:Smartstore.Core.Search.SearchMode.StartsWith"/> is slower and <see cref="F:Smartstore.Core.Search.SearchMode.Contains"/> the slowest.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.SearchFilter.Escape">
            <summary>
            A value indicating whether to escape the search term.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.SearchFilter.Mandatory(System.Boolean)">
            <summary>
            Mark a clause as a mandatory match. By default all clauses are optional.
            </summary>
            <param name="mandatory">Whether the clause is mandatory or not.</param>
        </member>
        <member name="M:Smartstore.Core.Search.SearchFilter.Forbidden">
            <summary>
            Mark a clause as a forbidden match (MustNot).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.SearchFilter.ExactMatch">
            <summary>
            Specifies whether the clause should be matched exactly, like 'app' won't match 'apple' (applied on string clauses only).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.SearchFilter.NotAnalyzed">
            <summary>
            Specifies that the searched value will not be tokenized (applied on string clauses only)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.SearchFilter.HasParent(System.Int32)">
            <summary>
            Applies a parent identifier.
            </summary>
            <param name="parentId">Parent identifier</param>
        </member>
        <member name="M:Smartstore.Core.Search.SearchFilter.Weighted(System.Nullable{System.Single})">
            <summary>
            Applies a specific boost factor.
            </summary>
            <param name="weight">
            The boost factor. The higher the boost factor, the more relevant the search term will be
            and the more in front the search hit will be ranked/scored.
            <c>null</c> to apply the standard boost factor.
            </param>
            <remarks>
            The default boost factor depends on the search engine.
            The default MegaSearch/Lucene search time boost factor is 1.0.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.Reason">
            <summary>
            Reason for writer acquirement
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.CancelToken">
            <summary>
            Cancellation token.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.Languages">
            <summary>
            All languages
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.Currencies">
            <summary>
            Currency codes used for indexing
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.Stores">
            <summary>
            All stores
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.StoreMappings">
            <summary>
            Map of product to store identifiers if the product is limited to certain stores
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.CustomerRoleIds">
            <summary>
            Array of all customer role identifiers
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.CustomerRoleMappings">
            <summary>
            Map of product to customer role identifiers if the product is limited to certain customer roles
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.Manufacturers">
            <summary>
            All manufacturers
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.Categories">
            <summary>
            All categories
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.DeliveryTimes">
            <summary>
            All delivery times
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.Translations">
            <summary>
            All translations for global scopes (like Category, Manufacturer etc.)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.AcquireWriterContext.CustomProperties">
            <summary>
            Use this dictionary for any custom data required along indexing
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexBacklogService.GetBacklogAsync(System.String,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Removes all "Index" operation items followed by "Delete" for same entity.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IndexAnalysisReason">
            <summary>
            Represents the reason for what an analyzer is needed.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IndexAnalyzerType">
            <summary>
            Represents the analyzer type for an index field.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Search.Indexing.IndexAnalyzerType.Standard">
            <summary>
            Standard word splitting and filtering.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Search.Indexing.IndexAnalyzerType.Whitespace">
            <summary>
            Split words only for blanks, no filtering.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Search.Indexing.IndexAnalyzerType.Keyword">
            <summary>
            No word splitting and no filtering at all.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Search.Indexing.IndexAnalyzerType.Classic">
            <summary>
            Classic word splitting and filtering.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IndexAnalyzerInfo">
            <summary>
            Represents details of an index analyzer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IndexAnalyzerInfo.FieldNames">
            <summary>
            Name of the fields which uses this analyzer.
            It is recommended to use short names in lower case.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IndexAnalyzerInfo.LanguageCulture">
            <summary>
            Language culture if text should be analysed in context of a language. Can be <c>null</c>.
            </summary>
            <example>en-US</example>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IndexAnalyzerInfo.AnalyzerType">
            <summary>
            Specifies the type of text analysis. Falls back to the MegaSearch default analysis setting if <c>null</c>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IIndexAnalyzer">
            <summary>
            Represents an index analyzer for an index scope.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexAnalyzer.GetDefaultAnalyzerType(Smartstore.Core.Search.Indexing.IndexAnalysisReason,Smartstore.Core.Search.Indexing.IIndexStore)">
            <summary>
            Gets the default analyzer. It is used when no specific analyzer has been set for an index field.
            Falls back to the first analyzer defined by <see cref="T:Smartstore.Core.Search.Indexing.IIndexStore"/>.
            </summary>
            <param name="reason">Reason for requesting the analyzer.</param>
            <param name="indexStore">Related <see cref="T:Smartstore.Core.Search.Indexing.IIndexStore"/> instance.</param>
            <returns>The default analyzer</returns>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexAnalyzer.GetAnalyzerInfos(Smartstore.Core.Search.Indexing.IndexAnalysisReason,System.Collections.Generic.IList{Smartstore.Core.Localization.Language},Smartstore.Core.Search.Indexing.IIndexStore)">
            <summary>
            Gets a list of text analyzer to be used. An analyzer specifies how the content of an index field
            is to be processed during indexing and searching.
            </summary>
            <param name="reason">Reason for requesting the analyzer.</param>
            <param name="languages">List of all active languages. The first represents the default language of the store.</param>
            <param name="indexStore">Related <see cref="T:Smartstore.Core.Search.Indexing.IIndexStore"/> instance.</param>
            <returns>List of analyzer.</returns>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IIndexCollector">
            <summary>
            Represents a data collector of a search index.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexCollector.Scope">
            <summary>
            Name of the search index, e.g. "Catalog".
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexCollector.CreateWriterContextAsync(Smartstore.Core.Search.Indexing.AcquirementReason,Smartstore.Scheduling.TaskExecutionContext,System.Threading.CancellationToken)">
            <summary>
            Create a context for writing to a search index.
            </summary>
            <param name="reason">Reason for acquirement.</param>
            <param name="taskContext">Indexing task context.</param>
            <param name="cancelToken">Cancellation token.</param>
            <returns>Context for writing to a search index.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexCollector.CollectAsync(Smartstore.Core.Search.Indexing.AcquireWriterContext,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Collects data to include in the search index.
            </summary>
            <param name="context">Context for writing to a search index.</param>
            <param name="lastIndexedUtc">Date of last indexing (in UTC).</param>
            <param name="continueDocumentId">
            ID of the last processed index document. Typically <see cref="P:Smartstore.Domain.BaseEntity.Id"/>.
            Used to continue indexing at the point where it was aborted.
            </param>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexDataSegmenter.TotalDocuments">
            <summary>
            Total number of documents.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexDataSegmenter.SegmentSize">
            <summary>
            Number of documents per segment.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexDataSegmenter.GetCurrentSegmentAsync">
            <summary>
            Gets current data segment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexDataSegmenter.CurrentSegmentIndex">
            <summary>
            Gets the page index of the current segment.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexDataSegmenter.ReadNextSegment">
            <summary>
            Reads the next segment.
            </summary>
            <returns><c>true</c> if there are more segments, <c>false</c> if all segments have been processed.</returns>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IIndexDocument">
            <summary>
            Abstraction of document to be stored by underlying index providers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexDocument.Count">
            <summary>
            The number of fields in this document.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexDocument.Id">
            <summary>
            The primary key of the indexed entity.
            </summary>
            <remarks>Implementors: the Id must be persisted internally as an <see cref="T:Smartstore.Core.Search.Indexing.IndexField"/>.</remarks>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexDocument.DocumentType">
            <summary>
            Identifies the type of a document, can be <c>null</c>. <see cref="T:Smartstore.Core.Search.Indexing.SearchDocumentTypes"/> for known types.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexDocument.Add(Smartstore.Core.Search.Indexing.IndexField)">
            <summary>
            Adds a field to this document.
            </summary>
            <param name="field">The field to add.</param>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexDocument.Remove(System.String)">
            <summary>
            Removes a field from this document.
            </summary>
            <param name="name">The name of the field.</param>
            <returns>The number of removed fields.</returns>
            <remarks>A document can contain fields with the same name. This method removes ALL fields with the passed name.</remarks>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexDocument.Contains(System.String)">
            <summary>
            A value indicating whether at least one field with the passed name exists in the document.
            </summary>
            <param name="name">The name of the field(s).</param>
            <returns><c>true</c> if field exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexDocument.Item(System.String)">
            <summary>
            Enumerates all fields with the passed name.
            </summary>
            <param name="name">The name of the field(s).</param>
            <returns>Index field sequence.</returns>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IIndexManager">
            <summary>
            Factory for registered search index providers
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexManager.HasAnyProvider(System.String,System.Boolean)">
            <summary>
            Gets a value indicating whether at least one provider is available that implements <see cref="T:Smartstore.Core.Search.Indexing.IIndexProvider"/>.
            </summary>
            <param name="scope">Index scope name</param>
            <param name="activeOnly">A value indicating whether only active providers should be queried for.</param>
            <returns><c>true</c> if at least one provider is registered, <c>false</c> ortherwise.</returns>
            <remarks>Primarily used to skip indexing processes.</remarks>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexManager.GetIndexProvider(System.String,System.Boolean)">
            <summary>
            Returns the instance of the first registered index provider (e.g. a Lucene provider).
            </summary>
            <param name="scope">Index scope name</param>
            <param name="activeOnly">A value indicating whether only active providers should be queried for.</param>
            <returns>The index provider implementation instance.</returns>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IIndexOperation">
            <summary>
            Represents an indexing operation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexOperation.OperationType">
            <summary>
            The type of the operation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexOperation.Document">
            <summary>
            The document being inserted to or deleted from the index storage.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexOperation.Entity">
            <summary>
            The database entity from which <see cref="P:Smartstore.Core.Search.Indexing.IIndexOperation.Document"/> was created.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IIndexProvider">
            <summary>
            Represents a provider of a search index.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexProvider.IsActive(System.String)">
            <summary>
            Gets a value indicating whether the search index given by scope is active
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexProvider.EnumerateIndexesAsync">
            <summary>
            Enumerates the names of all EXISTING indexes. 
            A name is required for the <see cref="M:Smartstore.Core.Search.Indexing.IIndexProvider.GetIndexStore(System.String)"/> method.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexProvider.GetIndexStore(System.String)">
            <summary>
            Returns a provider specific implementation of the <see cref="T:Smartstore.Core.Search.Indexing.IIndexStore"/> interface
            which allows interaction with the underlying index store for managing the index and containing documents.
            </summary>
            <param name="scope">The index name</param>
            <returns>The index store</returns>
            <remarks>
            This methods always returns an object instance, even if the index does not exist yet.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexProvider.GetSearchEngine(Smartstore.Core.Search.Indexing.IIndexStore,Smartstore.Core.Search.ISearchQuery)">
            <summary>
            Returns a provider specific implementation of the <see cref="T:Smartstore.Core.Search.ISearchEngine"/> interface
            which allows executing queries against an index store.
            </summary>
            <param name="store">The index store</param>
            <param name="query">The query to execute against the store</param>
            <returns>The search engine instance</returns>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IndexScopeMetadata">
            <summary>
            Represents metadata for registration of <see cref="T:Smartstore.Core.Search.Indexing.IIndexScope"/> implementations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IndexScopeMetadata.Name">
            <summary>
            The name of the index scope, e.g. "Catalog", "Forum" etc.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IIndexScope">
            <summary>
            Provides all index scope related functions and services, e.g. "Catalog", "Forum" etc.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexScope.Scope">
            <summary>
            The scope name that the provider implementation represents.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexScope.GetConfigurationWidget">
            <summary>
            Gets the widget invoker for optional configuration. Return <c>null</c> when there is nothing to configure.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexScope.GetIndexInfo">
            <summary>
            Gets an <see cref="T:Smartstore.Core.Search.Indexing.IndexInfo"/> instance which provides base information about the index.
            </summary>
            <returns><see cref="T:Smartstore.Core.Search.Indexing.IndexInfo"/> instance.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexScope.GetCollector">
            <summary>
            Gets the data collector.
            It provides all data to be added to the search index.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexScope.GetSearchProvider">
            <summary>
            Gets the search provider.
            It provides search index specific information such as fields to search, sorting and faceting.
            For example, <see cref="T:Smartstore.Core.Search.ISearchProvider"/> is used to specify the boosting of certain search fields.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexScope.GetAnalyzer">
            <summary>
            Gets the index analyzer. It provides information for text analysis of certain search fields.
            For example, <see cref="T:Smartstore.Core.Search.Indexing.IIndexAnalyzer"/> is used to specify that product SKUs are to be analyzed as keywords.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IIndexScopeManager">
            <summary>
            Factory for registered scope managers.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexScopeManager.EnumerateScopes">
            <summary>
            Gets all index scope names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexScopeManager.GetIndexScope(System.String)">
            <summary>
            Returns the instance of the first registered index scope provider (e.g. for "Catalog").
            </summary>
            <param name="scope">Index scope name to get provider for</param>
            <returns>The index scope provider implementation instance.</returns>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexStore.IndexInfo">
            <summary>
            Gets the index info.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IIndexStore.Exists">
            <summary>
            Checks whether the index is already existing or not.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStore.CreateIfNotExists">
            <summary>
            Creates a new index if it doesn't exist already.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStore.DeleteAsync">
            <summary>
            Deletes the index.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStore.GetDocumentCount(System.String)">
            <summary>
            Gets the total number of indexed documents.
            </summary>
            <param name="documentType">Type of document, use <c>null</c> to get all documents. <see cref="T:Smartstore.Core.Search.Indexing.SearchDocumentTypes"/> for known types.</param>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStore.GetIndexSizeAsync">
            <summary>
            Gets the size of the index in bytes.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStore.GetAllFields">
            <summary>
            Returns every field's name available in the index.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStore.Clear">
            <summary>
            Removes all documents from the index.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStore.AcquireWriter(Smartstore.Core.Search.Indexing.AcquireWriterContext)">
            <summary>
            Acquires an index writer.
            </summary>
            <param name="writerContext">Provides information about the indexing operation.</param>
            <remarks>
            This method creates a transient writer instance which automatically gets released on dispose.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStore.SaveDocuments(System.Collections.Generic.IEnumerable{Smartstore.Core.Search.Indexing.IIndexDocument})">
            <summary>
            Adds a set of new documents to the index.
            </summary>
            <remarks>
            This method will delete already existing documents before saving them.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStore.DeleteDocuments(System.Collections.Generic.IEnumerable{Smartstore.Core.Search.Indexing.IIndexDocument})">
            <summary>
            Removes a set of existing documents from the index.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStore.DeleteDocuments(System.String)">
            <summary>
            Removes a set of existing documents from the index.
            </summary>
            <param name="documentType">Type of document. <see cref="T:Smartstore.Core.Search.Indexing.SearchDocumentTypes"/> for known types.</param>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStoreExtensions.SaveDocument(Smartstore.Core.Search.Indexing.IIndexStore,Smartstore.Core.Search.Indexing.IIndexDocument)">
            <summary>
            Adds a new document to the index.
            </summary>
            <remarks>
            This method will delete a document with the same entity id - if it exists - before saving it.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IIndexStoreExtensions.DeleteDocument(Smartstore.Core.Search.Indexing.IIndexStore,Smartstore.Core.Search.Indexing.IIndexDocument)">
            <summary>
            Removes an existing document from the index.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.IndexDataSegmenter">
            <summary>
            Represents a data segmenter for indexing that uses paging.
            </summary>
            <remarks>
            <see cref="T:Smartstore.Core.Search.Indexing.SeekingIndexDataSegmenter"/> does the same as <see cref="T:Smartstore.Core.Search.Indexing.IndexDataSegmenter"/> but is faster for very large amounts of data.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IndexField.CreateName(System.String,System.String)">
            <summary>
            Creates the name for a localized index field.
            </summary>
            <param name="name">Field name.</param>
            <param name="languageCulture">Language culture, e.g. "en-US".</param>
            <returns>Name of a localized field.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.Indexing.IndexField.GetLanguageCulture(System.String)">
            <summary>
            Gets the language culture from a localized field name, e.g. "en-us".
            </summary>
            <param name="name">Field name.</param>
            <returns>Language culture in lower case. <c>null</c> if it does not exist.</returns>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IndexInfo.Scope">
            <summary>
            Gets the name of the search index, e.g. "Catalog".
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IndexInfo.ScopeKey">
            <summary>
            Gets or sets the resource key of the localized scope name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IndexInfo.IndexingTaskType">
            <summary>
            Gets or sets the type of the task that creates or updates the search index.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IndexInfo.DocumentType">
            <summary>
            Gets or sets the type of the main index document. See <see cref="T:Smartstore.Core.Search.Indexing.SearchDocumentTypes"/> for known types.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IndexInfo.DocumentTypeKey">
            <summary>
            Gets or sets the resource key of the localized document type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.Indexing.IndexInfo.ShouldRebuild">
            <summary>
            Indicates that the index should be rebuilt from scratch,
            because some global settings have changed (like tax rates for example).
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.SearchDocumentTypes">
            <summary>
            Known tokens of search index document types.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.Indexing.SeekingIndexDataSegmenter">
            <summary>
            Represents a data segmenter for indexing that loads segments until the last\maximum ID (primary key) has been reached.
            </summary>
            <remarks>
            <see cref="T:Smartstore.Core.Search.Indexing.SeekingIndexDataSegmenter"/> does the same as <see cref="T:Smartstore.Core.Search.Indexing.IndexDataSegmenter"/> but is faster for very large amounts of data.
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Search.ISearchAlias">
            <summary>
            Represents an entity which supports SEO friendly search alias.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.ISearchAlias.Alias">
            <summary>
            Gets or sets the SEO friendly search alias.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.ISearchEngine.Query">
            <summary>
            Search query
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.Get(System.Int32)">
            <summary>
            Get search hit by entity identifier
            </summary>
            <param name="id">Entity identifier</param>
            <returns>Search hit</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.GetAsync(System.Int32)">
            <summary>
            Get search hit by entity identifier
            </summary>
            <param name="id">Entity identifier</param>
            <returns>Search hit</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.Count">
            <summary>
            Get total number of search hits
            </summary>
            <returns>Total number of search hits</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.CountAsync">
            <summary>
            Get total number of search hits
            </summary>
            <returns>Total number of search hits</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.Search">
            <summary>
            Search
            </summary>
            <returns>Search hits</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.SearchAsync">
            <summary>
            Search
            </summary>
            <returns>Search hits</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.GetFacetMap">
            <summary>
            Gets the facet map for drilldown navigation
            </summary>
            <returns>The facet groups</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.GetFacetMapAsync">
            <summary>
            Gets the facet map for drilldown navigation
            </summary>
            <returns>Map of <see cref="P:Smartstore.Core.Search.Facets.FacetDescriptor.Key"/> to <see cref="T:Smartstore.Core.Search.Facets.FacetGroup"/>.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.GetFacetCount(Smartstore.Core.Search.Facets.FacetValue,Smartstore.Core.Search.Facets.FacetValueContext)">
            <summary>
            Gets the number of facets (also known as cardinality).
            </summary>
            <remarks>
            This core faceting method can be invoked extremely often. It is typically called internally by <see cref="T:Smartstore.Core.Search.ISearchProvider"/>.
            </remarks>
            <param name="value">The value to be faceted.</param>
            <param name="context">Context for counting facets.</param>
            <returns>Number of facets. Returns <see cref="F:System.Int64.MaxValue"/> indicating to cancel faceting immediately.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.GetFacetCountAsync(Smartstore.Core.Search.Facets.FacetValue,Smartstore.Core.Search.Facets.FacetValueContext)">
            <summary>
            Gets the number of facets (also known as cardinality).
            </summary>
            <remarks>
            This core faceting method can be invoked extremely often. It is typically called internally by <see cref="T:Smartstore.Core.Search.ISearchProvider"/>.
            </remarks>
            <param name="value">The value to be faceted.</param>
            <param name="context">Context for counting facets.</param>
            <returns>Number of facets. Returns <see cref="F:System.Int64.MaxValue"/> indicating to cancel faceting immediately.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.CheckSpelling">
            <summary>
            Performs spell checking ("Diy you mean?")
            </summary>
            <returns>Suggestions/corrections or an empty array</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.CheckSpellingAsync">
            <summary>
            Performs spell checking ("Diy you mean?")
            </summary>
            <returns>Suggestions/corrections or an empty array</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.Highlight(System.String,System.String,System.String,System.String)">
            <summary>
            Highlights chosen terms in a text, extracting the most relevant sections
            </summary>
            <param name="input">Text to highlight terms in</param>
            <param name="fieldName">Field name</param>
            <param name="preMatch">Text/HTML to prepend to matched keyword</param>
            <param name="postMatch">Text/HTML to append to matched keyword</param>
            <returns>Highlighted text fragments</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchEngine.Highlight(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets highlighted text fragments for an entity identifier.
            </summary>
            <param name="id">Entity identifier.</param>
            <param name="fieldName">Field name.</param>
            <param name="preMatch">Text/HTML to prepend to matched keyword.</param>
            <param name="postMatch">Text/HTML to append to matched keyword.</param>
            <param name="numMaxFragments">Maximum number of returned text fragments.</param>
            <returns>Highlighted text fragments.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchProvider.GetSorting(Smartstore.Core.Search.SearchSort,Smartstore.Core.Search.ISearchQuery)">
            <summary>
            Gets the sort order to be applied to a specific sort field.
            This is intended for special cases, for example, where a different search index field 
            is to be used for sorting than the one created by the query factory.
            </summary>
            <param name="sort">
            Original <see cref="T:Smartstore.Core.Search.SearchSort"/> created by the query factory.
            <c>null</c> if the search engine requests a default sorting.
            </param>
            <param name="query">Search query.</param>
            <returns>New sorting. <c>null</c> to let the caller handle sorting.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchProvider.GetBoost(Smartstore.Core.Search.ISearchFilter)">
            <summary>
            Gets the boost factor. The higher the boost factor, the more relevant the search term will be
            and the more in front the search hit will be ranked/scored.
            </summary>
            <param name="filter">Search filter.</param>
            <returns>Boost factor. <see cref="P:Smartstore.Core.Search.ISearchFilter.Boost"/> by default.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchProvider.GetLocalizedFieldName(Smartstore.Core.Search.ISearchFilter,System.String)">
            <summary>
            Gets the localized field name for a search filter.
            See also <seealso cref="M:Smartstore.Core.Search.Indexing.IndexField.CreateName(System.String,System.String)"/>.
            </summary>
            <param name="filter">Search filter.</param>
            <param name="languageCulture">Language culture.</param>
            <returns>Localized field name. <c>null</c> if no localized field name exists.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchProvider.IsFacetField(System.String,Smartstore.Core.Search.ISearchQuery)">
            <summary>
            Gets a value indicating whether facets exist for an index field.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="query">Search query.</param>
            <returns><c>true</c> facets exist otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchProvider.GetFacetMap(Smartstore.Core.Search.ISearchEngine,Smartstore.Core.Search.Facets.IFacetMetadataStorage)">
            <summary>
            Gets the facet map for drilldown navigation.
            </summary>
            <param name="searchEngine">Search engine.</param>
            <param name="storage">Facet metadata storage.</param>
            <returns>Map of <see cref="P:Smartstore.Core.Search.Facets.FacetDescriptor.Key"/> to <see cref="T:Smartstore.Core.Search.Facets.FacetGroup"/>.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchProvider.GetFacetMapAsync(Smartstore.Core.Search.ISearchEngine,Smartstore.Core.Search.Facets.IFacetMetadataStorage)">
            <summary>
            Gets the facet map for drilldown navigation.
            </summary>
            <param name="searchEngine">Search engine.</param>
            <param name="storage">Facet metadata storage.</param>
            <returns>Map of <see cref="P:Smartstore.Core.Search.Facets.FacetDescriptor.Key"/> to <see cref="T:Smartstore.Core.Search.Facets.FacetGroup"/>.</returns>
        </member>
        <member name="P:Smartstore.Core.Search.ISearchQuery.SpellCheckerMaxSuggestions">
            <summary>
            Maximum number of suggestions returned from spell checker
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.ISearchQuery.SpellCheckerMinQueryLength">
            <summary>
            Defines how many characters must be in the query before suggestions are provided
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.ISearchQuery.SpellCheckerMaxHitCount">
            <summary>
            The maximum number of product hits up to which suggestions are provided
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchQueryExtensions.IsInstantSearch(Smartstore.Core.Search.ISearchQuery)">
            <summary>
            Gets a value indicating whether the origin is instant search.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.ISearchQueryExtensions.IsSearchPage(Smartstore.Core.Search.ISearchQuery)">
            <summary>
            Gets a value indicating whether the origin is the search page.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Search.LinqSearchQueryVisitor`3">
            <summary>
            Represents a stateless visitor for search queries of type <typeparamref name="TQuery"/>.
            A visitor is reponsible for creating LINQ expressions
            for search query terms, filters and sortings.
            A concrete visitor implementation should be registered as a transient dependency via DI.
            </summary>
            <typeparam name="TEntity">The type of entity the visitor handles</typeparam>
            <typeparam name="TQuery">The type of search query the visitor handles</typeparam>
            <typeparam name="TContext">The concrete type of the search query context.</typeparam>
        </member>
        <member name="M:Smartstore.Core.Search.LinqSearchQueryVisitor`3.Visit(`2,System.Linq.IQueryable{`0})">
            <summary>
            Dispatches the search query to one of the more specialized visit methods in this class.
            </summary>
            <param name="context">The search context that also provides the <typeparamref name="TQuery"/> instance.</param>
            <param name="baseQuery">The base LINQ query to start with.</param>
            <returns>The final LINQ query after all query nodes have been visited.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.LinqSearchQueryVisitor`3.VisitFilter(Smartstore.Core.Search.ISearchFilter,`2,System.Linq.IQueryable{`0})">
            <summary>
            Visits a search filter expression.
            </summary>
            <param name="filter">The visited filter.</param>
            <param name="context">The search query context.</param>
            <param name="query">The LINQ query to apply the filter to.</param>
            <returns>The modified or the original LINQ query.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.LinqSearchQueryVisitor`3.VisitSorting(Smartstore.Core.Search.SearchSort,`2,System.Linq.IQueryable{`0})">
            <summary>
            Visits a search sorting expression.
            </summary>
            <param name="sorting">The visited sorting expression.</param>
            <param name="context">The search query context.</param>
            <param name="query">The LINQ query to apply the filter to.</param>
            <returns>The modified or the original LINQ query.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.LinqSearchQueryVisitor`3.ApplySimpleMemberExpression``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Smartstore.Core.Search.ISearchFilter,System.Linq.IQueryable{`0})">
            <summary>
            Helper to apply a search filter to simple member expressions.
            </summary>
            <param name="memberExpression">The member expression to apply the <paramref name="filter"/> to.</param>
            <param name="filter">The filter to apply.</param>
            <param name="query">The LINQ query to apply the filter to.</param>
            <returns>The modified LINQ query.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.LinqSearchQueryVisitor`3.ApplyDefaultSorting(`2,System.Linq.IQueryable{`0})">
            <summary>
            Applies a default sort to a LINQ query if the source search query does not
            contain any sort expressions.
            By default the query is sorted by <see cref="P:Smartstore.Domain.BaseEntity.Id"/> ascending.
            </summary>
            <param name="context">The search query context.</param>
            <param name="query">The LINQ query to apply the sort to.</param>
            <returns>The modified LINQ query.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.LinqSearchQueryVisitor`3.OrderBy``1(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Helper to apply sort to a query.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Search.SearchMode.ExactMatch">
            <summary>
            Term search
            </summary>
        </member>
        <member name="F:Smartstore.Core.Search.SearchMode.StartsWith">
            <summary>
            Prefix term search
            </summary>
        </member>
        <member name="F:Smartstore.Core.Search.SearchMode.Contains">
            <summary>
            Wildcard search
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.SearchQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.Search.SearchQuery"/> class without a search term being set
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.SearchQuery`1.DefaultTerm">
            <summary>
            Gets or sets the default search term.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.SearchQuery`1.IsFuzzySearch">
            <summary>
            A value idicating whether to search by distance. For example "roam" finds "foam" and "roams".
            Only applicable if the search engine supports it. Note that a fuzzy search is typically slower.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.SearchQuery`1.Origin">
            <summary>
            Gets the origin of the search. Examples:
            Search/Search: main catalog search page.
            Search/InstantSearch: catalog instant search.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.SearchQuery`1.CheckSpelling(System.Int32,System.Int32,System.Int32)">
            <summary>
            Inits the spell check.
            </summary>
            <param name="maxSuggestions">Number of returned suggestions. 0 to disable spell check.</param>
        </member>
        <member name="M:Smartstore.Core.Search.SearchQuery`1.BuildFacetMap(System.Boolean)">
            <summary>
            Specifies whether facets are to be returned.
            Note that a search including facets is slower.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.SearchQueryContext`1.Filters">
            <summary>
            All query filters.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.SearchQueryFactoryBase.Tokens">
            <summary>
            Specifies supported search query tokens, e.g. "q" for the search term.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.SearchQueryFactoryBase.Aliases">
            <summary>
            Gets a map of all search aliases from the query string and body of the request.
            An item that is not included in <see cref="P:Smartstore.Core.Search.SearchQueryFactoryBase.Tokens"/> is assumed to be an alias.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.SearchQueryFactoryBase.GetValueFor``1(System.String)">
            <summary>
            Tries to read a request value first from <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Form"/> (if method is POST), then from
            <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Query"/>, and converts value to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.SearchQueryFactoryBase.TryGetValueFor``1(System.String,``0@)">
            <summary>
            Tries to read a request value first from <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Form"/> (if method is POST), then from
            <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Query"/>, and converts value to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Search.SearchQueryFactoryBase.TryParseRange``1(System.String,System.Nullable{``0}@,System.Nullable{``0}@)">
            <summary>
            Tries to parse range filter values from a raw query value.
            </summary>
            <param name="query">Raw query value to be parsed.</param>
            <param name="min">Parsed minimum value, if any.</param>
            <param name="max">Parsed maximum value, if any.</param>
            <returns><c>true</c> if either <paramref name="min"/> or <paramref name="max"/> is not <c>null</c>. <c>False</c> otherwise.</returns>
        </member>
        <member name="M:Smartstore.Core.Search.SearchServiceBase.IndexingRequiredNotification(Smartstore.Core.ICommonServices)">
            <summary>
            Notifies the admin that indexing is required to use the advanced search.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Search.SearchSort.TypeCode">
            <summary>
            In this context, <see cref="F:Smartstore.Core.Search.IndexTypeCode.Empty"/> actually means <c>Score</c>
            </summary>
        </member>
        <member name="T:Smartstore.Core.Data.MaintenanceActionAttribute">
            <summary>
            Marker attribute for a (hidden) controller action that performs potentially long-running maintenance tasks.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Data.SaveChangesAttribute`1">
            <summary>
            Saves all pending changes in a <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance to the database
            after action method has been executed.
            </summary>
            <typeparam name="TContext">The type of context to save changes for.</typeparam>
            <remarks>
            Creates an instance of <see cref="T:Smartstore.Core.Data.SaveChangesAttribute`1"/>.
            </remarks>
            <param name="saveChanges">Set to <c>false</c> to override any controller-level or global <see cref="T:Smartstore.Core.Data.SaveChangesAttribute`1"/>.</param>
        </member>
        <member name="M:Smartstore.Core.Data.SaveChangesAttribute`1.#ctor(System.Boolean)">
            <summary>
            Saves all pending changes in a <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instance to the database
            after action method has been executed.
            </summary>
            <typeparam name="TContext">The type of context to save changes for.</typeparam>
            <remarks>
            Creates an instance of <see cref="T:Smartstore.Core.Data.SaveChangesAttribute`1"/>.
            </remarks>
            <param name="saveChanges">Set to <c>false</c> to override any controller-level or global <see cref="T:Smartstore.Core.Data.SaveChangesAttribute`1"/>.</param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.AttributesMigrator.CreateAttributeCombinationHashCodesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Generates attribute combination hash codes and applies them to <see cref="P:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination.HashCode"/>.
            These are required to find <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination"/> entities.
            </summary>
            <param name="force">
            <c>true</c> to regenerate all hash codes.
            <c>false</c> to generate only missing hash codes (those whose value is 0).
            </param>
            <returns>Number of updated <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttributeCombination"/> entities.</returns>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.LocaleResourcesBuilder.Delete(System.String[])">
            <summary>
            Deletes one or many locale resources in any language from the database
            </summary>
            <param name="keys">The key(s) of the resources to delete</param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.LocaleResourcesBuilder.DeleteFor(System.String,System.String[])">
            <summary>
            Deletes one or many locale resources in the specified language from the database
            </summary>
            <param name="lang">The language identifier</param>
            <param name="keys">The key(s) of the resources to delete</param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.LocaleResourcesBuilder.Update(System.String)">
            <summary>
            Updates existing locale resources
            </summary>
            <param name="key">The key of the resource</param>
            <returns>IResourceAddBuilder</returns>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.LocaleResourcesBuilder.AddOrUpdate(System.String)">
            <summary>
            Adds or updates locale resources
            </summary>
            <param name="key">The key of the resource</param>
            <returns>IResourceAddBuilder</returns>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.LocaleResourcesBuilder.AddOrUpdate(System.String,System.String,System.String)">
            <summary>
            Adds or updates locale resources
            </summary>
            <param name="key">The key of the resource</param>
            <param name="value">Primary English (untranslated) value of the resource</param>
            <param name="deValue">German value of the resource</param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.LocaleResourcesBuilder.AddOrUpdate(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds or updates locale resources
            </summary>
            <param name="key">The key of the resource</param>
            <param name="value">Primary English (untranslated) value of the resource</param>
            <param name="deValue">German value of the resource</param>
            <param name="hint">Primary English (untranslated) hint resource</param>
            <param name="deHint">German hint resource</param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.SettingsBuilder.Delete(System.String[])">
            <summary>
            Deletes one or many setting records from the database
            </summary>
            <param name="keys">The key(s) of the settings to delete</param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.SettingsBuilder.DeleteGroup(System.String)">
            <summary>
            Deletes all settings records prefixed with the specified group name from the database
            </summary>
            <param name="group">The group/prefix (actually the settings class name)</param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.SettingsBuilder.Add``1(System.String,``0)">
            <summary>
            Adds a setting if it doesn't exist yet.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.SettingsBuilder.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Updates an existing setting.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.SettingsBuilder.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.Object)">
            <summary>
            Updates an existing setting, but only if <paramref name="defaultValue"/> is not equal to the setting's value.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.SettingsBuilder.Update``1(System.String,``0)">
            <summary>
            Updates an existing setting.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.SettingsBuilder.Update``1(System.String,``0,``0)">
            <summary>
            Updates an existing setting, but only if <paramref name="defaultValue"/> is not equal to the setting's value.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DatabaseInitializer.GetDbContextTypes">
            <summary>
            Resolves/discovers all migratable data context types.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Data.Migrations.DataSeeder`1.Stage">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DataSeeder`1.SeedAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator.RunPendingMigrationsAsync(System.Reflection.Assembly,System.Threading.CancellationToken)">
            <summary>
            Migrates the database to the latest version.
            </summary>
            <param name="assembly">
                Pass an <see cref="T:System.Reflection.Assembly"/> instance to reduce the set of processed migrations to migration classes found in the given assembly only.
            </param>
            <returns>The number of applied migrations.</returns>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator.MigrateAsync(System.Nullable{System.Int64},System.Reflection.Assembly,System.Threading.CancellationToken)">
            <summary>
            Migrates the database to <paramref name="targetVersion"/> or to the latest version if no version was specified.
            </summary>
            <param name="targetVersion">The target migration version. Pass -1 to perform a full rollback.</param>
            <param name="assembly">
                Pass an <see cref="T:System.Reflection.Assembly"/> instance to reduce the set of processed migrations to migration classes found in the given assembly only.
            </param>
            <returns>The number of applied migrations.</returns>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator.CreateMigration(System.Type)">
            <summary>
            Creates an instance of the migration class.
            </summary>
            <param name="migrationClass">
            The <see cref="T:System.Type" /> for the migration class, as obtained from the <see cref="P:Smartstore.Core.Data.Migrations.DbMigrator.MigrationTable" /> dictionary.
            </param>
            <returns>The migration instance.</returns>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator.HasTables">
            <summary>
            Determines whether the database contains ALL tables specified by <see cref="T:Smartstore.Data.Migrations.CheckTablesAttribute"/>. 
            If the DbContext is not annotated with <see cref="T:Smartstore.Data.Migrations.CheckTablesAttribute"/> this method will return
            <c>true</c> if at least one user table is present in the database, otherwise <c>false</c>.
            </summary>
            <returns> A value indicating whether the required tables are present in the database. </returns>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator.EnsureSchemaPopulated">
            <summary>
            Creates the schema for the current model in the database. The database must exist physically or this method
            will raise an exception. To specify the table names that the database should contain in order to satisfy the model, annotate
            the DbContext class with <see cref="T:Smartstore.Data.Migrations.CheckTablesAttribute"/>. 
            If all given tables already exist in the database, this method will exit.
            After the schema was created, the migration version info table is populated with all found migrations
            for the current model.
            </summary>
            <returns>
            <see langword="true" /> if the schema was created, <see langword="false" /> if it already existed.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator.EnsureSchemaPopulatedAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Smartstore.Core.Data.Migrations.DbMigrator.EnsureSchemaPopulated" />
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator.RunLateSeedersAsync(System.Threading.CancellationToken)">
            <summary>
            Runs all pending data seeders that are <see cref="F:Smartstore.Data.Migrations.DataSeederStage.Late"/>.
            </summary>
            <remarks>
            This method is not thread-safe and should only be called in an app initializer.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator.SeedPendingLocaleResourcesAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Seeds locale resources of pending migrations.
            </summary>
            <param name="fromVersion">Specifies the version of a migration from which locale resources are to be seeded.</param>
            <returns>The number of seeded migrations.</returns>
        </member>
        <member name="F:Smartstore.Core.Data.Migrations.DbMigrator`1._initialMigration">
            <summary>
            The last migration that was successfully executed in a previous session.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Data.Migrations.DbMigrator`1._lastSuccessfulMigration">
            <summary>
            The last migration that was successfully executed in this session.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Data.Migrations.DbMigrator`1.Context">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Data.Migrations.DbMigrator`1.MigrationTable">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator`1.RunPendingMigrationsAsync(System.Reflection.Assembly,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator`1.MigrateAsync(System.Nullable{System.Int64},System.Reflection.Assembly,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.DbMigrator`1.RunLateSeedersAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Data.Migrations.IDatabaseInitializer">
            <summary>
            Responsible for initializing all migratable <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instances on app startup.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.IDatabaseInitializer.InitializeDatabasesAsync(System.Threading.CancellationToken)">
            <summary>
            Initializes / migrates all discovered migratable <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> instances.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.IDatabaseInitializer.RunPendingSeedersAsync(System.Threading.CancellationToken)">
            <summary>
            Runs any pending (long running) data seeders that have not been run at app start.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Data.Migrations.ILocaleResourcesProvider">
            <summary>
            Seeds new or updated locale resources after a migration has run. 
            This interface is usually applied to auto-generated migration classes.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Data.Migrations.IMigrationTable">
            <summary>
            Reads migration descriptors from all configured model assemblies.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.IMigrationTable.GetMigrations(System.Reflection.Assembly)">
            <summary>
            Gets all the migrations that are defined in migration assemblies.
            </summary>
            <param name="assembly">
                Pass an <see cref="T:System.Reflection.Assembly"/> instance to reduce the result set to migrations found in the given assembly only.
                Pass <c>null</c> to collect all migrations across all assemblies.
            </param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.IMigrationTable.GetMigrationByVersion(System.Int64)">
            <summary>
            Gets a migration by version.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.IMigrationTable.GetAppliedMigrations(System.Reflection.Assembly)">
            <summary>
            Gets all migrations that have been applied to the target database.
            </summary>
            <param name="assembly">
                Pass an <see cref="T:System.Reflection.Assembly"/> instance to reduce the result set to migrations found in the given assembly only.
                Pass <c>null</c> to collect all migrations across all assemblies.
            </param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.IMigrationTable.GetPendingMigrations(System.Reflection.Assembly)">
            <summary>
            Gets all migrations that are defined but haven't been applied to the target database.
            </summary>
            <param name="assembly">
                Pass an <see cref="T:System.Reflection.Assembly"/> instance to reduce the result set to migrations found in the given assembly only.
                Pass <c>null</c> to collect all migrations across all assemblies.
            </param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.IMigrationTable.Reload">
            <summary>
            Loads all version data stored in the version table.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.IMigrationTable.UpdateVersionInfo(System.Int64,System.String)">
            <summary>
            Adds the version information to the version table in the database.
            </summary>
            <param name="version">The version number</param>
            <param name="description">The optional version description</param>
        </member>
        <member name="T:Smartstore.Core.Data.Migrations.IMigrationTable`1">
            <inheritdoc cref="T:Smartstore.Core.Data.Migrations.IMigrationTable" />
        </member>
        <member name="T:Smartstore.Core.Data.Migrations.MigrationAssembly">
            <summary>
            Represents an assembly containing database migration classes.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.MigrationAssembly.GetMigrations">
            <summary>
            Gets all the migrations that are defined in the migrations assembly.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Data.Migrations.MigrationDescriptor.Name">
            <summary>
            The class name of the migration.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Data.Migrations.MigrationHistory">
            <summary>
            Represents the migration database table. It contains version information about applied migrations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Data.Migrations.MigrationHistory.Description">
            <summary>
            Maximum length of 1024 characters.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Data.Migrations.MigrationProcessorAccessor">
            <summary>
            Selects a migration processor based on <see cref="P:Smartstore.Data.DataSettings.DbFactory"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.MigrationTable`1.GetMigrations(System.Reflection.Assembly)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.MigrationTable`1.GetMigrationByVersion(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.MigrationTable`1.GetAppliedMigrations(System.Reflection.Assembly)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.MigrationTable`1.GetPendingMigrations(System.Reflection.Assembly)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.MigrationTable`1.Reload">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.MigrationTable`1.UpdateVersionInfo(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Smartstore.Core.Data.Migrations.MigrationVersionAttribute">
            <summary>
            Specifies the version of a database migration.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.MigrationVersionAttribute.#ctor(System.String,System.String,FluentMigrator.TransactionBehavior)">
            <summary>
            Specifies the version of a database migration.
            </summary>
            <param name="timestamp">yyyy-MM-dd HH:mm:ss formatted timestamp to get the version from, e.g. "2021-08-18 15:45:35.</param>
            <param name="description">Optional, short decription of the migration.</param>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.MigrationVersionAttribute.GetVersion(System.String)">
            <summary>
            Gets the migration version from a timestamp.
            Supported timestamp formats are: yyyy-MM-dd HH:mm:ss, yyyy/MM/dd HH:mm:ss, yyyy.MM.dd HH:mm:ss.
            </summary>
            <param name="timestamp">yyyy-MM-dd HH:mm:ss formatted timestamp to get the version from, e.g. "2021-08-18 15:45:35.</param>
            <returns>Migration version.</returns>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.PriceSettingsMigration.MigrateSettingsAsync(Smartstore.Core.Data.SmartDbContext,System.Threading.CancellationToken)">
            <summary>
            Moves some setting properties from CatalogSettings to PriceSettings class.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.V510.MigrateOfflinePaymentDescriptions(Smartstore.Core.Data.SmartDbContext,System.Threading.CancellationToken)">
            <summary>
            Migrates obsolete payment description setting (xyzSettings.DescriptionText) of offline payment methods.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Data.Migrations.V510.MigrateImportProfileColumnMappings(Smartstore.Core.Data.SmartDbContext,System.Threading.CancellationToken)">
            <summary>
            Migrates the import profile column mapping of localized properties (if any) from language SEO code to language culture for most languages (see issue #531).
            </summary>
        </member>
        <member name="T:Smartstore.Core.Data.PooledApplicationDbContextFactory`2">
            <summary>
            Provides support for multi-provider-aware pooled DbContext factories.
            </summary>
            <remarks>After switching to FluentMigrator we won't need PooledApplicationDbContextFactory anymore. Maybe remove later.</remarks>
        </member>
        <member name="T:Smartstore.Core.Data.PooledApplicationDbContextFactory`1">
            <summary>
            Provides support for multi-provider-aware pooled DbContext factories.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Affiliates.Affiliate">
            <summary>
            Represents an affiliate
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Affiliates.Affiliate.Active">
            <summary>
            Gets or sets a value indicating whether the entity is active
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Affiliates.Affiliate.Deleted">
            <summary>
            Gets or sets a value indicating whether the entity has been (soft) deleted
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Affiliates.Affiliate.AddressId">
            <summary>
            Gets or sets the address identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Affiliates.Affiliate.Address">
            <summary>
            Gets or sets the address relating to the affiliate
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Affiliates.CheckAffiliateAttribute.#ctor">
            <summary>
            Checks if a visiting customer was referred to the shop by an affiliate by analyzing the request query.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Attributes.CheckoutAttribute">
            <summary>
            Represents a checkout attribute
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.IsActive">
            <summary>
            Gets or sets a value indicating whether the checkout attribute is active
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.TextPrompt">
            <summary>
            Gets or sets the text prompt
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.IsRequired">
            <summary>
            Gets or sets a value indicating whether the entity is required
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.ShippableProductRequired">
            <summary>
            Gets or sets a value indicating whether shippable products are required in order to display this attribute
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.IsTaxExempt">
            <summary>
            Gets or sets a value indicating whether the attribute is marked as tax exempt
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.TaxCategoryId">
            <summary>
            Gets or sets the tax category identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.LimitedToStores">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.AttributeControlTypeId">
            <summary>
            Gets or sets the attribute control type identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.AttributeControlType">
            <summary>
            Gets the attribute control type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.IsListTypeAttribute">
            <summary>
            Gets a value indicating whether the attribute has a list of values.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.CheckoutAttributeValues">
            <summary>
            Gets or sets the checkout attributes collection
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Attributes.CheckoutAttributeQueryItem">
            <summary>
            Represents a checkout attribute query item.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Attributes.CheckoutAttributeQueryItem.CreateKey(System.Int32)">
            <summary>
            Creates a key used for form names.
            </summary>
            <param name="attributeId">Checkout attribute identifier.</param>
            <returns>Key.</returns>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeQueryItem.AttributeId">
            <summary>
            The <see cref="T:Smartstore.Core.Checkout.Attributes.CheckoutAttribute"/> identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeQueryItem.Value">
            <summary>
            The checkout attribute value.
            For list type attributes like a dropdown list, this is the <see cref="T:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue"/> identifier.
            If multiple identifiers must be specified (e.g. for checkboxes), they can be separated by commas.
            For a file, this must be a <see cref="P:Smartstore.Core.Content.Media.Download.DownloadGuid"/>.
            </summary>
            <example>1234</example>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeQueryItem.Date">
            <summary>
            The date if the control type is a datepicker. The value property is ignored in this case.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeQueryItem.IsFile">
            <summary>
            Gets or sets a Value indicating whether the attribute is a file.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Attributes.CheckoutAttributeSelection">
            <summary>
            Represents a checkout attribute selection.
            </summary>
            <remarks>
            This class can parse strings with XML or JSON format to <see cref="T:Smartstore.Collections.Multimap`2"/> and vice versa.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Attributes.CheckoutAttributeSelection.#ctor(System.String)">
            <summary>
            Creates checkout attribute selection from string as <see langword="Multimap{int, object}"/>. 
            Use <see cref="P:Smartstore.Domain.AttributeSelection.AttributesMap"/> to access parsed attributes afterwards.
            </summary>
            <remarks>
            Automatically differentiates between XML and JSON.
            </remarks>
            <param name="rawAttributes">XML or JSON attributes string.</param>  
        </member>
        <member name="T:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue">
            <summary>
            Represents a checkout attribute value
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.Name">
            <summary>
            Gets or sets the checkout attribute name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.PriceAdjustment">
            <summary>
            Gets or sets the price adjustment
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.WeightAdjustment">
            <summary>
            Gets or sets the weight adjustment
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.IsPreSelected">
            <summary>
            Gets or sets a value indicating whether the value is pre-selected
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.Color">
            <summary>
            Gets or sets the color RGB value (used with "Boxes" attribute type).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.CheckoutAttributeId">
            <summary>
            Gets or sets the checkout attribute mapping identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.MediaFileId">
            <summary>
            Gets or sets the media file identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.MediaFile">
            <summary>
            Gets or sets the media file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.CheckoutAttribute">
            <summary>
            Gets or sets the checkout attribute
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Attributes.CheckoutAttributeQueryExtensions">
            <summary>
            Checkout attribute query extensions.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Attributes.CheckoutAttributeQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Attributes.CheckoutAttribute},System.Boolean,System.Int32)">
            <summary>
            Standard filter for checkout attributes.
            Applies store filter, may include hidden (<see cref="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.IsActive"/>) attributes 
            and sorts by <see cref="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.DisplayOrder"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValueQueryExtensions.ApplyListTypeFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue})">
            <summary>
            Applies a filter for list control types and sorts by <see cref="P:Smartstore.Core.Checkout.Attributes.CheckoutAttribute.DisplayOrder"/>, 
            then by <see cref="P:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue.DisplayOrder"/>.
            Only checkout attributes of list types (e.g. dropdown list) can have assigned <see cref="T:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue"/> entities.
            </summary>
            <param name="query">Checkout attribute value query.</param>
            <returns>Checkout attribute value query.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Attributes.ICheckoutAttributeFormatter">
            <summary>
            Checkout Attributes formatting helper.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Attributes.ICheckoutAttributeFormatter.FormatAttributesAsync(Smartstore.Core.Checkout.Attributes.CheckoutAttributeSelection,Smartstore.Core.Identity.Customer,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Formats <see cref="T:Smartstore.Core.Checkout.Attributes.CheckoutAttribute"/> and <see cref="T:Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue"/>.
            </summary>
            <param name="selection">Checkout attribute selection</param>
            <param name="customer">Is <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>, if <c>null</c></param>
            <param name="serapator">String to seperate each attribute</param>
            <param name="htmlEncode">Indicates wheter to HTML encode the string</param>
            <param name="renderPrices">Indicates whether to render prices</param>
            <param name="allowHyperlinks">Indicates whether to display hyperlinks</param>
            <returns>
            Formated <see cref="T:Smartstore.Core.Checkout.Attributes.CheckoutAttributeSelection"/> as string.
            </returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Attributes.ICheckoutAttributeMaterializer">
            <summary>
            Checkout attribute materializer interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Attributes.ICheckoutAttributeMaterializer.MaterializeCheckoutAttributesAsync(Smartstore.Core.Checkout.Attributes.CheckoutAttributeSelection)">
            <summary>
            Gets a list of checkout attributes.
            </summary>
            <param name="selection">Checkout attribute selection.</param>
            <returns>List of checkout attributes.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Attributes.ICheckoutAttributeMaterializer.MaterializeCheckoutAttributeValuesAsync(Smartstore.Core.Checkout.Attributes.CheckoutAttributeSelection)">
            <summary>
            Gets a list of checkout attribute values.
            </summary>
            <param name="selection">Checkout attribute selection.</param>
            <returns>List of checkout attribute values.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Attributes.ICheckoutAttributeMaterializer.GetCheckoutAttributesAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Int32)">
            <summary>
            Gets checkout attributes for a cart.
            Checkout attributes which require shippable products are excluded, when <paramref name="cart"/> contains no shippable products.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="storeId">Filters checkout attributes by store identifier. 0 to load checkout attributes.</param>
            <returns>List of checkout attributes.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Attributes.ICheckoutAttributeMaterializer.CreateCheckoutAttributeSelectionAsync(Smartstore.Core.Catalog.Attributes.ProductVariantQuery,Smartstore.Core.Checkout.Cart.ShoppingCart)">
            <summary>
            Creates a checkout attribute selection.
            </summary>
            <param name="query">Product variant query to get the selected checkout attributes from.</param>
            <param name="cart">Related shopping cart.</param>
            <returns>Checkout attribute selection.</returns>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.DisplayCartAfterAddingProduct">
            <summary>
            Gets or sets a value indicating whether a custoemr should be redirected to the shopping cart page after adding a product to the cart/wishlist
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.DisplayWishlistAfterAddingProduct">
            <summary>
            Gets or sets a value indicating whether a custoemr should be redirected to the shopping cart page after adding a product to the cart/wishlist
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.MaximumShoppingCartItems">
            <summary>
            Gets or sets a value indicating maximum number of items in the shopping cart
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.MaximumWishlistItems">
            <summary>
            Gets or sets a value indicating maximum number of items in the wishlist
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.AllowActivatableCartItems">
            <summary>
            Gets or sets a value indicating whether the customer can deactivate cart items.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.AllowOutOfStockItemsToBeAddedToWishlist">
            <summary>
            Gets or sets a value indicating whether to allow out of stock items to be added to the wishlist
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.MoveItemsFromWishlistToCart">
            <summary>
            Gets or sets a value indicating whether to move items from wishlist to cart when clicking "Add to cart" button. Otherwise, they are copied
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowItemsFromWishlistToCartButton">
            <summary>
            Gets or sets a value indicating whether to show the items from wishlist to ahopping cart button
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowProductImagesOnShoppingCart">
            <summary>
            Gets or sets a value indicating whether to show product image on shopping cart page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowProductBundleImagesOnShoppingCart">
            <summary>
            Gets or sets a value indicating whether to show product bundle images on shopping cart page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowProductImagesOnWishList">
            <summary>
            Gets or sets a value indicating whether to show product image on wishlist page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowProductBundleImagesOnWishList">
            <summary>
            Gets or sets a value indicating whether to show product image on wishlist page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowDiscountBox">
            <summary>
            Gets or sets a value indicating whether to show discount box on shopping cart page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowGiftCardBox">
            <summary>
            Gets or sets a value indicating whether to show gift card box on shopping cart page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.CheckoutProcess">
            <summary>
            Gets or sets the checkout process.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.QuickCheckoutEnabled">
            <summary>
            Gets or sets a value indicating whether quick checkout is enabled.
            With quick checkout, checkout steps are skipped if the required data is already known.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.CustomersCanChangePreferredShipping">
            <summary>
            Gets or sets a value indicating whether customers can change their preferred shipping method.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.CustomersCanChangePreferredPayment">
            <summary>
            Gets or sets a value indicating whether customers can change their preferred payment method.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowCommentBox">
            <summary>
            Gets or sets a value indicating whether to show a comment box on shopping cart page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.NewsletterSubscription">
            <summary>
            Gets or sets a value indicating whether to show a checkbox to subscribe to newsletters
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowSecondBuyButtonBelowCart">
            <summary>
            Gets or sets a value indicating whether to show a second buy button (including order total) below the cart items.
            </summary>
            <remarks>
            For reasons of legal certainty, the display of a buy button below the products is recommended for stores in the EU.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowConfirmOrderLegalHint">
            <summary>
            Gets or sets a value indicating whether to show a legal hint in the order summary
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowEsdRevocationWaiverBox">
            <summary>
            Gets or sets a value indicating whether to show a revocation waiver checkbox box for ESD products
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ThirdPartyEmailHandOver">
            <summary>
            Gets or sets a value indicating whether to show a checkbox to let the customer accept to hand over email address to third party
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ThirdPartyEmailHandOverLabel">
            <summary>
            Gets or sets the label to accept to hand over the email to third party
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.CrossSellsNumber">
            <summary>
            Gets or sets a number of "Cross-sells" on shopping cart page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.EmailWishlistEnabled">
            <summary>
            Gets or sets a value indicating whether "email a wishlist" feature is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.AllowAnonymousUsersToEmailWishlist">
            <summary>
            Gets or sets a value indicating whether to enabled "email a wishlist" for anonymous users.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.MiniShoppingCartEnabled">
            <summary>Gets or sets a value indicating whether mini-shopping cart is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowProductImagesInMiniShoppingCart">
            <summary>
            Gets or sets a value indicating whether to show product images in the mini-shopping cart.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowEssentialAttributesInMiniShoppingCart">
            <summary>
            Gets or sets a value indicating whether to show essential specification attributes in the mini-shopping cart.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.DeliveryTimesInShoppingCart">
            <summary>
            Specifies the presentation of delivery times in shopping cart.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowShortDesc">
            <summary>
            Gets or sets a value indicating whether to show the product short description in the order summary
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowWeight">
            <summary>
            Gets or sets a value indicating whether to show the product weight in the order summary
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowBasePrice">
            <summary>
            Gets or sets a value indicating whether to show the product short description in the order summary
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.ShowLinkedAttributeValueQuantity">
            <summary>
            Gets or sets a value indicating whether to show the quantity of linked product attribute value
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.MaxQuantityInputDropdownItems">
            <summary>
            Gets or sets the upper limit of possible order quantities up to which a drop-down menu for entering the order quantity is to be offered.
            If the number is greater, a numeric input field is used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.AddProductsToBasketInSinglePositions">
            <summary>
            Gets or sets a value indicating whether to add products to the basket in single positions
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.IsTerminalCheckoutActivated">
            <summary>
            Gets a value indicating whether the terminal checkout is activated.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.AddToCartContext">
            <summary>
            Represents a context of adding to the shopping cart
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.Warnings">
            <summary>
            Gets or sets warnings
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.Item">
            <summary>
            Gets or sets shopping cart item
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.ChildItems">
            <summary>
            Gets or sets child shopping cart items
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.BundleItem">
            <summary>
            Gets or sets product bundle item
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.Customer">
            <summary>
            Gets or sets the customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.Product">
            <summary>
            Gets or sets the product
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.CartType">
            <summary>
            Gets or sets the shopping cart type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.VariantQuery">
            <summary>
            Gets or sets the product variant query
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.RawAttributes">
            <summary>
            Gets or sets the product variant attributes in XML or JSON format
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.AttributeSelection">
            <summary>
            Gets the product variant attribute selection.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.CustomerEnteredPrice">
            <summary>
            Gets or sets the price entered by customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.Quantity">
            <summary>
            Gets or sets the quantity
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.AutomaticallyAddRequiredProducts">
            <summary>
            Gets or sets a value indicating whether to add required products
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.AutomaticallyAddBundleProducts">
            <summary>
            Gets or sets a value indicating whether to add all bundle (child) products
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.StoreId">
            <summary>
            Gets or sets store identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.AddToCartContext.BundleItemId">
            <summary>
            Gets bundle item id
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.CheckoutNewsletterSubscription">
            <summary>
            Setting for newsletter subscription in checkout
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Cart.CheckoutNewsletterSubscription.None">
            <summary>
            No newsletter subscription checkbox
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Cart.CheckoutNewsletterSubscription.Deactivated">
            <summary>
            Deactivated newsletter subscription checkbox
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Cart.CheckoutNewsletterSubscription.Activated">
            <summary>
            Activated newsletter subscription checkbox
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.CheckoutThirdPartyEmailHandOver">
            <summary>
            Setting to hand over customer email to third party
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Cart.CheckoutThirdPartyEmailHandOver.None">
            <summary>
            No third party email hand over checkbox
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Cart.CheckoutThirdPartyEmailHandOver.Deactivated">
            <summary>
            Deactivated third party email hand over checkbox
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Cart.CheckoutThirdPartyEmailHandOver.Activated">
            <summary>
            Activated third party email hand over checkbox
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem">
            <summary>
            Represents an organized shopping cart item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem.Item">
            <summary>
            Gets the shopping cart item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem.Active">
            <summary>
            Gets a value indicating whether the cart item is active.
            May differ from <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.Active"/> and has precedence over it.
            Always <c>true</c> if <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartSettings.AllowActivatableCartItems"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem.ChildItems">
            <summary>
            Gets or sets the list of child items.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem.CustomProperties">
            <summary>
            Gets or sets custom properties dictionary.
            Use this for any custom data required along cart processing.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.RecurringCycleInfo">
            <summary>
            Represents the recurring cycle information
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.RecurringCycleInfo.CycleLength">
            <summary>
            Gets or sets the cycle length
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.RecurringCycleInfo.TotalCycles">
            <summary>
            Gets or sets total number of cycles
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.RecurringCycleInfo.CyclePeriod">
            <summary>
            Gets or sets the recurring product cycle period
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.RecurringCycleInfo.ErrorMessage">
            <summary>
            Gets or sets an error message
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.RecurringCycleInfo.HasValues">
            <summary>
            Gets a value indicating whether the nullable properties have already been assigned
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCart">
            <summary>
            Represents a shopping cart.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCart.#ctor(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Collections.Generic.IEnumerable{Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem})">
            <summary>
            Constructor that applies the properties of another <see cref="T:Smartstore.Core.Checkout.Cart.ShoppingCart"/> instance.
            </summary>
            <param name="other">Other instance whose properties are applied.</param>
            <param name="items">Items to apply. If <c>null</c> items of <paramref name="other"/> are applied.</param>
            <example>new ShoppingCart(otherCart, otherCart.Items.Where(x => x.Active))</example>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCart.Items">
            <summary>
            Array of cart items.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCart.HasItems">
            <summary>
            A value indicating whether the cart contains cart items.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCart.CartType">
            <summary>
            Shopping cart type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCart.Customer">
            <summary>
            Customer of the cart.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCart.StoreId">
            <summary>
            Store identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCart.IsShippingRequired">
            <summary>
            Gets a value indicating whether the cart requires shipping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCart.Requirements">
            <summary>
            Checkout requirements.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCart.WithActiveItemsOnly">
            <summary>
            Returns a cart that only contains active items of this cart.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartItem">
            <summary>
            Represents a shopping cart item
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.Active">
            <summary>
            A value indicating whether the cart item is active.
            Inactive items are not ordered and remain in the shopping cart after the order is placed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.StoreId">
            <summary>
            Gets or sets the store identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.ParentItemId">
            <summary>
            The parent shopping cart item identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.BundleItemId">
            <summary>
            Gets or sets ths bundle item identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.CustomerId">
            <summary>
            Gets or sets the customer identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.ProductId">
            <summary>
            Gets or sets the product identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.RawAttributes">
            <summary>
            Gets or sets the product variant attributes in XML or JSON format
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.CustomerEnteredPrice">
            <summary>
            Gets or sets the price enter by a customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.Quantity">
            <summary>
            Gets or sets the quantity
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.ShoppingCartTypeId">
            <summary>
            Gets or sets the shopping cart type identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.ShoppingCartType">
            <summary>
            Gets or sets the shopping cart type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of instance creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.UpdatedOnUtc">
            <summary>
            Gets or sets the date and time of instance update
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.Product">
            <summary>
            Gets or sets the product
            </summary>        
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.Customer">
            <summary>
            Gets or sets the customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.BundleItem">
            <summary>
            Gets or sets the product bundle item
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.IsFreeShipping">
            <summary>
            Gets a value indicating whether the shopping cart item is free shipping
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.IsShippingEnabled">
            <summary>
            Gets a value indicating whether the shopping cart item is ship enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.IsTaxExempt">
            <summary>
            Gets a value indicating whether the shopping cart item is tax exempt
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartLineItem">
            <summary>
            Represents a single line in the shopping cart. At the moment this is always a product.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartLineItem.Item">
            <summary>
            The shopping cart item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartLineItem.UnitPrice">
            <summary>
            The calculated unit price in the primary currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartLineItem.Subtotal">
            <summary>
            The calculated subtotal of the line item in the primary currency.
            It is the <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartLineItem.UnitPrice"/> multiplied by <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.Quantity"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartShippingTotal">
            <summary>
            Represents a calculated shopping cart shipping total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartShippingTotal.ShippingTotal">
            <summary>
            Cart shipping total in the primary currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartShippingTotal.Option">
            <summary>
            The applied shipping option.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartShippingTotal.AppliedDiscount">
            <summary>
            Applied discount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartShippingTotal.TaxRate">
            <summary>
            Tax rate.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartShippingTotal.ToString">
            <summary>
            Returns the rounded and formatted <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartShippingTotal.ShippingTotal"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartSubtotal">
            <summary>
            Represents a calculated shopping cart subtotal.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSubtotal.SubtotalWithoutDiscount">
            <summary>
            Cart subtotal excluding discount in the primary currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSubtotal.SubtotalWithDiscount">
            <summary>
            Cart subtotal including discount in the primary currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSubtotal.DiscountAmount">
            <summary>
            Discount amount in the primary currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSubtotal.AppliedDiscount">
            <summary>
            Applied discount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSubtotal.TaxRates">
            <summary>
            Tax rates.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartSubtotal.LineItems">
            <summary>
            Shopping cart line items. A line item represents a single line in the shopping cart.
            At the moment this is always a product. Bundle items are not included as line items.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartSubtotal.ToString">
            <summary>
            Overrides default <see cref="M:System.Object.ToString"/>. Returns formatted <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartSubtotal.SubtotalWithDiscount"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.TaxRatesDictionary.Add(System.Decimal,System.Decimal)">
            <summary>
            Adds a tax rate and the related tax amount.
            </summary>
            <param name="taxRate">Tax rate.</param>
            <param name="taxAmount">Tax amount.</param>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartTotal">
            <summary>
            Represents a calculated shopping cart total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.Total">
            <summary>
            Total amount of the shopping cart in the primary currency. <c>null</c> if the cart total could not be calculated yet.
            The total amount is rounded if rounding is enabled for <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.ToNearestRounding">
            <summary>
            The amount by which the total was rounded in the primary currency, if rounding to the nearest multiple of denomination 
            (cash rounding) is activated for the currency.
            </summary>
            <example>"Schweizer Rappenrundung" of 16.23 -> <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.Total"/> = 16.25 and <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.ToNearestRounding"/> = 0.02.</example>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.DiscountAmount">
            <summary>
            Applied discount amount in the primary currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.AppliedDiscount">
            <summary>
            Applied discount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.RedeemedRewardPoints">
            <summary>
            Reward points to redeem
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.RedeemedRewardPointsAmount">
            <summary>
            Reward points amount to redeem in the primary currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.CreditBalance">
            <summary>
            Credit balance in the primary currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.AppliedGiftCards">
            <summary>
            Applied gift cards.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.LineItems">
            <summary>
            Shopping cart line items. A line item represents a single line in the shopping cart.
            At the moment this is always a product. Bundle items are not included as line items.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.ConvertedAmount">
            <summary>
            Total converted from the primary currency.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.ToString">
            <summary>
            Returns the rounded and formatted <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.Total"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.ConvertedAmounts">
            <summary>
            Represents amount of <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.Total"/> and <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.ToNearestRounding"/> converted to <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.ConvertedAmounts.Total">
            <summary>
            Shopping cart total amount converted to <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>. <c>null</c> if the cart total could not be calculated now.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.ShoppingCartTotal.ConvertedAmounts.ToNearestRounding">
            <summary>
            Amount by which the total was rounded converted to <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>, if rounding to the nearest multiple of denomination 
            (cash rounding) is activated for the currency.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartType">
            <summary>
            Represents a shoping cart type
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Cart.ShoppingCartType.ShoppingCart">
            <summary>
            Shopping cart
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Cart.ShoppingCartType.Wishlist">
            <summary>
            Wishlist
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.Events.MigrateShoppingCartEvent">
            <summary>
            Represents a shopping cart migration event.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.Events.MigrateShoppingCartEvent.FromCustomer">
            <summary>
            Gets the customer to migrate from.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.Events.MigrateShoppingCartEvent.ToCustomer">
            <summary>
            Gets the customer to migrate to.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.Events.MigrateShoppingCartEvent.StoreId">
            <summary>
            Gets the store identifier.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.Events.RenderingOrderTotalsEvent">
            <summary>
            Represents a rendering order totals event
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.Events.RenderingOrderTotalsEvent.Customer">
            <summary>
            Gets the customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.Events.RenderingOrderTotalsEvent.StoreId">
            <summary>
            Gets the store id
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.Events.ValidatingCartEvent">
            <summary>
            Represents a validating cart event.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.Events.ValidatingCartEvent.#ctor(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new <see cref="T:Smartstore.Core.Checkout.Cart.Events.ValidatingCartEvent"/>.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="warnings">List of warnings.</param>
            <remarks>Assign an <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> to <see cref="P:Smartstore.Core.Checkout.Cart.Events.ValidatingCartEvent.Result"/> to redirect the user, after the event has been completed.</remarks>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.Events.ValidatingCartEvent.Cart">
            <summary>
            Gets the shopping cart.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.Events.ValidatingCartEvent.Warnings">
            <summary>
            Gets warnings
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Cart.Events.ValidatingCartEvent.Result">
            <summary>
            Gets or sets the result
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartValidatorExtensions.ValidateProductAttributesAsync(Smartstore.Core.Checkout.Cart.IShoppingCartValidator,Smartstore.Core.Checkout.Cart.ShoppingCartItem,System.Collections.Generic.IEnumerable{Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem},System.Collections.Generic.IList{System.String})">
            <summary>
            Validates selected product attributes.
            </summary>
            <param name="cartItem">The cart item with product and attribute selection.</param>
            <param name="cartItems">The entire shopping cart.</param>
            <param name="warnings">List of returned warnings.</param>
            <returns><c>True</c> if selected attributes are valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartExtensions.GetTotalQuantity(Smartstore.Core.Checkout.Cart.ShoppingCart)">
            <summary>
            Gets the total quantity of products in the cart.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartExtensions.GetAllProducts(Smartstore.Core.Checkout.Cart.ShoppingCart)">
            <summary>
            Gets all products in cart, including those of bundle items.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartExtensions.IncludesMatchingItems(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Func{Smartstore.Core.Catalog.Products.Product,System.Boolean})">
            <summary>
            Gets a value indicating whether the cart includes products matching the condition.
            </summary>
            <param name="matcher">The condition to match cart items.</param>
            <returns><c>True</c> if any product matches the condition, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartExtensions.ContainsRecurringItem(Smartstore.Core.Checkout.Cart.ShoppingCart)">
            <summary>
            Gets a value indicating whether the shopping cart contains a recurring item.
            </summary>
            <returns>A value indicating whether the shopping cart contains a recurring item.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartExtensions.GetRecurringCycleInfo(Smartstore.Core.Checkout.Cart.ShoppingCart,Smartstore.Core.Localization.ILocalizationService)">
            <summary>
            Gets the recurring cycle information.
            </summary>
            <returns><see cref="T:Smartstore.Core.Checkout.Cart.RecurringCycleInfo"/>.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartItemExtensions">
            <summary>
            Shopping cart extension methods.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartItemExtensions.FilterByCartType(System.Collections.Generic.ICollection{Smartstore.Core.Checkout.Cart.ShoppingCartItem},Smartstore.Core.Checkout.Cart.ShoppingCartType,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Returns a filtered list of <see cref="T:Smartstore.Core.Checkout.Cart.ShoppingCartItem"/>s by <see cref="T:Smartstore.Core.Checkout.Cart.ShoppingCartType"/> and <paramref name="storeId"/>
            and sorts by <see cref="P:Smartstore.Domain.BaseEntity.Id"/> ascending.
            </summary>
            <param name="cart">The cart collection the filter gets applied on.</param>
            <param name="cartType"><see cref="T:Smartstore.Core.Checkout.Cart.ShoppingCartType"/> to filter by.</param>
            <param name="storeId">Store identifier to filter by.</param>
            <param name="active">A value indicating whether to load active items. <c>null</c> to load all items.</param>
            <param name="hasParent">A value indicating whether to load items that has a parent item. <c>null</c> to load all items.</param>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartItemQueryExtensions">
            <summary>
            Shopping cart item query extensions
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartItemQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Cart.ShoppingCartItem},Smartstore.Core.Checkout.Cart.ShoppingCartType,System.Int32,Smartstore.Core.Identity.Customer)">
            <summary>        
            Applies standard filter for shopping cart item.
            Applies store filter, shopping cart type and customer mapping filter.
            </summary>
            <returns>Query ordered by ID</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartItemQueryExtensions.ApplyExpiredCartItemsFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Cart.ShoppingCartItem},System.DateTime,Smartstore.Core.Identity.Customer)">
            <summary>
            Applies expired shopping cart items filter.
            Filters all items with a date time older than <paramref name="olderThanUtc"/>.
            </summary>
            <param name="olderThanUtc">Expiry threshold date time.</param>
            <param name="customer">Customer of cart. Can be null to apply for all customers.</param>
            <returns>Filtered query with no expired cart items.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartItemQueryExtensions.CountCartItemsAsync(System.Linq.IQueryable{Smartstore.Core.Checkout.Cart.ShoppingCartItem},Smartstore.Core.Identity.Customer,Smartstore.Core.Checkout.Cart.ShoppingCartType,System.Int32)">
            <summary>
            Gets the customers shopping cart items count async.
            </summary>
            <param name="customer">Customer of cart to be counted.</param>
            <param name="cartType">Shopping cart type.</param>
            <param name="storeId">Store identifier.</param>
            <returns>Number of items.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartItemQueryExtensions.GetOpenCartTypeSubTotalAsync(System.Linq.IQueryable{Smartstore.Core.Checkout.Cart.ShoppingCartItem},Smartstore.Core.Checkout.Cart.ShoppingCartType,System.Nullable{System.Boolean})">
            <summary>
            Gets all open sub totals of defined <see cref="T:Smartstore.Core.Checkout.Cart.ShoppingCartType"/>.
            Filters query for entires with matching <see cref="T:Smartstore.Core.Checkout.Cart.ShoppingCartType"/> and where the product is not null.
            </summary>
            <param name="query">Shopping cart item query to get sum.</param>
            <param name="cartType"><see cref="T:Smartstore.Core.Checkout.Cart.ShoppingCartType"/> of shopping cart items.</param>
            <param name="active">A value indicating whether to only load active/inactive items. <c>null</c> to load all items.</param>
            <returns>Sub total of all open wish lists.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.IShoppingCartService">
            <summary>
            Shopping cart service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.AddItemToCartAsync(Smartstore.Core.Checkout.Cart.AddToCartContext)">
            <summary>
            Adds <see cref="P:Smartstore.Core.Checkout.Cart.AddToCartContext.Item"/> as well as all <see cref="P:Smartstore.Core.Checkout.Cart.AddToCartContext.ChildItems"/> to customers shopping cart 
            and automatically updates database async.
            </summary>
            <param name="ctx">Context info about the items to be added to the cart.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.AddToCartAsync(Smartstore.Core.Checkout.Cart.AddToCartContext)">
            <summary>
            Adds or creates cart items from <see cref="P:Smartstore.Core.Checkout.Cart.AddToCartContext.Product"/> to the customers shopping cart and automatically. 
            Updates the database async as long as the item is not a bundle or it is a bundle and <see cref="P:Smartstore.Core.Checkout.Cart.AddToCartContext.AutomaticallyAddBundleProducts"/> is true.
            </summary>
            <remarks>
            If you manually assign <see cref="T:Smartstore.Core.Checkout.Cart.AddToCartContext"/> with bundle items, then use <see cref="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.AddItemToCartAsync(Smartstore.Core.Checkout.Cart.AddToCartContext)"/> 
            afterwards to commit items to the database.
            </remarks>
            <param name="ctx">Context info about the product to be added to the cart.</param>
            <returns><c>True</c> if the item was successfully added to the cart; otherwise <c>false</c></returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.CopyAsync(Smartstore.Core.Checkout.Cart.AddToCartContext)">
            <summary>
            Copies an item and all its child items to another cart async.
            </summary>
            <param name="ctx">Context information about the item to be copied and the client to be received.</param>
            <returns><c>True</c> if the item was successfully added to the cart; otherwise <c>false</c></returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.DeleteCartItemAsync(Smartstore.Core.Checkout.Cart.ShoppingCartItem,System.Boolean,System.Boolean)">
            <summary>
            Deletes a shopping cart item  (including child items like bundle items).
            </summary>
            <param name="cartItem">Shopping cart item to delete.</param>
            <param name="resetCheckoutData">A value indicating whether to reset checkout data.</param>
            <param name="removeInvalidCheckoutAttributes">
            A value indicating whether to remove invalid checkout attributes.
            For example removes checkout attributes that require shipping, if the cart does not require shipping at all.
            </param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.DeleteCartAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Boolean,System.Boolean)">
            <summary>
            Deletes all shopping cart items in a cart (including child items like bundle items).
            </summary>
            <param name="cart">Shopping cart to delete.</param>
            <param name="resetCheckoutData">A value indicating whether to reset checkout data.</param>
            <param name="removeInvalidCheckoutAttributes">
            A value indicating whether to remove invalid checkout attributes.
            For example removes checkout attributes that require shipping, if the cart does not require shipping at all.
            </param>
            <returns>Number of deleted shopping cart items.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.GetCartAsync(Smartstore.Core.Identity.Customer,Smartstore.Core.Checkout.Cart.ShoppingCartType,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Gets a shopping cart for a customer.
            </summary>
            <param name="customer">Customer of cart. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="cartType">Shopping cart type.</param>
            <param name="storeId">Store identifier.</param>
            <param name="activeOnly">
            A value indicating whether to load active items.
            <c>true</c> to only load active items (default). <c>null</c> to load all items (such as on the shopping cart page).
            </param>
            <returns>Shopping cart.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.CountProductsInCartAsync(Smartstore.Core.Identity.Customer,Smartstore.Core.Checkout.Cart.ShoppingCartType,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Gets the total number of products in a shopping cart.
            This method has a performance benefit over <see cref="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.GetCartAsync(Smartstore.Core.Identity.Customer,Smartstore.Core.Checkout.Cart.ShoppingCartType,System.Int32,System.Nullable{System.Boolean})" />:
            if the cart is cached, the number is determined from this, otherwise it is counted without the payload of loading and processing the entire cart.
            </summary>
            <param name="customer">Customer of cart. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="cartType">Shopping cart type.</param>
            <param name="storeId">Store identifier.</param>
            <param name="activeOnly">
            A value indicating whether to count active items.
            <c>true</c> to only count active items (default). <c>null</c> to count all items (such as on the shopping cart page).
            </param>
            <returns>Number of items in a shopping cart.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.MigrateCartAsync(Smartstore.Core.Identity.Customer,Smartstore.Core.Identity.Customer)">
            <summary>
            Migrates all cart items from one to another customer async.
            </summary>
            <param name="fromCustomer">From this customers cart.</param>
            <param name="toCustomer">To this customers cart.</param>       
            <returns><c>True</c> when cart has been successfully migrated, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.UpdateCartItemAsync(Smartstore.Core.Identity.Customer,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Updates the shopping cart item by item identifier of a customer.
            </summary>
            <param name="customer">Customer of cart items.</param>
            <param name="cartItemId">Identifier of the cart item to update.</param>
            <param name="quantity">New quantity. <c>null</c> to not update <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.Quantity"/>.</param>
            <param name="active">A value indicating whether the cart item is active. <c>null</c> to not update <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.Active"/>.</param>
            <param name="resetCheckoutData">A value indicating whether to reset customer's checkout data.</param>
            <returns>List of error messages.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.SaveCartDataAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Collections.Generic.IList{System.String},Smartstore.Core.Catalog.Attributes.ProductVariantQuery,System.Nullable{System.Boolean},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Saves data entered on the shopping cart page (checkout attributes and whether to use reward points).
            Typically called right before entering checkout.
            It is used for example by payment buttons that skip checkout and redirect on a payment provider page.
            </summary>
            <param name="cart">Shopping cart, if <c>null</c> the cart of the current customer and store is loaded.</param>
            <param name="warnings">List of returned warnings.</param>
            <param name="query"><see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantQuery"/> with checkout attributes to save.</param>
            <param name="useRewardPoints">A value indicating whether to use reward points during checkout. <c>null</c> to ignore.</param>
            <param name="resetCheckoutData">A value indicating whether to reset customer's checkout data.</param>
            <param name="validateCheckoutAttributes">A value indicating whether to validate checkout attributes.</param>
            <param name="validateRequiredProducts">A value indicating whether to validate required products.</param>
            <returns><c>True</c> when the shopping cart is valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartService.FindItemInCart(Smartstore.Core.Checkout.Cart.ShoppingCart,Smartstore.Core.Checkout.Cart.ShoppingCartType,Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,System.Nullable{Smartstore.Core.Common.Money})">
            <summary>
            Finds a cart item in a shopping cart.
            </summary>
            <remarks>Products with the same identifier need to have matching attribute selections as well.</remarks>
            <param name="cart">Shopping cart to search.</param>
            <param name="shoppingCartType">Shopping cart type to search.</param>
            <param name="product">Product to search for.</param>
            <param name="selection">Attribute selection.</param>
            <param name="customerEnteredPrice">Customers entered price needs to match (if enabled by product).</param>
            <returns>Matching <see cref="T:Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem"/> or <c>null</c> if none was found.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.IShoppingCartValidator">
            <summary>
            Shopping cart validator interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartValidator.ValidateAccessPermissionsAsync(Smartstore.Core.Identity.Customer,Smartstore.Core.Checkout.Cart.ShoppingCartType,System.Collections.Generic.IList{System.String})">
            <summary>
            Validates customer's access to the shopping cart or the wish list.
            </summary>
            <param name="cartType">Shopping cart type which is to be validated.</param>
            <param name="customer">Customer whose permissions are to be validated.</param>
            <param name="warnings">List of errors as string.</param>
            <returns><c>True</c> when the customer is allowed to access respective cart type, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartValidator.ValidateBundleItem(Smartstore.Core.Catalog.Products.ProductBundleItem,System.Collections.Generic.IList{System.String})">
            <summary>
            Validates bundle items.
            </summary>
            <param name="bundleItems"><see cref="T:Smartstore.Core.Catalog.Products.ProductBundleItem"/> collection to validate.</param>
            <param name="warnings">List of errors as string.</param>
            <returns><c>True</c> when all bundle items are valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartValidator.ValidateCartAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Collections.Generic.IList{System.String},System.Boolean,System.Boolean)">
            <summary>
            Validates shopping cart for products not found (null), recurring and standard product mix-ups as well as checkout attributes.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="warnings">List of returned warnings.</param>
            <param name="validateCheckoutAttributes">A value indicating whether to validate checkout attributes of <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCart.Customer"/>.</param>
            <param name="validateRequiredProducts">A value indicating whether to validate required products.</param>
            <returns><c>True</c> when all items as well as the <see cref="T:Smartstore.Core.Checkout.Attributes.CheckoutAttributeSelection"/> are valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartValidator.ValidateAddToCartItemAsync(Smartstore.Core.Checkout.Cart.AddToCartContext,Smartstore.Core.Checkout.Cart.ShoppingCartItem,System.Collections.Generic.IEnumerable{Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem})">
            <summary>
            Validates add to cart item for product errors, attribute selection errors, gift card info errors, missing required products, bundle item and child items errors.
            </summary>
            <param name="ctx">Context object containing all the information about the item and context for adding it to the shopping cart.</param>
            <param name="cartItems">Shopping cart items of customer to validate.</param>
            <returns><c>True</c> when no error occured, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartValidator.ValidateItemsMaximumCartQuantity(Smartstore.Core.Checkout.Cart.ShoppingCartType,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Validates shopping cart for maximum number of cart/wish list items.
            </summary>
            <param name="cartType"><see cref="T:Smartstore.Core.Checkout.Cart.ShoppingCartType"/> of shopping cart to validate.</param>
            <param name="cartItemsCount">Number of shopping cart items.</param>
            <param name="warnings">List of errors as string.</param>
            <returns><c>True</c> when respective shopping cart limit is not exceeded, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartValidator.ValidateGiftCardInfo(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,System.Collections.Generic.IList{System.String})">
            <summary>
            Validates cart item for <see cref="T:Smartstore.Core.Checkout.GiftCards.GiftCardInfo"/>.
            </summary>
            <param name="product">Product.</param>
            <param name="selection">Selected product attributes.</param>
            <param name="warnings">List of warnings.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartValidator.ValidateProductAsync(Smartstore.Core.Checkout.Cart.ShoppingCartItem,System.Collections.Generic.IEnumerable{Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem},System.Collections.Generic.IList{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Validates product settings, authorization and availability.
            </summary>
            <param name="cartItem">Shopping cart item with product and settings.</param>
            <param name="cartItems">Shopping cart items of customer to validate.</param>
            <param name="warnings">List of errors as string.</param>
            <param name="storeId">Store identifier.</param>
            <param name="quantity">Quantity to validate. If <c>null</c>, <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCartItem.Quantity"/> is instead.</param>
            <returns><c>True</c> when product is valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartValidator.ValidateProductAttributesAsync(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.Attributes.ProductVariantAttributeSelection,System.Int32,System.Collections.Generic.IList{System.String},System.Int32,Smartstore.Core.Identity.Customer,Smartstore.Core.Catalog.Products.ProductBundleItem,Smartstore.Core.Checkout.Cart.ShoppingCartType,System.Collections.Generic.IEnumerable{Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem})">
            <summary>
            Validates selected product attributes.
            </summary>
            <param name="product">Product.</param>
            <param name="selection">Selected attributes.</param>
            <param name="storeId">Store identifier.</param>
            <param name="warnings">List of returned warnings.</param>
            <param name="quantity">Product quantity.</param>
            <param name="customer">Customer. If <c>null</c>, customer will be obtained via <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/>.</param>
            <param name="bundleItem">Product bundle item (if any).</param>/// 
            <param name="cartType">Shopping cart type.</param>
            <param name="cartItems">Entire shopping cart (if any).</param>
            <returns><c>True</c> if selected attributes are valid, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.IShoppingCartValidator.ValidateRequiredProductsAsync(Smartstore.Core.Catalog.Products.Product,System.Collections.Generic.IEnumerable{Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem},System.Collections.Generic.IList{System.String})">
            <summary>
            Validates the product on all required products.
            </summary>
            <param name="product">Product to validate.</param>
            <param name="cartItems">Shopping cart items used for required products validation.</param>
            <param name="warnings">List of errors as string.</param>
            <returns><c>True</c> when the shopping cart already contains all required products, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartService">
            <summary>
            Shopping cart service methods.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Cart.ShoppingCartService.RemoveInvalidCheckoutAttributesAsync(Smartstore.Core.Identity.Customer,System.Int32)">
            <summary>
            Removes invalid checkout attributes. For example if the attribute requires shipping but the cart does not require shipping at all.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Cart.ShoppingCartValidator">
            <summary>
            Shopping cart validation methods.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.GiftCards.AppliedGiftCard">
            <summary>
            Represents an applied gift card.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.AppliedGiftCard.UsableAmount">
            <summary>
            Gets or sets the usable amount in primary currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.AppliedGiftCard.GiftCard">
            <summary>
            Gets or sets the gift card.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.GiftCards.GiftCard">
            <summary>
            Represents a gift card
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.GiftCardTypeId">
            <summary>
            Gets or sets the gift card type identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.GiftCardType">
            <summary>
            Gets or sets the gift card type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.PurchasedWithOrderItemId">
            <summary>
            Gets or sets the associated order item identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.Amount">
            <summary>
            Gets or sets the amount
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.IsGiftCardActivated">
            <summary>
            Gets or sets a value indicating whether gift card is activated
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.GiftCardCouponCode">
            <summary>
            Gets or sets a gift card coupon code
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.RecipientName">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.RecipientEmail">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.SenderName">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.SenderEmail">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.Message">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.IsRecipientNotified">
            <summary>
            Gets or sets a value indicating whether recipient is notified
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of instance creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.GiftCardUsageHistory">
            <summary>
            Gets or sets the gift card usage history
            </summary> 
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCard.PurchasedWithOrderItem">
            <summary>
            Gets or sets the associated order item
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.GiftCards.GiftCardCouponCodeConverter">
            <summary>
            Gift card coupon code converter
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.GiftCards.GiftCardCouponCode">
            <summary>
            This class is needed for <see cref="T:Smartstore.Core.Checkout.GiftCards.GiftCardCouponCodeConverter"/> to explicitly define converter from 
            <see cref="T:System.Collections.Generic.List`1"/> to string and vice versa.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.GiftCards.GiftCardCouponCode.#ctor(System.String)">
            <summary>
            This class is needed for <see cref="T:Smartstore.Core.Checkout.GiftCards.GiftCardCouponCodeConverter"/> to explicitly define converter from 
            <see cref="T:System.Collections.Generic.List`1"/> to string and vice versa.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.IGiftCardInfo.RecipientName">
            <summary>
            The name of the recipient.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.IGiftCardInfo.RecipientEmail">
            <summary>
            The email address of the recipient.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.IGiftCardInfo.SenderName">
            <summary>
            The name of the giver of the gift card.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.IGiftCardInfo.SenderEmail">
            <summary>
            The email address of the giver of the gift card.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.IGiftCardInfo.Message">
            <summary>
            An optional message to the recipient.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardInfo.RecipientName">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardInfo.RecipientEmail">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardInfo.SenderName">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardInfo.SenderEmail">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardInfo.Message">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Checkout.GiftCards.GiftCardQueryItem.#ctor(System.String,System.String)">
            <summary>
            Represents a gift card query item
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardQueryItem.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardQueryItem.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardQueryItem.ProductId">
            <summary>
            Gets or sets product identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardQueryItem.BundleItemId">
            <summary>
            Gets or sets bundle item identifier
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.GiftCards.GiftCardQueryItem.CreateKey(System.Int32,System.Int32,System.String)">
            <summary>
            Creates gift card key with product identifier, bundle item identifier and with <see cref="P:Smartstore.Core.Checkout.GiftCards.GiftCardQueryItem.Name"/> if possible
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.GiftCards.GiftCardQueryItem.ToString">
            <summary>
            Overrides default <see cref="M:System.Object.ToString"/>. Calls <see cref="M:Smartstore.Core.Checkout.GiftCards.GiftCardQueryItem.CreateKey(System.Int32,System.Int32,System.String)"/> to generate key string
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.GiftCards.GiftCardType">
            <summary>
            Represents a gift card type
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.GiftCards.GiftCardType.Virtual">
            <summary>
            Virtual
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.GiftCards.GiftCardType.Physical">
            <summary>
            Physical
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.GiftCards.GiftCardUsageHistory">
            <summary>
            Represents a gift card usage history entry
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardUsageHistory.GiftCardId">
            <summary>
            Gets or sets the gift card identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardUsageHistory.UsedWithOrderId">
            <summary>
            Gets or sets the order identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardUsageHistory.UsedValue">
            <summary>
            Gets or sets the used value (amount)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardUsageHistory.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of instance creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardUsageHistory.GiftCard">
            <summary>
            Gets or sets the gift card
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.GiftCards.GiftCardUsageHistory.UsedWithOrder">
            <summary>
            Gets the order associated with the gift card
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.GiftCards.GiftCardMessageFactoryExtensions.SendGiftCardNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.GiftCards.GiftCard,System.Int32)">
            <summary>
            Sends a gift card notification to the customer.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.GiftCards.IGiftCardService">
            <summary>
            Gift card service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.GiftCards.IGiftCardService.GetValidGiftCardsAsync(System.Int32,Smartstore.Core.Identity.Customer)">
            <summary>
            Gets valid gift cards as <see cref="T:Smartstore.Core.Checkout.GiftCards.AppliedGiftCard"/>.
            Valid gift cards are activated, do have a remaining usable amount and belong to the indicated store
            </summary>
            <param name="customer">Gets gift cards applied by customer</param>
            <remarks>
            If customer is not null, coupon codes applied by the customer are used as additional filters
            </remarks>
            <returns>
            Valid applied gift cards (by customer if not null) with remaining usable amount
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.GiftCards.IGiftCardService.ValidateGiftCardAsync(Smartstore.Core.Checkout.GiftCards.GiftCard,System.Int32)">
            <summary>
            Checks whether the gift card is valid
            </summary>
            <remarks>
            Access <see cref="P:Smartstore.Core.Checkout.GiftCards.GiftCard.PurchasedWithOrderItem"/>, <see cref="P:Smartstore.Core.Checkout.Orders.OrderItem.Order"/> navigation properties. 
            The caller is responsible for eager loading.
            Calls <see cref="M:Smartstore.Core.Checkout.GiftCards.IGiftCardService.GetRemainingAmountAsync(Smartstore.Core.Checkout.GiftCards.GiftCard)"/>
            </remarks>
            <returns>
            <c>True</c> if gift card is valid, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.GiftCards.IGiftCardService.GetRemainingAmountAsync(Smartstore.Core.Checkout.GiftCards.GiftCard)">
            <summary>
            Gets the gift cards remaining amount in primary currency.
            </summary>
            <remarks>
            Accesses <see cref="P:Smartstore.Core.Checkout.GiftCards.GiftCard.GiftCardUsageHistory"/>. 
            The caller is responsible for eager loading
            </remarks>
            <returns>
            Remaining usable gift card amount, including the current store's primary currency.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.GiftCards.IGiftCardService.GenerateGiftCardCode">
            <summary>
            Generates a new gift card code.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.IsReOrderAllowed">
            <summary>
            Gets or sets a value indicating whether customer can make a re-order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.OrderTotalMinimum">
            <summary>
            Gets or sets a minimum order total amount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.OrderTotalMaximum">
            <summary>
            Gets or sets a maximum order total amount
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.MultipleOrderTotalRestrictionsExpandRange">
            <summary>
            Gets or sets a value indicating how customer group restrictions are applied with each other.
            <c>true</c>: lowest possible total amount span gets applied. <c>false</c>: highest possible total amount span gets applied.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.AnonymousCheckoutAllowed">
            <summary>
            Gets or sets a value indicating whether to allow anonymous checkout.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.DisableOrderCompletedPage">
            <summary>
            Gets or sets a value indicating whether "Order completed" page should be skipped-
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.ReturnRequestsEnabled">
            <summary>
            Gets or sets a value indicating whether to enable return requests.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.ReturnRequestReasons">
            <summary>
            Gets or sets a list of return request reasons.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.ReturnRequestActions">
            <summary>
            Gets or sets a list of return request actions.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.NumberOfDaysReturnRequestAvailable">
            <summary>
            Gets or sets a number of days that the return request link will be available for customers after placing an order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.GiftCards_Activated_OrderStatusId">
            <summary>
            Gets or sets the order status when gift cards are activated.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.GiftCards_Deactivated_OrderStatusId">
            <summary>
            Gets or sets the order status when gift cards are deactivated.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.MinimumOrderPlacementInterval">
            <summary>
            Gets or sets an order placement interval in seconds (prevent 2 orders being placed within an X seconds time frame).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.DisplayOrdersOfAllStores">
            <summary>
            Gets or sets a value indicating whether to display all orders of all stores to a customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.OrderListPageSize">
            <summary>
            Gets or sets the page size of the order list.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.RecurringPaymentListPageSize">
            <summary>
            Gets or sets the page size of the recurring payment list.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderSettings.MaxMessageOrderAgeInDays">
            <summary>
            Gets or sets the maximum order age in days up to which to create and send messages.
            Set to 0 to always send messages.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.UpdateOrderDetailsContext">
            <summary>
            Contains data that is used to recalculate details of an order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.UpdateOrderDetailsContext.UpdateOrderItem">
            <summary>
            Indicates whether to update the order item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.UpdateOrderDetailsContext.UpdateTotals">
            <summary>
            Indicates whether to update order totals if order is in pending state.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.UpdateOrderDetailsContext.UpdateRewardPoints">
            <summary>
            Indicates whether to update reward points.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.UpdateOrderDetailsContext.AdjustInventory">
            <summary>
            Indicates whether to adjust the inventory.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.UpdateOrderDetailsContext.Inventory">
            <summary>
            Result of adjusting the inventory.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutState.OrderPaymentInfoName">
            <summary>
            Gets the object name of the currently selected payment method info.
            The object is stored in HttpContext.Session using this name.
            </summary>
            <remarks>
            The payment info actually belongs in this CheckoutState but for compatibility reasons we leave it as it is.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutState.PaymentSummary">
            <summary>
            The payment summary as displayed on the checkout confirmation page.
            Set after selecting the payment method, if not skipped by a payment module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutState.IsPaymentRequired">
            <summary>
            Indicates whether payment is required. <c>false</c> if the order total is 0 (nothing to pay).
            Set on the payment selection page if not skipped by a payment module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutState.IsPaymentSelectionSkipped">
            <summary>
            Indicates whether the payment method selection page was skipped.
            Set on the payment selection page, if not skipped by a payment module.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.CheckoutState.GetCustomState``1(System.Func{``0})">
            <summary>
            Gets a custom state object from the <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutState.CustomProperties"/> dictionary.
            If the object did not exist in the dictionary it will be created.
            The key used to save the object in the dictionary is the type short name.
            </summary>
            <typeparam name="T">The type of the custom state object to obtain or create.</typeparam>
            <param name="factory">
            An optional state object factory. If <c>null</c> an instance is created 
            by using the parameterless constructor of <typeparamref name="T"/>. An exception
            will be thrown if <typeparamref name="T"/> has no parameterless constructur.
            </param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.CheckoutState.RemoveCustomState``1">
            <summary>
            Tries to remove a custom state object from the <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutState.CustomProperties"/> dictionary.
            The key used to remove the object from the dictionary is the type short name.
            </summary>
            <typeparam name="T">The type of the custom state object to remove.</typeparam>
            <returns><c>true</c> if the state object existed and was removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutState.CustomProperties">
            <summary>
            Use this dictionary for any custom data required along checkout flow
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutState.PaymentData">
            <summary>
            The payment data entered on payment method selection page
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderNumber">
            <summary>
            Gets or sets the (formatted) order number
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderGuid">
            <summary>
            Gets or sets the order identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.StoreId">
            <summary>
            Gets or sets the store identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CustomerId">
            <summary>
            Gets or sets the customer identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.BillingAddressId">
            <summary>
            Gets or sets the billing address identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.ShippingAddressId">
            <summary>
            Gets or sets the shipping address identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.PaymentMethodSystemName">
            <summary>
            Gets or sets the payment method system name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CustomerCurrencyCode">
            <summary>
            Gets or sets the customer currency code (at the moment of order placing)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CurrencyRate">
            <summary>
            Gets or sets the currency rate
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.VatNumber">
            <summary>
            Gets or sets the VAT number (the European Union Value Added Tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderSubtotalInclTax">
            <summary>
            Gets or sets the order subtotal (incl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderSubtotalExclTax">
            <summary>
            Gets or sets the order subtotal (excl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderSubTotalDiscountInclTax">
            <summary>
            Gets or sets the order subtotal discount (incl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderSubTotalDiscountExclTax">
            <summary>
            Gets or sets the order subtotal discount (excl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderShippingInclTax">
            <summary>
            Gets or sets the order shipping (incl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderShippingExclTax">
            <summary>
            Gets or sets the order shipping (excl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderShippingTaxRate">
            <summary>
            Gets or sets the tax rate for order shipping
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.PaymentMethodAdditionalFeeInclTax">
            <summary>
            Gets or sets the payment method additional fee (incl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.PaymentMethodAdditionalFeeExclTax">
            <summary>
            Gets or sets the payment method additional fee (excl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.PaymentMethodAdditionalFeeTaxRate">
            <summary>
            Gets or sets the tax rate for payment method additional fee
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.TaxRates">
            <summary>
            Gets or sets the tax rates
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderTax">
            <summary>
            Gets or sets the order tax
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderDiscount">
            <summary>
            Gets or sets the order discount (applied to order total)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CreditBalance">
            <summary>
            Gets or sets the wallet credit amount used to (partially) pay this order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderTotalRounding">
            <summary>
            Gets or sets the order total rounding amount
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderTotal">
            <summary>
            Gets or sets the order total
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.RefundedAmount">
            <summary>
            Gets or sets the refunded amount
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.RewardPointsWereAdded">
            <summary>
            Gets or sets the value indicating whether reward points were earned for this order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CheckoutAttributeDescription">
            <summary>
            Gets or sets the checkout attribute description
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.RawAttributes">
            <summary>
            Gets or sets the checkout attributes in XML or JSON format
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CustomerLanguageId">
            <summary>
            Gets or sets the customer language identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.AffiliateId">
            <summary>
            Gets or sets the affiliate identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CustomerIp">
            <summary>
            Gets or sets the customer IP address
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.AllowStoringCreditCardNumber">
            <summary>
            Gets or sets a value indicating whether storing of credit card number is allowed
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CardType">
            <summary>
            Gets or sets the card type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CardName">
            <summary>
            Gets or sets the card name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CardNumber">
            <summary>
            Gets or sets the card number
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.MaskedCreditCardNumber">
            <summary>
            Gets or sets the masked credit card number
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CardCvv2">
            <summary>
            Gets or sets the card CVV2
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CardExpirationMonth">
            <summary>
            Gets or sets the card expiration month
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CardExpirationYear">
            <summary>
            Gets or sets the card expiration year
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.AllowStoringDirectDebit">
            <summary>
            Gets or sets a value indicating whether storing of credit card number is allowed
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.DirectDebitAccountHolder">
            <summary>
            Gets or sets the direct debit account holder
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.DirectDebitAccountNumber">
            <summary>
            Gets or sets the direct debit account number
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.DirectDebitBankCode">
            <summary>
            Gets or sets the direct debit bank code
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.DirectDebitBankName">
            <summary>
            Gets or sets the direct debit bank name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.DirectDebitBIC">
            <summary>
            Gets or sets the direct debit bic
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.DirectDebitCountry">
            <summary>
            Gets or sets the direct debit country
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.DirectDebitIban">
            <summary>
            Gets or sets the direct debit iban
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CustomerOrderComment">
            <summary>
            Gets or sets the customer order comment
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.AuthorizationTransactionId">
            <summary>
            Gets or sets the ID of a payment authorization.
            Usually this comes from a payment gateway.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.AuthorizationTransactionCode">
            <summary>
            Gets or sets a payment transaction code.
            Not used by Smartstore. Can be any data that the payment provider needs for later processing.
            Use <see cref="T:Smartstore.Core.Common.GenericAttribute"/> if you want to store even more payment data for an order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.AuthorizationTransactionResult">
            <summary>
            Gets or sets a short result info about the payment authorization.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CaptureTransactionId">
            <summary>
            Gets or sets the ID of a payment capture.
            Usually this comes from a payment gateway. Can be equal to <see cref="P:Smartstore.Core.Checkout.Orders.Order.AuthorizationTransactionId"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CaptureTransactionResult">
            <summary>
            Gets or sets a short result info about the payment capture.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.SubscriptionTransactionId">
            <summary>
            Gets or sets the ID for payment subscription. Usually used for recurring payment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.PurchaseOrderNumber">
            <summary>
            Gets or sets the purchase order number
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.PaidDateUtc">
            <summary>
            Gets or sets the paid date and time
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.ShippingMethod">
            <summary>
            Gets or sets the shipping method
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.ShippingRateComputationMethodSystemName">
            <summary>
            Gets or sets the shipping rate computation method identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.Deleted">
            <summary>
            Gets or sets a value indicating whether the entity has been deleted
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CreatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.UpdatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.RewardPointsRemaining">
            <summary>
            Gets or sets the amount of remaing reward points
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.HasNewPaymentNotification">
            <summary>
            Gets or sets a value indicating whether a new payment notification arrived.
            Set this to <c>true</c> if a new IPN, webhook notification or payment provider message arrived.
            Use an <see cref="T:Smartstore.Core.Checkout.Orders.OrderNote"/> to save the notification.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.AcceptThirdPartyEmailHandOver">
            <summary>
            Gets or sets a value indicating whether the customer accepted to hand over email address to third party
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderStatusId">
            <summary>
            Gets or sets an order status identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderStatus">
            <summary>
            Gets or sets the order status
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.PaymentStatusId">
            <summary>
            Gets or sets the payment status identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.PaymentStatus">
            <summary>
            Gets or sets the payment status
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.ShippingStatusId">
            <summary>
            Gets or sets the shipping status identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.ShippingStatus">
            <summary>
            Gets or sets the shipping status
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CustomerTaxDisplayTypeId">
            <summary>
            Gets or sets the customer tax display type identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.CustomerTaxDisplayType">
            <summary>
            Gets or sets the customer tax display type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.Customer">
            <summary>
            Gets or sets the customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.BillingAddress">
            <summary>
            Gets or sets the billing address
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.ShippingAddress">
            <summary>
            Gets or sets the shipping address
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.RedeemedRewardPointsEntry">
            <summary>
            Gets or sets the reward points history record.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.WalletHistory">
            <summary>
            Gets or sets the wallet history.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.DiscountUsageHistory">
            <summary>
            Gets or sets discount usage history
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.GiftCardUsageHistory">
            <summary>
            Gets or sets gift card usage history (gift card that were used with this order)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderNotes">
            <summary>
            Gets or sets order notes
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.OrderItems">
            <summary>
            Gets or sets order items
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.Shipments">
            <summary>
            Gets or sets shipments
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Order.TaxRatesDictionary">
            <summary>
            Gets the applied tax rates
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.CheckoutRequirements">
            <summary>
            Represents requirements of a standard checkout.
            </summary>
            <remarks>
            If you have custom checkout requirements/steps then you must check directly via 
            <see cref="T:Smartstore.Core.Checkout.Orders.ICheckoutFactory"/> whether they are required.
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.OrderStatus">
            <summary>
            Represents an order status.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.OrderStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.OrderStatus.Processing">
            <summary>
            Processing
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.OrderStatus.Complete">
            <summary>
            Complete
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.OrderStatus.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.ReturnRequestStatus">
            <summary>
            Represents a return request status.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.ReturnRequestStatus.Pending">
            <summary>
            Pending.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.ReturnRequestStatus.Received">
            <summary>
            Received.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.ReturnRequestStatus.ReturnAuthorized">
            <summary>
            Return authorized.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.ReturnRequestStatus.ItemsRepaired">
            <summary>
            Item(s) repaired.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.ReturnRequestStatus.ItemsRefunded">
            <summary>
            Item(s) refunded.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.ReturnRequestStatus.RequestRejected">
            <summary>
            Request rejected.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Orders.ReturnRequestStatus.Cancelled">
            <summary>
            Cancelled.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.OrderItem">
            <summary>
            Represents an order item
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.OrderItemGuid">
            <summary>
            Gets or sets the order product variant identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.OrderId">
            <summary>
            Gets or sets the order identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.ProductId">
            <summary>
            Gets or sets the product identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.Sku">
            <summary>
            Gets or sets the stock keeping unit (SKU).
            This is either the SKU of the product variant if a variant was ordered, otherwise the product SKU.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.Quantity">
            <summary>
            Gets or sets the quantity
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.UnitPriceInclTax">
            <summary>
            Gets or sets the unit price in primary store currency (incl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.UnitPriceExclTax">
            <summary>
            Gets or sets the unit price in primary store currency (excl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.PriceInclTax">
            <summary>
            Gets or sets the price in primary store currency (incl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.PriceExclTax">
            <summary>
            Gets or sets the price in primary store currency (excl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.TaxRate">
            <summary>
            Gets or sets the tax rate
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.DiscountAmountInclTax">
            <summary>
            Gets or sets the discount amount (incl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.DiscountAmountExclTax">
            <summary>
            Gets or sets the discount amount (excl tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.AttributeDescription">
            <summary>
            Gets or sets the attribute description
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.RawAttributes">
            <summary>
            Gets or sets the product variant attributes in XML or JSON format
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.DownloadCount">
            <summary>
            Gets or sets the download count
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.IsDownloadActivated">
            <summary>
            Gets or sets a value indicating whether download is activated
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.LicenseDownloadId">
            <summary>
            Gets or sets a license download identifier (in case this is a downloadable product)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.ItemWeight">
            <summary>
            Gets or sets the total weight of one item
            It's nullable for compatibility with the previous version where was no such property
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.BundleData">
            <summary>
            Gets or sets extra bundle data
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.ProductCost">
            <summary>
            Gets or sets the original product cost
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.DeliveryTimeId">
            <summary>
            Gets or sets the delivery time at the time of purchase.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.DisplayDeliveryTime">
            <summary>
            Indicates whether the delivery time was displayed at the time of purchase.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.Order">
            <summary>
            Gets or sets the order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.Product">
            <summary>
            Gets or sets the product
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderItem.AssociatedGiftCards">
            <summary>
            Gets or sets the associated gift card
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.OrderNote">
            <summary>
            Represents an order note
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderNote.OrderId">
            <summary>
            Gets or sets the order identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderNote.Note">
            <summary>
            Gets or sets the note
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderNote.DisplayToCustomer">
            <summary>
            Gets or sets a value indicating whether a customer can see a note
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderNote.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of order note creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderNote.Order">
            <summary>
            Gets the order
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.OrderPlacementResult">
            <summary>
            Represents the result of an order placement.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderPlacementResult.PlacedOrder">
            <summary>
            Gets or sets the placed order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderPlacementResult.Errors">
            <summary>
            Gets or sets a list of errors.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderPlacementResult.Success">
            <summary>
            <c>true</c> if <see cref="P:Smartstore.Core.Checkout.Orders.OrderPlacementResult.Errors"/> does not contain any elements.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderPlacementResult.RedirectUrl">
            <summary>
            Gets or sets an URL to be redirected to, e.g. if an error occurred during payment.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.OrderTotalValidationResult">
            <summary>
            Represents the result of an order total validation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderTotalValidationResult.OrderTotalMinimum">
            <summary>
            Minimum allowed order total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderTotalValidationResult.OrderTotalMaximum">
            <summary>
            Maximum allowed order total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderTotalValidationResult.IsAboveMinimum">
            <summary>
            A value indicating whether the order total is above the specified minimum amount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderTotalValidationResult.IsBelowMaximum">
            <summary>
            A value indicating whether the order total is below the specified maximum amount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.OrderTotalValidationResult.IsValid">
            <summary>
            A value indicating whether the order total is valid.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.ReturnRequest">
            <summary>
            Represents a return request.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.StoreId">
            <summary>
            Gets or sets the store identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.OrderItemId">
            <summary>
            Gets or sets the order item identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.CustomerId">
            <summary>
            Gets or sets the customer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.Customer">
            <summary>
            Gets or sets the customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.Quantity">
            <summary>
            Gets or sets the quantity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.ReasonForReturn">
            <summary>
            Gets or sets the reason for return.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.RequestedAction">
            <summary>
            Gets or sets the requested action.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.RequestedActionUpdatedOnUtc">
            <summary>
            Gets or sets the date and time when requested action was last updated.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.CustomerComments">
            <summary>
            Gets or sets the customer comments.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.StaffNotes">
            <summary>
            Gets or sets the staff notes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.AdminComment">
            <summary>
            Gets or sets the admin comment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.ReturnRequestStatusId">
            <summary>
            Gets or sets the return status identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.ReturnRequestStatus">
            <summary>
            Gets or sets the return status.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.RefundToWallet">
            <summary>
            Gets or sets whether to refund to wallet.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.CreatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ReturnRequest.UpdatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.OrderMessageFactoryExtensions.SendOrderPlacedStoreOwnerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.Orders.Order,System.Int32)">
            <summary>
            Sends an order placed notification to the store owner.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.OrderMessageFactoryExtensions.SendOrderPlacedCustomerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.Orders.Order,System.Int32)">
            <summary>
            Sends an order placed notification to the customer.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.OrderMessageFactoryExtensions.SendOrderCompletedCustomerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.Orders.Order,System.Int32)">
            <summary>
            Sends an order completed notification to the customer.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.OrderMessageFactoryExtensions.SendOrderCancelledCustomerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.Orders.Order,System.Int32)">
            <summary>
            Sends an order cancelled notification to the customer.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.OrderMessageFactoryExtensions.SendNewOrderNoteAddedCustomerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.Orders.OrderNote,System.Int32)">
            <summary>
            Sends a new order note added notification to the customer.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.OrderMessageFactoryExtensions.SendNewReturnRequestStoreOwnerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.Orders.ReturnRequest,Smartstore.Core.Checkout.Orders.OrderItem,System.Int32)">
            <summary>
            Sends a new return request message to the store owner.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.OrderMessageFactoryExtensions.SendReturnRequestStatusChangedCustomerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.Orders.ReturnRequest,Smartstore.Core.Checkout.Orders.OrderItem,System.Int32)">
            <summary>
            Sends a return request status changed message to the customer.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.Reporting.BestsellersReportLine">
            <summary>
            Represents a best sellers report line.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.BestsellersReportLine.ProductId">
            <summary>
            Gets or sets the product identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.BestsellersReportLine.TotalAmount">
            <summary>
            Gets or sets the total amount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.BestsellersReportLine.TotalQuantity">
            <summary>
            Gets or sets the total quantity.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLine">
            <summary>
            Represents an order average report line.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLine.SumTax">
            <summary>
            Gets or sets the order tax sum.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLine.SumOrderTotal">
            <summary>
            Gets or sets the order total sum.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLine.OrderCount">
            <summary>
            Gets or sets the order count.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary">
            <summary>
            Represents an order average report line summary.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.OrderStatus">
            <summary>
            Gets or sets the order status.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.SumTodayOrders">
            <summary>
            Gets or sets the sum today total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.CountTodayOrders">
            <summary>
            Gets or sets the today count.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.SumThisWeekOrders">
            <summary>
            Gets or sets the sum this week total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.CountThisWeekOrders">
            <summary>
            Gets or sets the this week count.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.SumThisMonthOrders">
            <summary>
            Gets or sets the sum this month total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.CountThisMonthOrders">
            <summary>
            Gets or sets the this month count.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.SumThisYearOrders">
            <summary>
            Gets or sets the sum this year total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.CountThisYearOrders">
            <summary>
            Gets or sets the this year count.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.SumAllTimeOrders">
            <summary>
            Gets or sets the sum all time total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderAverageReportLineSummary.CountAllTimeOrders">
            <summary>
            Gets or sets the all time count.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.Reporting.OrderDataPoint">
            <summary>
            Represents a order chart data point.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderDataPoint.CreatedOn">
            <summary>
            Gets or sets the date time at which the entity was created (utc).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderDataPoint.OrderTotal">
            <summary>
            Gets or sets the order total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderDataPoint.OrderStatusId">
            <summary>
            Gets or sets the order status identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderDataPoint.PaymentStatusId">
            <summary>
            Gets or sets the payment status identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.OrderDataPoint.ShippingStatusId">
            <summary>
            Gets or sets the shipping status identifier.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.Reporting.TopCustomerReportLine">
            <summary>
            Represents a best customer report line.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.TopCustomerReportLine.CustomerId">
            <summary>
            Gets or sets the customer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.TopCustomerReportLine.OrderTotal">
            <summary>
            Gets or sets the order total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.Reporting.TopCustomerReportLine.OrderCount">
            <summary>
            Gets or sets the order count.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutContext.Cart">
            <summary>
            The shopping cart of the current customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutContext.Model">
            <summary>
            An optional model (usually of a simple type) representing a user selection (e.g. address ID, shipping method ID or payment method system name).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.CheckoutContext.IsCurrentRoute(System.String,System.String,System.String,System.String)">
            <summary>
            Gets a value indicating whether the current request corresponds to a specific route.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.CheckoutContext.GetFormValue(System.String)">
            <summary>
            Gets a request form value.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutHandler.ProcessAsync(Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Processes a checkout step.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutStepAttribute.Actions">
            <inheritdoc cref="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.Actions" />
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutStepAttribute.Controller">
            <inheritdoc cref="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.Controller" />
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutStepAttribute.Area">
            <inheritdoc cref="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.Area" />
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutStepAttribute.Order">
            <inheritdoc cref="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.Order" />
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutStepAttribute.ProgressLabelKey">
            <inheritdoc cref="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.ProgressLabelKey" />
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.Actions">
            <summary>
            Gets or sets the name of the action methods associated with a checkout handler.
            The first action must be the one through which the associated checkout page can be accessed (convention).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.DefaultAction">
            <summary>
            Gets the default action (the first element of <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.Actions"/>).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.Controller">
            <summary>
            Gets or sets the name of the controller associated with a checkout handler.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.Area">
            <summary>
            Gets or sets the area name of the controller associated with a checkout handler.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.Order">
            <summary>
            Gets or sets a value that corresponds to the order in which checkout handlers are processed,
            thus in which the associated checkout steps are completed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutHandlerMetadata.ProgressLabelKey">
            <summary>
            Gets or sets the name of the string resource for the checkout progress navigation.
            <c>null</c> to not display the step in checkout progress at all.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutResult.Success">
            <summary>
            Gets a value indicating whether the processing was successful.
            If <c>true</c>, the next handler is called. Otherwise the customer is redirected to <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutResult.ActionResult"/> or 
            the page belonging to current checkout step.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutResult.Errors">
            <summary>
            Gets a list of errors. Typically these are added to the model state by the caller
            to display them on current checkout page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutResult.SkipPage">
            <summary>
            Gets a value indicating whether the current checkout page should be skipped.
            Only applicable if <see cref="M:Smartstore.Core.Checkout.Orders.ICheckoutWorkflow.ProcessAsync(Smartstore.Core.Checkout.Orders.CheckoutContext)"/> was called.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutResult.ActionResult">
            <summary>
            Gets an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> where the customer is to be redirected.
            If <c>null</c>, then the <see cref="T:Smartstore.Core.Checkout.Orders.ICheckoutWorkflow"/> implementation decides whether and where to redirect to.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutResult.ViewPath">
            <summary>
            Gets the view path of the current checkout step.
            Always <c>null</c> for standard checkout (default).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutStep.Handler">
            <summary>
            Gets the handler to process the checkout step.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.CheckoutStep.ViewPath">
            <summary>
            Gets the path of the view associated with the <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutStep.Handler"/>.
            Always <c>null</c> for standard checkout (default).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.CheckoutStep.GetActionResult(Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Gets the action result to the associated action method of this checkout step.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.CheckoutStep.GetUrl(Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Gets the URL to the associated action method of this checkout step.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.CheckoutWorkflow.ProcessInternal(Smartstore.Core.Checkout.Orders.CheckoutStep,Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Executes the handler associated with <paramref name="step"/> and fully prepares <see cref="T:Smartstore.Core.Checkout.Orders.CheckoutResult"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.CheckoutWorkflow.Preliminary(Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Checks whether the checkout can be executed, e.g. whether the shopping cart has items.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.CheckoutWorkflow.Adjacent(Smartstore.Core.Checkout.Orders.CheckoutStep,Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Special case when the checkout page associated with <paramref name="step"/> must always be skipped
            (e.g. if the store only offers a single shipping method).
            In this case, based on the referrer, the customer must be redirected to the next or previous page,
            depending on the direction from which the customer accessed the current page.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutFactory.GetRequirements">
            <summary>
            Gets checkout requirements.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutFactory.GetCheckoutSteps">
            <summary>
            Gets a list of checkout steps to be processed.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutFactory.GetCheckoutStep(System.String,System.String,System.String)">
            <summary>
            Gets the checkout step for route values.
            </summary>
            <param name="action">Name of the action method.</param>
            <param name="controller">Name of the controller.</param>
            <param name="area">Area name. <c>null</c> by default.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutFactory.GetNextCheckoutStep(Smartstore.Core.Checkout.Orders.CheckoutStep,System.Boolean)">
            <summary>
            Gets the next/previous step in checkout.
            </summary>
            <param name="step">Step to get the next/previous checkout step for.</param>
            <param name="next"><c>true</c> to get the next, <c>false</c> to get the previous checkout step.</param>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor">
            <summary>
            Responsible for accessing the <see cref="P:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.CheckoutState"/> of a customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.IsStateLoaded">
            <summary>
            Checks whether the <see cref="P:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.CheckoutState"/> instance is already loaded for the current request.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.HasStateChanged">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.CheckoutState"/> instance has been changed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.CheckoutState">
            <summary>
            The <see cref="P:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.CheckoutState"/> instance. Returns <c>null</c> if HttpContext cannot be accessed.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.Save">
            <summary>
            Saves the current <see cref="P:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.CheckoutState"/> instance to the underlying storage if it was loaded/accessed before.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.Abandon">
            <summary>
            Removes the current <see cref="P:Smartstore.Core.Checkout.Orders.ICheckoutStateAccessor.CheckoutState"/> instance from the underlying storage if it is present.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.ICheckoutWorkflow">
            <summary>
            Represents a checkout flow by processing checkout steps through checkout handlers.
            </summary>
            <remarks>
            Only applicable in the context of an HTTP request.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutWorkflow.StartAsync(Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Initializes and starts the checkout.
            </summary>
            <returns>
            <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutResult.ActionResult"/> to the first, unfulfilled checkout page.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutWorkflow.ProcessAsync(Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Processes the current checkout step.
            </summary>
            <returns>
            <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutResult.ActionResult"/> to the next/previous checkout page, if the current page should be skipped.
            Otherwise <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutResult.ActionResult"/> is <c>null</c> (default).
            </returns>
            <remarks>
            Typically called in GET requests when the current checkout page is to be opened.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutWorkflow.AdvanceAsync(Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Advances in checkout.
            </summary>
            <returns>
            <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutResult.ActionResult"/> to the next, unfulfilled checkout page.
            If <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutResult.ActionResult"/> is <c>null</c> (not determinable), then the caller has to specify the next step.
            </returns>
            <remarks>
            Typically called in POST requests when the customer has made a selection in checkout.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.ICheckoutWorkflow.CompleteAsync(Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Completes the checkout and places a new order.
            </summary>
            <returns>
            <see cref="P:Smartstore.Core.Checkout.Orders.CheckoutResult.ActionResult"/> to the completed page, if operation succeeded.
            Otherwise result to redirect to an error related checkout page like payment method selection page.
            </returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.IOrderCalculationService">
            <summary>
            Order calculation service.
            OrderCalculationService internally calculates in the primary currency, 
            consequently currency values are also returned in the primary currency by default.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.GetShoppingCartTotalAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Boolean,System.Boolean,System.Boolean,Smartstore.Core.Catalog.Products.ProductBatchContext,System.Boolean)">
            <summary>
            Gets the shopping cart total.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="includeRewardPoints">A value indicating whether to include reward points.</param>
            <param name="includePaymentFee">A value indicating whether to include payment additional fee of the selected payment method.</param>
            <param name="includeCreditBalance">A value indicating whether to include credit balance.</param>
            <param name="batchContext">The product batch context used to load all cart products in one go. Will be created internally if <c>null</c>.</param>
            <param name="cache">A value indicating whether to cache the result.</param>
            <returns>Shopping cart total.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.GetShoppingCartSubtotalAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Nullable{System.Boolean},Smartstore.Core.Catalog.Products.ProductBatchContext,System.Boolean,System.Boolean)">
            <summary>
            Gets the shopping cart subtotal.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="includeTax">A value indicating whether the calculated price should include tax.
            If <c>null</c>, will be obtained via <see cref="P:Smartstore.Core.IWorkContext.TaxDisplayType"/>.</param>
            <param name="batchContext">The product batch context used to load all cart products in one go. Will be created internally if <c>null</c>.</param>
            <param name="activeOnly">
            A value indicating whether to only include active cart items in calculation.
            <c>false</c> to include all cart items (default). <c>true</c> to ignore deactivated items.
            </param>
            <param name="cache">A value indicating whether to cache the result.</param>
            <returns>Shopping cart subtotal.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.GetShoppingCartShippingTotalAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Nullable{System.Boolean})">
            <summary>
            Gets the shopping cart shipping total.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="includeTax">A value indicating whether the calculated price should include tax.
            If <c>null</c>, will be obtained via <see cref="P:Smartstore.Core.IWorkContext.TaxDisplayType"/>.</param>
            <returns>Shopping cart shipping total.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.GetShoppingCartTaxTotalAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Boolean)">
            <summary>
            Gets the shopping cart tax total in the primary currency.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="includePaymentFee">A value indicating whether to include payment additional fee of the selected payment method.</param>
            <returns>The tax total amount in the primary currency and applied tax rates.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.IsFreeShippingAsync(Smartstore.Core.Checkout.Cart.ShoppingCart)">
            <summary>
            Gets a value indicating whether shipping is free.
            </summary>
            <param name="cart">Shopping cart.</param>
            <returns>A value indicating whether shipping is free.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.GetShoppingCartShippingChargeAsync(Smartstore.Core.Checkout.Cart.ShoppingCart)">
            <summary>
            Gets the cart's additional shipping charge in the primary currency.
            </summary>
            <param name="cart">Shopping cart.</param>
            <returns>Additional shipping charge in the primary currency.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.GetShoppingCartPaymentFeeAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.String)">
            <summary>
            Gets the cart's payment fee for in the primary currency.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="paymentMethodSystemName">Payment method system name.</param>
            <returns>Additional payment method fee in the primary currency.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.AdjustShippingRateAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Decimal,Smartstore.Core.Checkout.Shipping.ShippingOption,System.Collections.Generic.IList{Smartstore.Core.Checkout.Shipping.ShippingMethod})">
            <summary>
            Adjusts the shipping rate (free shipping, additional charges, discounts).
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="shippingRate">Shipping rate.</param>
            <param name="shippingOption">Shipping option.</param>
            <param name="shippingMethods">Shipping methods.</param>
            <returns>Adjusted shipping rate in the primary currency.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.ApplyDiscountCouponAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.String)">
            <summary>
            Applies a <paramref name="couponCode"/> to <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCart.Customer"/>.
            The caller is responsible for database commit.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="couponCode">The discount coupon code to apply.</param>
            <returns>
            <c>true</c> if <paramref name="couponCode"/> was applied to <see cref="P:Smartstore.Core.Checkout.Cart.ShoppingCart.Customer"/>, otherwise <c>false</c>.
            Also returns the discount to which <paramref name="couponCode"/> belongs.
            <c>null</c> if either the discount or the <paramref name="couponCode"/> is invalid.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.GetDiscountAmountAsync(Smartstore.Core.Common.Money,Smartstore.Core.Catalog.Discounts.DiscountType,Smartstore.Core.Identity.Customer)">
            <summary>
            Gets the discount amount in the primary currency and applied discount for a given amount.
            </summary>
            <param name="amount">Amount.</param>
            <param name="discountType">Discount type.</param>
            <param name="customer">Customer</param>
            <returns>The discount amount in the primary currency and applied discount.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.GetRewardPointsForPurchase(System.Decimal,System.Boolean)">
            <summary>
            Gets the reward points for a purchase amount.
            </summary>
            <param name="amount">
            The purchase amount to return reward points for.
            </param>
            <param name="decreasePointsBalanceHistory">
            A value indicating whether the returned points will be used to decrease the points balance history.
            <c>true</c> to decrease the points balance history, otherwise <c>false</c> (default).
            </param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.ConvertRewardPointsToAmount(System.Int32)">
            <summary>
            Converts reward points to an amount in the primary currency.
            </summary>
            <param name="rewardPoints">Reward points.</param>
            <returns>Converted amount in the primary currency.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderCalculationService.ConvertAmountToRewardPoints(Smartstore.Core.Common.Money)">
            <summary>
            Converts a primary currency amount to reward points.
            </summary>
            <param name="amount">Currency amount.</param>
            <returns>Converted points.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.IOrderProcessingService">
            <summary>
            Order processing interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.GetDispatchedItemsCountAsync(Smartstore.Core.Checkout.Orders.OrderItem,System.Boolean)">
            <summary>
            Gets the total number of dispatched or not dispatched items.
            </summary>
            <param name="orderItem">Order item.</param>
            <param name="dispatched"><c>true</c> count dispatched items, <c>false</c> count not dispatched items.</param>
            <returns>Total number of dispatched items.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.HasItemsToDispatchAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order has items to dispatch.
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order has items to dispatch.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.GetDeliveredItemsCountAsync(Smartstore.Core.Checkout.Orders.OrderItem,System.Boolean)">
            <summary>
            Gets the total number of delivered or not delivered shipment items.
            </summary>
            <param name="orderItem">Order item.</param>
            <param name="delivered"><c>true</c> count delivered items, <c>false</c> count not delivered items.</param>
            <returns>Total number of already delivered items.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.HasItemsToDeliverAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order has items to deliver.
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order has items to deliver.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.GetShippableItemsCountAsync(Smartstore.Core.Checkout.Orders.OrderItem)">
            <summary>
            Gets the total number of items which can be added to new shipments.
            </summary>
            <param name="orderItem">Order item.</param>
            <returns>Total number of items which can be added to new shipments.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.GetShipmentItemsCountAsync(Smartstore.Core.Checkout.Orders.OrderItem)">
            <summary>
            Gets the total number of items in all shipments.
            </summary>
            <param name="orderItem">Order item.</param>
            <returns>Total number of items in all shipments.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.CanAddItemsToShipmentAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order has items to be added to a shipment.
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order has items to be added to a shipment.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.CancelOrderAsync(Smartstore.Core.Checkout.Orders.Order,System.Boolean)">
            <summary>
            Cancels an order.
            </summary>
            <param name="order">Order.</param>
            <param name="notifyCustomer"><c>true</c> to notify customer.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.CompleteOrderAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Marks an order as completed.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.DeleteOrderAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Deletes an order.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.ReOrderAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Place order items in shopping cart of the user who placed the order.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.ShipAsync(Smartstore.Core.Checkout.Shipping.Shipment,System.Boolean)">
            <summary>
            Marks a shipment as shipped.
            </summary>
            <param name="shipment">Shipment.</param>
            <param name="notifyCustomer"><c>true</c> to notify customer.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.DeliverAsync(Smartstore.Core.Checkout.Shipping.Shipment,System.Boolean)">
            <summary>
            Marks a shipment as delivered.
            </summary>
            <param name="shipment">Shipment.</param>
            <param name="notifyCustomer"><c>true</c> to notify customer.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.IsReturnRequestAllowed(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Check whether a return request is allowed.
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether a return request is allowed.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.ValidateOrderTotalAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,Smartstore.Core.Identity.CustomerRole[])">
            <summary>
            Validates the order total (excluding discounts).
            Gets the mininmum and maximum allowed order amount from <see cref="P:Smartstore.Core.Identity.CustomerRole.OrderTotalMinimum"/> and <see cref="P:Smartstore.Core.Identity.CustomerRole.OrderTotalMaximum"/>
            or from <see cref="P:Smartstore.Core.Checkout.Orders.OrderSettings.OrderTotalMinimum"/> and <see cref="P:Smartstore.Core.Checkout.Orders.OrderSettings.OrderTotalMaximum"/> if none is specified.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="customerRoles">Customer roles to check against.</param>
            <returns>Validated order total.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.AddShipmentAsync(Smartstore.Core.Checkout.Orders.Order,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Adds a shipment to an order.
            </summary>
            <param name="order">Order.</param>
            <param name="carrier">Name of the carrier.</param>
            <param name="trackingNumber">Tracking number.</param>
            <param name="trackingUrl">Tracking URL.</param>
            <param name="quantities">Quantities by order item identifiers. <c>null</c> to use the remaining total number of products for each order item.</param>
            <returns>New shipment, <c>null</c> if no shipment was added.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.UpdateOrderDetailsAsync(Smartstore.Core.Checkout.Orders.OrderItem,Smartstore.Core.Checkout.Orders.UpdateOrderDetailsContext)">
            <summary>
            Update order details like order item quantity, stock quantity or order total 
            when the merchant has manually edited an order item.
            </summary>
            <param name="orderItem">Order item.</param>
            <param name="context">Update order details context.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.PlaceOrderAsync(Smartstore.Core.Checkout.Payment.ProcessPaymentRequest,System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Places an order.
            </summary>
            <param name="paymentRequest">Payment processing request.</param>
            <param name="extraData">Additional data to be taken into account when placing the order.</param>
            <returns>Order placement result.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.ValidateOrderPlacementAsync(Smartstore.Core.Checkout.Payment.ProcessPaymentRequest,Smartstore.Core.Checkout.Orders.Order,Smartstore.Core.Identity.Customer)">
            <summary>
            Checks whether an order can be placed.
            </summary>
            <param name="paymentRequest">Payment processing request.</param>
            <param name="initialOrder">Initial order for recurring payment, if any.</param>
            <param name="customer">Customer placing the order.</param>
            <returns>Warnings and validated card. Warnings are empty if the order can be placed.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.IsMinimumOrderPlacementIntervalValidAsync(Smartstore.Core.Identity.Customer,Smartstore.Core.Stores.Store)">
            <summary>
            Checks whether orders are placed in too short time interval.
            </summary>
            <param name="customer">Customer.</param>
            <param name="store">Store.</param>
            <returns><c>true</c> valid interval, <c>false</c> invalid interval.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.MarkAsAuthorizedAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Marks an order as authorized.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.MarkOrderAsPaidAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Marks an order as paid.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.CanCaptureAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order can be marked as paid.
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order can be marked as paid.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.CaptureAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Captures an order.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.CanRefundAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order can be refunded. Also checks if the payment provider supports to refund the payment.
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order can be refunded.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.RefundAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Refunds an order. The payment is refunded at the payment provider if he supports this.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.RefundOfflineAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Refunds an order "offline" (without calling any payment provider).
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.CanPartiallyRefundAsync(Smartstore.Core.Checkout.Orders.Order,System.Decimal)">
            <summary>
            Gets a value indicating whether an order can be partially refunded. Also checks if the payment provider supports to partially refund the payment.
            </summary>
            <param name="order">Order.</param>
            <param name="amountToRefund">The amount to refund.</param>
            <returns>A value indicating whether an order can be partially refunded.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.PartiallyRefundAsync(Smartstore.Core.Checkout.Orders.Order,System.Decimal)">
            <summary>
            Partially refunds an order. The payment is partially refunded at the payment provider if he supports this.
            </summary>
            <param name="order">Order.</param>
            <param name="amountToRefund">The amount to refund.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.PartiallyRefundOfflineAsync(Smartstore.Core.Checkout.Orders.Order,System.Decimal)">
            <summary>
            Partially refunds an order "offline" (without calling any payment provider).
            </summary>
            <param name="order">Order.</param>
            <param name="amountToRefund">The amount to refund.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.CanVoidAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order can be voided. Also checks if the payment provider supports to void the payment.
            </summary>
            <returns>A value indicating whether an order can be voided.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.VoidAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Voids an order. The payment is voided at the payment provider if he supports this.
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.VoidOfflineAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Voids an order "offline" (without calling any payment provider).
            </summary>
            <param name="order">Order.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.CanCancelRecurringPaymentAsync(Smartstore.Core.Checkout.Payment.RecurringPayment,Smartstore.Core.Identity.Customer)">
            <summary>
            Gets a value indicating whether the recurring payment can be canceled (by the customer).
            </summary>
            <param name="recurringPayment">The <see cref="T:Smartstore.Core.Checkout.Payment.RecurringPayment"/> to be canceled.</param>
            <param name="customerToValidate">The <see cref="T:Smartstore.Core.Identity.Customer"/> who wants to cancel.</param>
            <returns><c>True</c> when the <paramref name="recurringPayment"/> can be canceled by <paramref name="customerToValidate"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.CancelRecurringPaymentAsync(Smartstore.Core.Checkout.Payment.RecurringPayment)">
            <summary>
            Cancels a recurring payment.
            </summary>
            <param name="recurringPayment">Recurring payment.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderProcessingService.ProcessNextRecurringPaymentAsync(Smartstore.Core.Checkout.Payment.RecurringPayment)">
            <summary>
            Processes the next recurring payment.
            </summary>
            <param name="recurringPayment">Recurring payment.</param>
        </member>
        <member name="T:Smartstore.Core.Checkout.Orders.IOrderService">
            <summary>
            Order service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.IOrderService.GetOrderTotalInCustomerCurrencyAsync(Smartstore.Core.Checkout.Orders.Order,Smartstore.Core.Common.Currency)">
            <summary>
            Gets the order total in the currency of the customer.
            </summary>
            <param name="order">Order.</param>
            <param name="targetCurrency">The target currency (which is assumed to be the currency specified by <see cref="P:Smartstore.Core.Checkout.Orders.Order.CustomerCurrencyCode"/>).</param>
            <returns>Order total and the rounding amount (if any).</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.OrderProcessingService.ApplyRewardPoints(Smartstore.Core.Checkout.Orders.Order,System.Boolean,System.Nullable{System.Decimal})">
            <summary>
            Applies reward points. The caller is responsible for database commit.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Orders.OrderProcessingService.ActivateGiftCardsAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Activates gift cards. The caller is responsible for database commit.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentSettings.ActivePaymentMethodSystemNames">
            <summary>
            Gets or sets the system names of active payment methods
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentSettings.AllowRePostingPayments">
            <summary>
            Gets or sets a value indicating whether customers are allowed to repost (complete) payments for redirection payment methods
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentSettings.CapturePaymentReason">
            <summary>
            Gets or sets the reason for automatic payment capturing
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentSettings.ProductDetailPaymentMethodSystemNames">
            <summary>
            Gets or sets the system names of payment methods that should be displayed on product detail pages.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentSettings.DisplayPaymentMethodIcons">
            <summary>
            Gets or sets a value indicating whether small payment icons should be used on payment selection page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentSettings.SkipPaymentSelectionIfSingleOption">
            <summary>
            Gets or sets a value indicating whether to skip the payment selection during checkout, if only one payment method is available.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.CapturePaymentResult">
            <summary>
            Represents a capture payment result.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.CapturePaymentResult.CaptureTransactionId">
            <summary>
            Gets or sets the capture transaction identifier.
            Usually this comes from a payment gateway.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.CapturePaymentResult.CaptureTransactionResult">
            <summary>
            Gets or sets a short result info about the payment capture.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.CapturePaymentResult.NewPaymentStatus">
            <summary>
            Gets or sets a payment status after processing.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.PaymentMethodType">
            <summary>
            Represents a payment method type.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentMethodType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentMethodType.Standard">
            <summary>
            All payment information is entered on the payment selection page.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentMethodType.Redirection">
            <summary>
            A customer is redirected to a third-party site to complete the payment after (!) the order has been placed.
            </summary>
            <remarks>
            This type of payment is required for older payment methods. It is recommended not to use it for new developments anymore.
            </remarks>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentMethodType.Button">
            <summary>
            Payment via button on cart page.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentMethodType.StandardAndButton">
            <summary>
            All payment information is entered on the payment selection page and is available via button on cart page.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentMethodType.StandardAndRedirection">
            <summary>
            Payment information is entered in checkout and customer is redirected to complete payment (e.g. 3D Secure)
            after the order has been placed.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.PaymentStatus">
            <summary>
            Represents a payment status.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentStatus.Pending">
            <summary>
            The initial payment status if no further status information is available yet.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentStatus.Authorized">
            <summary>
            The payment has been authorized (but not captured) by the payment provider.
            Usually this means that the payment amount is reserved for later capturing.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentStatus.Paid">
            <summary>
            The payment has been captured against the payment gateway.
            It does not necessarily mean that the paid amount has been credited to the merchant's account.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentStatus.PartiallyRefunded">
            <summary>
            The paid amount has been partially refunded.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentStatus.Refunded">
            <summary>
            The paid amount has been fully refunded.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.PaymentStatus.Voided">
            <summary>
            The payment has been cancelled.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.RecurringPaymentType">
            <summary>
            Represents a recurring payment type.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.RecurringPaymentType.NotSupported">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.RecurringPaymentType.Manual">
            <summary>
            Manual.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.RecurringPaymentType.Automatic">
            <summary>
            Automatic (payment is processed on payment gateway site).
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.CapturePaymentReason">
            <summary>
            The reason for the automatic capturing of the payment amount.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.CapturePaymentReason.OrderShipped">
            <summary>
            Capture payment because the order has been marked as shipped.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.CapturePaymentReason.OrderDelivered">
            <summary>
            Capture payment because the order has been marked as delivered.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Payment.CapturePaymentReason.OrderCompleted">
            <summary>
            Capture payment because the order has been marked as completed.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.PaymentException">
            <summary>
            Represents an error that occurs during payment processing.
            </summary>
            <remarks>
            It is recommended to output a user-friendly message and to put all technical details 
            such as payment request and response data into an inner exception for logging.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.PaymentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.PaymentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="provider">Payment provider that caused the exception.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.PaymentException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="provider">Payment provider that caused the exception.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.PaymentException.#ctor(System.String,Smartstore.Core.Checkout.Payment.PaymentResponse,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="response">The failed HTTP response.</param>
            <param name="provider">Payment provider that caused the exception.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.PaymentException.#ctor(System.String,Smartstore.Core.Checkout.Payment.PaymentResponse,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="response">The failed HTTP response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="provider">Payment provider that caused the exception.</param>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentException.Provider">
            <summary>
            Payment provider that caused the exception.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentException.Response">
            <summary>
            HTTP payment response (optional).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentException.RedirectRoute">
            <summary>
            Gets or sets route values for redirecting.
            If <c>null</c>, the buyer is redirected back to the payment method list in checkout.
            Can be of type <c>string</c>, <see cref="T:Smartstore.Http.RouteInfo"/> or <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.PaymentMethod">
            <summary>
            Represents a payment method.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentMethod.PaymentMethodSystemName">
            <summary>
            Gets or sets the payment method system name.
            </summary>
            <example>Payments.PayPalStandard</example>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentMethod.FullDescription">
            <summary>
            Gets or sets the full description.
            It is displayed in the payment method list in checkout.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentMethod.RoundOrderTotalEnabled">
            <summary>
            Gets or sets a value indicating whether to round the order total. Also known as "Cash rounding".
            <see href="https://en.wikipedia.org/wiki/Cash_rounding"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentMethod.LimitedToStores">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentMethod.RuleSets">
            <summary>
            Gets or sets assigned rule sets.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.PaymentRequest">
            <summary>
            Represents a default payment request.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentRequest.Order">
            <summary>
            Gets or sets an order.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.CancelRecurringPaymentRequest">
            <summary>
            Represents a recurring payment cancellation request.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.CapturePaymentRequest">
            <summary>
            Represents a request to capture a payment.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.VoidPaymentRequest">
            <summary>
            Represents a request to void a payment.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.PaymentResult">
            <summary>
            Represents a default payment result.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.PreProcessPaymentResult">
            <summary>
            Represents a pre process payment result.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.CancelRecurringPaymentResult">
            <summary>
            Represents a recurring payment cancellation result.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.RefundPaymentResult">
            <summary>
            Represents a refund payment result.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RefundPaymentResult.NewPaymentStatus">
            <summary>
            Gets or sets a payment status after processing.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.VoidPaymentResult">
            <summary>
            Represents a void payment result.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.VoidPaymentResult.NewPaymentStatus">
            <summary>
            Gets or sets a payment status after processing.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentValidationResult.IsValid">
            <summary>
            Whether validation succeeded
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentValidationResult.Errors">
            <summary>
            A collection of errors
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.PaymentValidationResult.AddToModelState(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)">
            <summary>
            Stores the errors to the specified modelstate dictionary.
            </summary>
            <param name="modelState">The ModelStateDictionary to store the errors in.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.PaymentValidationResult.ToString">
            <summary>
            Generates a string representation of the error messages separated by new lines.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.PaymentValidationResult.ToString(System.String)">
            <summary>
            Generates a string representation of the error messages separated by the specified character.
            </summary>
            <param name="separator">The character to separate the error messages.</param>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentValidationFailure.PropertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentValidationFailure.ErrorMessage">
            <summary>
            The error message
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.PostProcessPaymentRequest">
            <summary>
            Represents a post process payment request.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PostProcessPaymentRequest.IsRePostProcessPayment">
            <summary>
            A value indicating whether the customer has clicked the button to re-post the payment process on order detail page.
            Only applicable for payment type <see cref="F:Smartstore.Core.Checkout.Payment.PaymentMethodType.Redirection"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PostProcessPaymentRequest.RedirectUrl">
            <summary>
            Gets or sets an URL to a third-party payment page.
            The customer is redirected to it to complete the payment after (!) the order has been placed.
            </summary>
            <remarks>
            This type of payment is required for older payment methods. It is recommended not to use it for new developments anymore.
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest">
            <summary>
            Represents a payment info holder.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.StoreId">
            <summary>
            Gets or sets a store identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.CustomerId">
            <summary>
            Gets or sets a customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.OrderGuid">
            <summary>
            Gets or sets an order unique identifier. Used when order is not saved yet (payment gateways that do not redirect a customer to a third-party URL).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.OrderTotal">
            <summary>
            Gets or sets the order total in primary currency. 
            This value is not rounded so that it can be converted to the <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/> if required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.OrderTax">
            <summary>
            Gets or sets an order tax total.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.PaymentMethodSystemName">
            <summary>
            Gets or sets a payment method identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.IsMultiOrder">
            <summary>
            Gets or sets a payment method identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.ShoppingCartItemIds">
            <summary>
            All shopping cart item identifiers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.CreditCardType">
            <summary>
            Gets or sets a credit card type (Visa, Master Card, etc...).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.CreditCardName">
            <summary>
            Gets or sets a credit card owner name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.CreditCardNumber">
            <summary>
            Gets or sets a credit card number.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.CreditCardExpireYear">
            <summary>
            Gets or sets a credit card expire year.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.CreditCardExpireMonth">
            <summary>
            Gets or sets a credit card expire month.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.CreditCardCvv2">
            <summary>
            Gets or sets a credit card CVV2 (Card Verification Value).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.PayPalOrderId">
            <summary>
            Gets or sets a PayPal order id.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.PayPalPayerId">
            <summary>
            Gets or sets a paypal payer identifier (required for PayPal payment methods).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.GoogleOrderNumber">
            <summary>
            Gets or sets a google order number (required for Google Checkout).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.PurchaseOrderNumber">
            <summary>
            Gets or sets a purchase order number (required for Purchase Order payment method).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.CreditCardStartYear">
            <summary>
            Gets or sets the credit card start year.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.CreditCardStartMonth">
            <summary>
            Gets or sets the credit card start month.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.CreditCardIssueNumber">
            <summary>
            Gets or sets the credit card issue number.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.DirectDebitAccountHolder">
            <summary>
            Gets or sets the direct debit account holder.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.DirectDebitAccountNumber">
            <summary>
            Gets or sets the direct debit account number.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.DirectDebitBankCode">
            <summary>
            Gets or sets the direct debit bank code.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.DirectDebitCountry">
            <summary>
            Gets or sets the direct debit country.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.DirectDebitBankName">
            <summary>
            Gets or sets the direct debit bank name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.DirectDebitIban">
            <summary>
            Gets or sets the direct debit IBAN.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.DirectDebitBic">
            <summary>
            Gets or sets the direct debit BIC.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.IsRecurringPayment">
            <summary>
            Gets or sets a value idicating whether it's a recurring payment (initial payment was already processed).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.InitialOrderId">
            <summary>
            Gets or sets an initial (parent) order identifier if order is recurring.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.RecurringCycleLength">
            <summary>
            Gets or sets the cycle length.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.RecurringCyclePeriod">
            <summary>
            Gets or sets the cycle period.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.RecurringTotalCycles">
            <summary>
            Gets or sets the total cycles.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.ProcessPaymentResult">
            <summary>
            Represents a process payment result.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.AvsResult">
            <summary>
            Gets or sets an AVS result.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.AuthorizationTransactionId">
            <summary>
            Gets or sets the ID of a payment authorization.
            Usually this comes from a payment gateway.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.AuthorizationTransactionCode">
            <summary>
            Gets or sets a payment transaction code.
            Not used by Smartstore. Can be any data that the payment provider needs for later processing.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.AuthorizationTransactionResult">
            <summary>
            Gets or sets a short result info about the payment authorization.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.CaptureTransactionId">
            <summary>
            Gets or sets the ID of a payment capture.
            Usually this comes from a payment gateway. Can be equal to <see cref="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.AuthorizationTransactionId"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.CaptureTransactionResult">
            <summary>
            Gets or sets a short result info about the payment capture.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.SubscriptionTransactionId">
            <summary>
            Gets or sets the ID for payment subscription. Usually used for recurring payment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.AllowStoringCreditCardNumber">
            <summary>
            Gets or sets a value indicating whether storing of credit card number, CVV2 is allowed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.AllowStoringDirectDebit">
            <summary>
            Gets or sets a value indicating whether storing of credit card number, CVV2 is allowed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.ProcessPaymentResult.NewPaymentStatus">
            <summary>
            Gets or sets a payment status after processing.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.RecurringPayment">
            <summary>
            Represents a recurring payment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.CycleLength">
            <summary>
            Gets or sets the cycle length.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.CyclePeriodId">
            <summary>
            Gets or sets the cycle period identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.CyclePeriod">
            <summary>
            Gets or sets the payment status.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.TotalCycles">
            <summary>
            Gets or sets the total cycles.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.StartDateUtc">
            <summary>
            Gets or sets the start date.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.IsActive">
            <summary>
            Gets or sets a value indicating whether the payment is active.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.Deleted">
            <summary>
            Gets or sets a value indicating whether the entity has been deleted.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.InitialOrderId">
            <summary>
            Gets or sets the initial order identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of payment creation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.RecurringPaymentHistory">
            <summary>
            Gets or sets the recurring payment history.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPayment.InitialOrder">
            <summary>
            Gets the initial order.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.RecurringPaymentHistory">
            <summary>
            Represents a recurring payment history.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPaymentHistory.RecurringPaymentId">
            <summary>
            Gets or sets the recurring payment identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPaymentHistory.OrderId">
            <summary>
            Gets or sets the recurring payment identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPaymentHistory.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of entity creation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RecurringPaymentHistory.RecurringPayment">
            <summary>
            Gets the recurring payment.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.RefundPaymentRequest">
            <summary>
            Represents a request to refund a payment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RefundPaymentRequest.AmountToRefund">
            <summary>
            Gets or sets the refund amount in primary currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.RefundPaymentRequest.IsPartialRefund">
            <summary>
            Gets or sets a value indicating whether it is a partial or a full refund.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentProviderExtensions.IsPaymentProviderEnabled(Smartstore.Engine.Modularity.Provider{Smartstore.Core.Checkout.Payment.IPaymentMethod},Smartstore.Core.Checkout.Payment.PaymentSettings)">
            <summary>
            Checks whether payment method is enabled.
            </summary>
            <param name="provider">Payment provider.</param>
            <param name="paymentSettings">Payment settings.</param>
            <returns><c>True</c> if payment method is active, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentServiceExtensions.SupportVoidAsync(Smartstore.Core.Checkout.Payment.IPaymentService,System.String)">
            <summary>
            Gets a value indicating whether void is supported by payment method.
            </summary>
            <param name="systemName">Payment provider system name.</param>
            <returns>A value indicating whether void is supported.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentServiceExtensions.SupportRefundAsync(Smartstore.Core.Checkout.Payment.IPaymentService,System.String)">
            <summary>
            Gets a value indicating whether refund is supported by payment method.
            </summary>
            <param name="systemName">Payment provider system name.</param>
            <returns>A value indicating whether refund is supported.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentServiceExtensions.SupportPartiallyRefundAsync(Smartstore.Core.Checkout.Payment.IPaymentService,System.String)">
            <summary>
            Gets a value indicating whether partial refund is supported by payment method.
            </summary>
            <param name="systemName">Payment provider system name.</param>
            <returns>A value indicating whether partial refund is supported.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentServiceExtensions.SupportCaptureAsync(Smartstore.Core.Checkout.Payment.IPaymentService,System.String)">
            <summary>
            Gets a value indicating whether the payment method supports capture.
            </summary>
            <param name="systemName">Payment provider system name.</param>
            <returns>A value indicating whether capture is supported.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentServiceExtensions.IsPaymentProviderEnabledAsync(Smartstore.Core.Checkout.Payment.IPaymentService,System.String,System.Int32)">
            <summary>
            Checks whether a payment provider is enabled for a shop.
            Note that this method does not check whether the payment provider is filtered out or matches applied rule sets.
            </summary>
            <param name="systemName">System name of the payment provider.</param>
            <param name="storeId">Filter payment provider by store identifier. 0 to load all.</param>
            <returns><c>True</c> payment provider is active, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentServiceExtensions.GetPaymentProviderTypeAsync(Smartstore.Core.Checkout.Payment.IPaymentService,System.String)">
            <summary>
            Gets a payment method type.
            </summary>
            <param name="systemName">Payment provider system name.</param>
            <returns>A payment method type.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentServiceExtensions.GetRecurringPaymentTypeAsync(Smartstore.Core.Checkout.Payment.IPaymentService,System.String)">
            <summary>
            Gets a recurring payment type of payment method.
            </summary>
            <param name="systemName">Payment provider system name.</param>
            <returns>A recurring payment type of payment method.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.PaymentMessageFactoryExtensions.SendRecurringPaymentCancelledStoreOwnerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.Payment.RecurringPayment,System.Int32)">
            <summary>
            Sends a recurring payment cancelled notification to the store owner.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.RecurringPaymentQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Payment.RecurringPayment},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Applies a standard filter and sorts by <see cref="P:Smartstore.Core.Checkout.Payment.RecurringPayment.StartDateUtc"/>, then by <see cref="P:Smartstore.Domain.BaseEntity.Id"/>./>
            </summary>
            <param name="query">Recurring payment query.</param>
            <param name="initialOrderId">Initial order identifier.</param>
            <param name="customerId">Customer identifier.</param>
            <param name="storeId">Store identifier.</param>
            <param name="includeHidden">A value indicating whether to include hidden records.</param>
            <returns>Recurring payment query.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.IPaymentMethod">
            <summary>
            Provides an interface for creating payment gateways and methods.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.IPaymentMethod.RequiresInteraction">
            <summary>
            Gets a value indicating whether the payment method requires user input in checkout
            before proceeding, e.g. credit card or direct debit payment. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.IPaymentMethod.RequiresPaymentSelection">
            <summary>
            Gets a value indicating whether the payment method requires the payment selection page in checkout
            before proceeding. For example, to create a payment transaction at this stage.
            Default is <c>true</c>. If <c>false</c>, then the payment method is qualified for Quick Checkout and 
            <see cref="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.CreateProcessPaymentRequestAsync(Smartstore.Core.Checkout.Cart.ShoppingCart)"/> must be implemented.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.IPaymentMethod.SupportCapture">
            <summary>
            Gets a value indicating whether (later) capturing of the payment amount is supported,
            for instance when the goods are shipped.
            </summary>
            <remarks>If <c>true</c>, then you must overwrite the method <see cref="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.CaptureAsync(Smartstore.Core.Checkout.Payment.CapturePaymentRequest)"/>.</remarks>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.IPaymentMethod.SupportPartiallyRefund">
            <summary>
            Gets a value indicating whether a partial refund is supported.
            </summary>
            <remarks>If <c>true</c>, then you must overwrite the method <see cref="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.RefundAsync(Smartstore.Core.Checkout.Payment.RefundPaymentRequest)"/>.</remarks>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.IPaymentMethod.SupportRefund">
            <summary>
            Gets a value indicating whether a full refund is supported.
            </summary>
            <remarks>If <c>true</c>, then you must overwrite the method <see cref="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.RefundAsync(Smartstore.Core.Checkout.Payment.RefundPaymentRequest)"/>.</remarks>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.IPaymentMethod.SupportVoid">
            <summary>
            Gets a value indicating whether cancellation of the payment (transaction) is supported.
            </summary>
            <remarks>If <c>true</c>, then you must overwrite the method <see cref="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.VoidAsync(Smartstore.Core.Checkout.Payment.VoidPaymentRequest)"/>.</remarks>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.IPaymentMethod.RecurringPaymentType">
            <summary>
            Gets the type of recurring payment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.IPaymentMethod.PaymentMethodType">
            <summary>
            Gets the payment method type.
            </summary>
            <remarks>Choose a type that best suits your payment method.</remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.GetPaymentInfoWidget">
            <summary>
            Gets the widget invoker for payment info. The payment info is displayed on checkout's payment page.
            Return <c>null</c> when there is nothing to render.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.GetPaymentFeeInfoAsync(Smartstore.Core.Checkout.Cart.ShoppingCart)">
            <summary>
            Gets the additional handling fee for a payment.
            </summary>
            <returns>The fixed fee or a percentage value. If <c>UsePercentage</c> is <c>true</c>, the fee is calculated as a percentage of the order total.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.GetPaymentInfoAsync(Microsoft.AspNetCore.Http.IFormCollection)">
            <summary>
            Gets a <see cref="T:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest"/>. Called after the customer selected a payment method on checkout's payment page.
            </summary>
            <param name="form">Form with payment data.</param>
            <remarks>
            Typically used to specify an <see cref="P:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest.OrderGuid"/> that can be sent to the payment provider before the order is placed.
            It will be saved later when the order is created.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.ValidatePaymentDataAsync(Microsoft.AspNetCore.Http.IFormCollection)">
            <summary>
            Validates the payment data entered by customer on checkout's payment page.
            </summary>
            <param name="form">Form with payment data.</param>
            <returns><see cref="T:Smartstore.Core.Checkout.Payment.PaymentValidationResult"/> instance</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.GetPaymentSummaryAsync">
            <summary>
            Gets a short summary of payment data entered by customer in checkout that is displayed on the checkout's confirm page.
            </summary>
            <returns>Payment summary. <c>null</c> if there is no summary.</returns>
            <remarks>Typically used to display the brand name and a masked credit card number.</remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.CreateProcessPaymentRequestAsync(Smartstore.Core.Checkout.Cart.ShoppingCart)">
            <summary>
            Creates a <see cref="T:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest"/> for automatic fulfillment of a payment request (Quick Checkout).
            Only required if <see cref="P:Smartstore.Core.Checkout.Payment.IPaymentMethod.RequiresPaymentSelection"/> is <c>false</c>.
            </summary>
            <param name="cart">Current shopping cart.</param>
            <returns>
            <see cref="T:Smartstore.Core.Checkout.Payment.ProcessPaymentRequest"/> or <c>null</c> if the payment request cannot be fulfilled automatically.
            In this case, the customer will be directed to the payment selection page.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.PreProcessPaymentAsync(Smartstore.Core.Checkout.Payment.ProcessPaymentRequest)">
            <summary>
            Pre-process a payment. Called immediately before <see cref="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.ProcessPaymentAsync(Smartstore.Core.Checkout.Payment.ProcessPaymentRequest)"/>.
            </summary>
            <param name="request">Payment info required for order processing.</param>
            <returns>Pre-process payment result.</returns>
            <remarks>
            Can be used, for example, to complete required data such as the billing address.
            Throw <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> to abort payment and order placement.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.ProcessPaymentAsync(Smartstore.Core.Checkout.Payment.ProcessPaymentRequest)">
            <summary>
            The main method to make a payment. Called immediately before placing the order.
            </summary>
            <param name="request">Payment info required for order processing.</param>
            <returns>Process payment result.</returns>
            <remarks>
            Intended for main payment processing like payment authorization.
            Throw <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> to abort payment and order placement.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.PostProcessPaymentAsync(Smartstore.Core.Checkout.Payment.PostProcessPaymentRequest)">
            <summary>
            Post-process payment. Called after (!) an order has been placed or when the user starts the payment again and is redirected
            to the payment page of a third-party provider for this purpose (only required for older payment methods).
            </summary>
            <param name="request">Payment info required for order processing.</param>
            <remarks>
            Used, for example, to redirect to a payment page to complete the payment after the order has been placed.
            Throw <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> if a payment error occurs.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.CanRePostProcessPaymentAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether customers can complete a payment after order
            has been placed but not yet completed (only for redirection payment methods).
            </summary>
            <returns>A value indicating whether re-starting the payment process is supported.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.CaptureAsync(Smartstore.Core.Checkout.Payment.CapturePaymentRequest)">
            <summary>
            Captures a payment amount.
            </summary>
            <param name="request">Capture payment request.</param>
            <returns>Capture payment result.</returns>
            <remarks>
            Throw <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> if a payment error occurs.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.RefundAsync(Smartstore.Core.Checkout.Payment.RefundPaymentRequest)">
            <summary>
            Fully or partially refunds a payment amount.
            </summary>
            <param name="request">Refund payment request.</param>
            <returns>Refund payment result.</returns>
            <remarks>
            Throw <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> if a payment error occurs.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.VoidAsync(Smartstore.Core.Checkout.Payment.VoidPaymentRequest)">
            <summary>
            Cancels a payment (transaction).
            </summary>
            <param name="request">Void payment request.</param>
            <returns>Void payment result.</returns>
            <remarks>
            Throw <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> if a payment error occurs.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.ProcessRecurringPaymentAsync(Smartstore.Core.Checkout.Payment.ProcessPaymentRequest)">
            <summary>
            Processes a recurring payment.
            </summary>
            <param name="request">Payment info required for order processing.</param>
            <returns>Process payment result.</returns>
            <remarks>
            Throw <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> if a payment error occurs.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethod.CancelRecurringPaymentAsync(Smartstore.Core.Checkout.Payment.CancelRecurringPaymentRequest)">
            <summary>
            Cancels a recurring payment.
            </summary>
            <param name="request">Cancel recurring payment request.</param>
            <returns>Cancel recurring payment result.</returns>
            <remarks>
            Throw <see cref="T:Smartstore.Core.Checkout.Payment.PaymentException"/> if a payment error occurs.
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.IPaymentMethodFilter">
            <summary>
            Allows to filter out payment methods.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentMethodFilter.IsExcludedAsync(Smartstore.Core.Checkout.Payment.PaymentFilterRequest)">
            <summary>
            Gets a value indicating whether a payment method should be filtered out.
            </summary>
            <param name="request">Payment filter request.</param>
            <returns><c>True</c> filter out method, <c>False</c> do not filter out method.</returns>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentFilterRequest.PaymentProvider">
            <summary>
            The payment provider to be checked.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentFilterRequest.Cart">
            <summary>
            The context shopping cart. Can be <c>null</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Payment.PaymentFilterRequest.StoreId">
            <summary>
            The context store identifier.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.IPaymentService">
            <summary>
            Payment service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.IsPaymentProviderEnabledAsync(System.String,System.Int32)">
            <summary>
            Checks whether a payment provider is globally enabled, and also enabled for the given store.
            This method does NOT match rules or filters.
            </summary>
            <param name="systemName">System name of the payment provider.</param>
            <param name="storeId">Optional store id to check for.</param>
            <returns><c>True</c> payment method is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.IsPaymentProviderActiveAsync(System.String,Smartstore.Core.Checkout.Cart.ShoppingCart,System.Int32)">
            <summary>
            Checks that a payment provider is enabled and active, not filtered out, and matches the applied rule sets.
            A payment method that meets these requirements will appear in the checkout.
            </summary>
            <param name="systemName">System name of the payment provider.</param>
            <param name="cart">Shopping cart.</param>
            <param name="storeId">Optional store id to check for.</param>
            <returns><c>True</c> payment method is active, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.LoadActivePaymentProvidersAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Int32,Smartstore.Core.Checkout.Payment.PaymentMethodType[],System.Boolean)">
            <summary>
            Loads payment methods that are active, not filtered out, and match the applied rule sets.
            Payment methods that meet these requirements will appear in the checkout.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="storeId">Filter payment provider by store identifier. 0 to load all.</param>
            <param name="types">Filter payment methods by payment method types.</param>
            <param name="provideFallbackMethod">Provide a fallback payment method if there is no match.</param>
            <returns>Filtered payment methods.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.LoadAllPaymentProvidersAsync(System.Boolean,System.Int32)">
            <summary>
            Loads all payment providers.
            </summary>
            <param name="onlyEnabled"><c>true</c> to only load enabled provider.</param>
            <param name="storeId">Filter payment provider by store identifier. 0 to load all.</param>
            <returns>Payment provider.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.LoadPaymentProviderBySystemNameAsync(System.String,System.Boolean,System.Int32)">
            <summary>
            Loads a payment provider by system name.
            </summary>
            <param name="systemName">System name of the payment provider.</param>
            <param name="onlyWhenEnabled"><c>true</c> to only load an enabled provider.</param>
            <param name="storeId">Optional store id to check for.</param>
            <returns>Payment provider.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.GetAllPaymentMethodsAsync(System.Boolean)">
            <summary>
            Reads all configured payment methods from the database.
            </summary>
            <param name="withRules">
            <c>true</c> will eage load all assigned <see cref="P:Smartstore.Core.Checkout.Payment.PaymentMethod.RuleSets"/>, 
            then <see cref="P:Smartstore.Core.Rules.RuleSetEntity.Rules"/> from database.
            </param>
            <returns>All payment methods.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.PreProcessPaymentAsync(Smartstore.Core.Checkout.Payment.ProcessPaymentRequest)">
            <summary>
            Pre process a payment before the order is placed.
            </summary>
            <param name="processPaymentRequest">Process payment request.</param>
            <returns>Pre process payment result. Payment and order are cancelled if errors are returned.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.ProcessPaymentAsync(Smartstore.Core.Checkout.Payment.ProcessPaymentRequest)">
            <summary>
            Process a payment.
            </summary>
            <param name="processPaymentRequest">Process payment request.</param>
            <returns>Process payment result.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.PostProcessPaymentAsync(Smartstore.Core.Checkout.Payment.PostProcessPaymentRequest)">
            <summary>
            Post process the payment directly after the order has been placed.
            Use <see cref="P:Smartstore.Core.Checkout.Payment.PostProcessPaymentRequest.RedirectUrl"/> if redirecting to a payment page of the payment provider is required.
            </summary>
            <param name="postProcessPaymentRequest">Post process the payment request.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.CanRePostProcessPaymentAsync(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether customers can complete a payment after order is placed but not completed 
            (for redirection payment methods, <see cref="P:Smartstore.Core.Checkout.Payment.PostProcessPaymentRequest.RedirectUrl"/>).
            </summary>
            <param name="order">Order.</param>
            <returns><c>True</c> if the payment can be re-started, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.CaptureAsync(Smartstore.Core.Checkout.Payment.CapturePaymentRequest)">
            <summary>
            Captures payment.
            </summary>
            <param name="capturePaymentRequest">Capture payment request.</param>
            <returns>Capture payment result.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.RefundAsync(Smartstore.Core.Checkout.Payment.RefundPaymentRequest)">
            <summary>
            Refunds a payment.
            </summary>
            <param name="refundPaymentRequest">Refund payment request.</param>
            <returns>Refund payment result.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.VoidAsync(Smartstore.Core.Checkout.Payment.VoidPaymentRequest)">
            <summary>
            Voids a payment.
            </summary>
            <param name="voidPaymentRequest">Void payment request.</param>
            <returns>Void payment result.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.ProcessRecurringPaymentAsync(Smartstore.Core.Checkout.Payment.ProcessPaymentRequest)">
            <summary>
            Process recurring payment.
            </summary>
            <param name="processPaymentRequest">Proces payment request.</param>
            <returns>Process payment result.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.GetMaskedCreditCardNumber(System.String)">
            <summary>
            Gets masked credit card number.
            </summary>
            <param name="creditCardNumber">Credit card number.</param>
            <returns>Masked credit card number.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.GetNextRecurringPaymentDateAsync(Smartstore.Core.Checkout.Payment.RecurringPayment)">
            <summary>
            Gets the next recurring payment date.
            </summary>
            <param name="recurringPayment">Recurring payment.</param>
            <returns>Next recurring payment date. <c>null</c> if there is no next payment date.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.GetRecurringPaymentRemainingCyclesAsync(Smartstore.Core.Checkout.Payment.RecurringPayment)">
            <summary>
            Gets the remaining cycles of a recurring payment.
            </summary>
            <param name="recurringPayment">Recurring payment.</param>
            <returns>Remaining cycles of a recurring payment.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.IPaymentService.CancelRecurringPaymentAsync(Smartstore.Core.Checkout.Payment.CancelRecurringPaymentRequest)">
            <summary>
            Cancels a recurring payment.
            </summary>
            <param name="cancelPaymentRequest">Cancel recurring payment request.</param>
            <returns>Cancel recurring payment result.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Payment.PaymentMethodBase">
            <summary>
            Base class to implement payment methods.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Payment.PaymentMethodBase.CancelRecurringPaymentAsync(Smartstore.Core.Checkout.Payment.CancelRecurringPaymentRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Checkout.Rules.ICartRuleProviderExtensions.RuleMatchesAsync(Smartstore.Core.Checkout.Rules.ICartRuleProvider,Smartstore.Core.Rules.RuleExpression,System.Action{Smartstore.Core.Checkout.Rules.CartRuleContext})">
            <inheritdoc cref="M:Smartstore.Core.Checkout.Rules.ICartRuleProvider.RuleMatchesAsync(System.Int32[],Smartstore.Core.Rules.LogicalRuleOperator,System.Action{Smartstore.Core.Checkout.Rules.CartRuleContext})"/>
            <param name="expression">Rule expression.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Rules.RuleExpressionExtensions.HasListMatch``1(Smartstore.Core.Rules.RuleExpression,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Checks whether a value matches a list.
            </summary>
            <param name="expression">Rule expression.</param>
            <param name="value">Value.</param>
            <param name="comparer">Equality comparer.</param>
            <returns><c>true</c> if value matches a list, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Rules.RuleExpressionExtensions.HasListsMatch``1(Smartstore.Core.Rules.RuleExpression,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Checks whether a list of values matches a list.
            </summary>
            <param name="expression">Rule expression.</param>
            <param name="values">Values.</param>
            <param name="comparer">Equality comparer.</param>
            <returns><c>true</c> values matches a list, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Rules.ICartRuleProvider">
            <summary>
            Cart rule provider.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Rules.ICartRuleProvider.GetProcessor(Smartstore.Core.Rules.RuleExpression)">
            <summary>
            Gets the rule processor.
            </summary>
            <param name="expression">Rule expression.</param>
            <returns>Rule processor.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Rules.ICartRuleProvider.CreateExpressionGroupAsync(System.Int32)">
            <summary>
            Creates a rule expression group.
            </summary>
            <param name="ruleSetId">Rule set identifier.</param>
            <returns>Expression group.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Rules.ICartRuleProvider.RuleMatchesAsync(System.Int32[],Smartstore.Core.Rules.LogicalRuleOperator,System.Action{Smartstore.Core.Checkout.Rules.CartRuleContext})">
            <summary>
            Checks whether a rule is met.
            </summary>
            <param name="ruleSetIds">Rule set identifiers.</param>
            <param name="logicalOperator">Rule operator.</param>
            <param name="contextAction">
            An optional action delegate to change the <see cref="T:Smartstore.Core.Checkout.Rules.CartRuleContext"/> 
            instance that is passed to the rules.
            </param>
            <returns><c>true</c> the rule is met, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Rules.ICartRuleProvider.RuleMatchesAsync(Smartstore.Core.Rules.IRulesContainer,Smartstore.Core.Rules.LogicalRuleOperator,System.Action{Smartstore.Core.Checkout.Rules.CartRuleContext})">
            <inheritdoc cref="M:Smartstore.Core.Checkout.Rules.ICartRuleProvider.RuleMatchesAsync(System.Int32[],Smartstore.Core.Rules.LogicalRuleOperator,System.Action{Smartstore.Core.Checkout.Rules.CartRuleContext})"/>
            <param name="entity">Rule container.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Rules.ICartRuleProvider.RuleMatchesAsync(Smartstore.Core.Rules.RuleExpression[],Smartstore.Core.Rules.LogicalRuleOperator,System.Action{Smartstore.Core.Checkout.Rules.CartRuleContext})">
            <inheritdoc cref="M:Smartstore.Core.Checkout.Rules.ICartRuleProvider.RuleMatchesAsync(System.Int32[],Smartstore.Core.Rules.LogicalRuleOperator,System.Action{Smartstore.Core.Checkout.Rules.CartRuleContext})"/>
            <param name="expressions">Rule expressions.</param>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.ActiveShippingRateComputationMethodSystemNames">
            <summary>
            Gets or sets system names of active shipping rate computation methods
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.FreeShippingOverXEnabled">
            <summary>
            Gets or sets a value indicating whether 'Free shipping over X' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.FreeShippingOverXValue">
            <summary>
            Gets or sets a value of 'Free shipping over X' option
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.FreeShippingOverXIncludingTax">
            <summary>
            Gets or sets a value indicating whether 'Free shipping over X' option
            should be evaluated over 'X' value including tax or not
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.EstimateShippingEnabled">
            <summary>
            Gets or sets a value indicating whether 'Estimate shipping' option is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.DisplayShipmentEventsToCustomers">
            <summary>
            A value indicating whether customers should see shipment events on their order details pages
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.ShippingOriginAddressId">
            <summary>
            Gets or sets shipping origin address
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.ReturnValidOptionsIfThereAreAny">
            <summary>
            Gets or sets a value indicating whether we should return valid options if there are any (no matter of the errors returned by other shipping rate compuation methods).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.CalculateShippingAtCheckout">
            <summary>
            Gets or sets a value indicating whether to calculate shipping at checkout.
            If <c>true</c>, the shipping costs and the order total amount will not be displayed on the shopping cart page
            if a shipping address has not yet been entered.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.SkipShippingIfSingleOption">
            <summary>
            Gets or sets a value indicating whether to skip the shipping selection during checkout, if only one shipping method is available.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.ChargeOnlyHighestProductShippingSurcharge">
            <summary>
            Gets or sets a value indicating whether to charge only the highest shipping surcharge of products
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.DeliveryTimesDateFormat">
            <summary>
            Specifies a custom formatting pattern for delivery time dates (e.g. "M").
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.TodayShipmentHour">
            <summary>
            Specifies the hour (value between 1 and 24) by which the order will be shipped the same day.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingSettings.DeliveryOnWorkweekDaysOnly">
            <summary>
            Specifies whether delivery takes place only on workweek days.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.Shipment">
            <summary>
            Represents a shipment
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Shipment.OrderId">
            <summary>
            Gets or sets the order identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Shipment.TrackingNumber">
            <summary>
            Gets or sets the tracking number of this shipment
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Shipment.TrackingUrl">
            <summary>
            Gets or sets the tracking URL.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Shipment.TotalWeight">
            <summary>
            Gets or sets the total weight of this shipment
            It's nullable for compatibility with the previous version of Smartstore where was no such property
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Shipment.ShippedDateUtc">
            <summary>
            Gets or sets the shipped date and time
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Shipment.DeliveryDateUtc">
            <summary>
            Gets or sets the delivery date and time
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Shipment.CreatedOnUtc">
            <summary>
            Gets or sets the entity creation date
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Shipment.Order">
            <summary>
            Gets or sets the order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Shipment.ShipmentItems">
            <summary>
            Gets or sets the shipment items
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.ShipmentItem">
            <summary>
            Represents a shipment order product variant
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShipmentItem.ShipmentId">
            <summary>
            Gets or sets the shipment identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShipmentItem.OrderItemId">
            <summary>
            Gets or sets the order item identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShipmentItem.Quantity">
            <summary>
            Gets or sets the quantity
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShipmentItem.Shipment">
            <summary>
            Gets the shipment
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.ShippingMethod">
            <summary>
            Represents a shipping method.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingMethod.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingMethod.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingMethod.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingMethod.IgnoreCharges">
            <summary>
            Gets or sets a value indicating whether to ignore charges.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingMethod.LimitedToStores">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingMethod.RuleSets">
            <summary>
            Gets or sets assigned rule sets.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.ShippingOption">
            <summary>
            Represents a shipping option
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOption.ShippingMethodId">
            <summary>
            Shipping method identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOption.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOption.ShippingRateComputationMethodSystemName">
            <summary>
            Gets or sets the system name of shipping rate computation method
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOption.Rate">
            <summary>
            Gets or sets a shipping rate (without discounts, additional shipping charges, etc)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOption.Name">
            <summary>
            Gets or sets a shipping option name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOption.Description">
            <summary>
            Gets or sets a shipping option description
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest">
            <summary>
            Represents a request to get shipping options
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.MatchRules">
            <summary>
            Gets or sets a value indicating whether shipping methods must match cart rules.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.StoreId">
            <summary>
            Gets the context store identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.Customer">
            <summary>
            Gets the customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.Items">
            <summary>
            Gets organized shopping cart items
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.ShippingAddress">
            <summary>
            Gets the shipping address
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.CountryFrom">
            <summary>
            Gets or sets the sender's country
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.StateProvinceFrom">
            <summary>
            Gets the sender's state/province
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.ZipPostalCodeFrom">
            <summary>
            Gets or sets the sender's zip/postal code
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.ShippingOptionResponse">
            <summary>
            Represents a response from get shipping options
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionResponse.ShippingOptions">
            <summary>
            Gets shipping options
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionResponse.Errors">
            <summary>
            Gets or sets errors
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.ShippingOptionResponse.Success">
            <summary>
            Gets a value indicating whether the response is successful
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.ShippingRateComputationMethodType">
            <summary>
            Represents a shipping rate computation method type
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Shipping.ShippingRateComputationMethodType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Shipping.ShippingRateComputationMethodType.Offline">
            <summary>
            Offline
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Shipping.ShippingRateComputationMethodType.Realtime">
            <summary>
            Realtime
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.ShippingStatus">
            <summary>
            Represents the shipping status
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Shipping.ShippingStatus.ShippingNotRequired">
            <summary>
            Shipping not required
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Shipping.ShippingStatus.NotYetShipped">
            <summary>
            Not yet shipped
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Shipping.ShippingStatus.PartiallyShipped">
            <summary>
            Partially shipped
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Shipping.ShippingStatus.Shipped">
            <summary>
            Shipped
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Shipping.ShippingStatus.Delivered">
            <summary>
            Delivered
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.Events.ShipmentStatusEvent">
            <summary>
            Represents a shipment status event
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Events.ShipmentStatusEvent.EventName">
            <summary>
            Gets or sets Event name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Events.ShipmentStatusEvent.Location">
            <summary>
            Gets or sets the location
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Events.ShipmentStatusEvent.CountryCode">
            <summary>
            Gets or sets the Two-letter country code
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.Events.ShipmentStatusEvent.Date">
            <summary>
            Gets or sets the date time
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShippingProviderExtensions.IsShippingProviderEnabled(Smartstore.Engine.Modularity.Provider{Smartstore.Core.Checkout.Shipping.IShippingRateComputationMethod},Smartstore.Core.Checkout.Shipping.ShippingSettings)">
            <summary>
            Checks whether a shipping rate computation method is active.
            </summary>
            <returns><c>True</c> if is active, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShippingServiceExtensions.GetShippingOptionsAsync(Smartstore.Core.Checkout.Shipping.IShippingService,Smartstore.Core.Checkout.Cart.ShoppingCart,Smartstore.Core.Common.Address,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets shipping options for a shopping cart.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="shippingAddress">Shipping Address.</param>
            <param name="allowedShippingProviderSystemName">
            Filter by shipping rate computation provider system name.
            <c>null</c> to load shipping options of all shipping rate computation providers.
            </param>
            <param name="storeId">Store identifier.</param>
            <param name="matchRules">A value indicating whether shipping methods must match cart rules.</param>
            <returns>Shipping option response.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.ShipmentMessageFactoryExtensions.SendShipmentSentCustomerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.Shipping.Shipment,System.Int32)">
            <summary>
            Sends a shipment sent notification to the customer.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.ShipmentMessageFactoryExtensions.SendShipmentDeliveredCustomerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Checkout.Shipping.Shipment,System.Int32)">
            <summary>
            Sends a shipment delivered notification to the customer.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.ShipmentQueryExtensions">
            <summary>
            Shipment query extensions
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.ShipmentQueryExtensions.ApplyTimeFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Shipping.Shipment},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Applies date time filter to shipment query ordered by <see cref="P:Smartstore.Core.Checkout.Shipping.Shipment.CreatedOnUtc"/>
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.ShipmentQueryExtensions.ApplyOrderFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Shipping.Shipment},System.Int32[])">
            <summary>
            Applies order filter to shipment query ordered by <see cref="P:Smartstore.Core.Checkout.Shipping.Shipment.OrderId"/> then by <see cref="P:Smartstore.Core.Checkout.Shipping.Shipment.CreatedOnUtc"/>
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.ShipmentQueryExtensions.ApplyShipmentFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Shipping.Shipment},System.Int32[])">
            <summary>
            Applies shipment filter to query ordered by shipment identifier then by <see cref="P:Smartstore.Core.Checkout.Shipping.Shipment.CreatedOnUtc"/>
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.ShippingOptionRequestExtensions">
            <summary>
            Get shipping option request extensions
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.ShippingOptionRequestExtensions.GetTotalWidth(Smartstore.Core.Checkout.Shipping.ShippingOptionRequest)">
            <summary>
            Gets total width of <see cref="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.Items"/>
            </summary>
            <returns>Total width</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.ShippingOptionRequestExtensions.GetTotalLength(Smartstore.Core.Checkout.Shipping.ShippingOptionRequest)">
            <summary>
            Gets total length of <see cref="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.Items"/>
            </summary>
            <returns>Total length</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.ShippingOptionRequestExtensions.GetTotalHeight(Smartstore.Core.Checkout.Shipping.ShippingOptionRequest)">
            <summary>
            Gets total height of <see cref="P:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest.Items"/>
            </summary>
            <returns>Total height</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.Hooks.ShipmentHook">
            <summary>
            Shipment hook
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.Hooks.ShipmentItemHook">
            <summary>
            Shipment item hook
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.IShippingRateComputationMethod">
            <summary>
            Provides an interface for shipping rate computation method
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.IShippingRateComputationMethod.ShippingRateComputationMethodType">
            <summary>
            Gets a shipping rate computation method type
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShippingRateComputationMethod.GetShippingOptionsAsync(Smartstore.Core.Checkout.Shipping.ShippingOptionRequest)">
            <summary>
            Gets available shipping options
            </summary>
            <param name="request">Get shipping options request</param>
            <returns>Get shipping options response</returns>
        </member>
        <member name="P:Smartstore.Core.Checkout.Shipping.IShippingRateComputationMethod.ShipmentTracker">
            <summary>
            Gets a shipment tracker
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.IShippingService">
            <summary>
            Shipping service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShippingService.LoadEnabledShippingProviders(System.Int32,System.String)">
            <summary>
            Gets enabled shipping rate computation providers.
            </summary>
            <param name="systemName">Filters providers by system name. <c>null</c> to load all methods.</param>
            <param name="storeId">Filters providers by store identifier. 0 to load all methods.</param>
            <remarks>
            Tries to get any fallback computation provider when no enabled provider was found.
            Throws an exception when no computation provider was found at all.
            </remarks>
            <returns>Shipping rate computation providers.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShippingService.GetAllShippingMethodsAsync(System.Int32,System.Boolean)">
            <summary>
            Reads all configured shipping methods from the database.
            </summary>
            <param name="storeId">Filters methods by store identifier. 0 to load all methods.</param>
            <param name="matchRules">A value indicating whether shipping methods must match cart rules.</param>
            <returns>Shipping methods.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShippingService.GetCartItemWeightAsync(Smartstore.Core.Checkout.Cart.OrganizedShoppingCartItem,System.Boolean)">
            <summary>
            Gets shopping cart items (total) weight.
            </summary>
            <param name="cartItem">Shopping cart.</param>
            <param name="multiplyByQuantity">A value indicating whether the item weight is to be multiplied by the quantity (total item weight).</param>
            <remarks>Includes additional <see cref="T:Smartstore.Core.Catalog.Attributes.ProductVariantAttribute"/> weight adjustments.</remarks>
            <returns>Shopping cart item weight.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShippingService.GetCartTotalWeightAsync(Smartstore.Core.Checkout.Cart.ShoppingCart,System.Boolean)">
            <summary>
            Gets shopping cart total weight.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="includeFreeShippingProducts">A value indicating whether to include products with free shipping.</param>
            <remarks>Includes <see cref="T:Smartstore.Core.Checkout.Attributes.CheckoutAttribute"/> of the customer in the calculations, if available.</remarks>
            <returns>Shopping cart total weight.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShippingService.CreateShippingOptionRequest(Smartstore.Core.Checkout.Cart.ShoppingCart,Smartstore.Core.Common.Address,System.Int32,System.Boolean)">
            <summary>
            Creates a shipping option request.
            </summary>
            <param name="cart">Shopping cart.</param>
            <param name="shippingAddress">Shipping address.</param>
            <param name="storeId">Store identifier.</param>
            <param name="matchRules">A value indicating whether shipping methods must match cart rules.</param>
            <returns><see cref="T:Smartstore.Core.Checkout.Shipping.ShippingOptionRequest"/>.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShippingService.GetShippingOptionsAsync(Smartstore.Core.Checkout.Shipping.ShippingOptionRequest,System.String)">
            <summary>
            Gets shipping options for a shipping option request.
            </summary>
            <param name="request">Shipping option request.</param>
            <param name="allowedShippingProviderSystemName">
            Filter by shipping rate computation provider system name.
            <c>null</c> to load shipping options of all shipping rate computation providers.
            </param>
            <remarks>
            Always returns <see cref="T:Smartstore.Core.Checkout.Shipping.ShippingOption"/> if there are any, even when there are warnings.
            </remarks>
            <returns>Get shipping option resopnse</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.CompositeShipmentTracker">
            <summary>
            General shipment tracker (finds an appropriate tracker by tracking number).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.CompositeShipmentTracker.GetAllTrackers">
            <summary>
            Gets all trackers. The result gets cached.
            </summary>
            <returns>All available shipment trackers.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.CompositeShipmentTracker.IsMatch(System.String)">
            <summary>
            Gets if the current tracker can track the tracking number.
            </summary>
            <param name="trackingNumber">The tracking number to track.</param>
            <returns><c>True</c> if the tracker can track, otherwise false.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.CompositeShipmentTracker.GetUrl(System.String)">
            <summary>
            Gets an url for a page to show tracking info (third party tracking page).
            </summary>
            <param name="trackingNumber">The tracking number.</param>
            <returns>An url to the tracking page.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.CompositeShipmentTracker.GetShipmentEventsAsync(System.String)">
            <summary>
            Gets all events for a tracking number.
            </summary>
            <param name="trackingNumber">The tracking number of events.</param>
            <returns>List of <see cref="T:Smartstore.Core.Checkout.Shipping.Events.ShipmentStatusEvent"/>.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Shipping.IShipmentTracker">
            <summary>
            Shipment tracker interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShipmentTracker.IsMatch(System.String)">
            <summary>
            Checks whether the current tracker can track the number
            </summary>
            <param name="trackingNumber">The number to track</param>
            <returns><c>True</c> if the tracker can track, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShipmentTracker.GetUrl(System.String)">
            <summary>
            Gets the url for the tracking info page (third party tracking page)
            </summary>
            <param name="trackingNumber">The number to track</param>
            <returns>The url of the tracking page</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Shipping.IShipmentTracker.GetShipmentEventsAsync(System.String)">
            <summary>
            Gets all shipment events for a tracking number
            </summary>
            <param name="trackingNumber">The number to track</param>
            <returns>Shipment status events</returns>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.TaxBasedOn">
            <summary>
            Tax based on
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.TaxDisplayType">
            <summary>
            Tax display type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.ActiveTaxProviderSystemName">
            <summary>
            Gets or sets an system name of active tax provider
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.DefaultTaxAddressId">
            <summary>
            Gets or sets default address used for tax calculation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.DisplayTaxSuffix">
            <summary>
            Gets or sets a value indicating whether to display tax suffix
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.DisplayTaxRates">
            <summary>
            Gets or sets a value indicating whether each tax rate should be displayed on separate line (shopping cart page)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.PricesIncludeTax">
            <summary>
            Gets or sets a value indicating whether prices incude tax
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.AllowCustomersToSelectTaxDisplayType">
            <summary>
            Gets or sets a value indicating whether customers are allowed to select tax display type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.HideZeroTax">
            <summary>
            Gets or sets a value indicating whether to hide zero tax
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.HideTaxInOrderSummary">
            <summary>
            Gets or sets a value indicating whether to hide tax in order summary when prices are shown tax inclusive
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShowLegalHintsInProductList">
            <summary>
            Gets or sets a value indicating whether to show legal info in product list
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShowLegalHintsInProductDetails">
            <summary>
            Gets or sets a value indicating whether to show legal info in product detail
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShowLegalHintsInFooter">
            <summary>
            Gets or sets a value indicating whether to show legal info in footer
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShippingIsTaxable">
            <summary>
            Gets or sets a value indicating whether shipping price is taxable
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShippingPriceIncludesTax">
            <summary>
            Gets or sets a value indicating whether shipping price incudes tax
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShippingTaxClassId">
            <summary>
            Gets or sets a value indicating the shipping tax class identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.PaymentMethodAdditionalFeeIsTaxable">
            <summary>
            Gets or sets a value indicating whether payment method additional fee is taxable
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.PaymentMethodAdditionalFeeIncludesTax">
            <summary>
            Gets or sets a value indicating whether payment method additional fee incudes tax
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.PaymentMethodAdditionalFeeTaxClassId">
            <summary>
            Gets or sets a value indicating the payment method additional fee tax class identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.AuxiliaryServicesTaxingType">
            <summary>
            Taxing type for auxiliary services like shipping and payment fees
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.EuVatEnabled">
            <summary>
            Gets or sets a value indicating whether EU VAT (Eupore Union Value Added Tax) is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.EuVatShopCountryId">
            <summary>
            Gets or sets a shop country identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.EuVatAllowVatExemption">
            <summary>
            Gets or sets a value indicating whether this store will exempt eligible VAT-registered customers from VAT
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.EuVatUseWebService">
            <summary>
            Gets or sets a value indicating whether we should use the VIES service of the EU to validate VAT numbers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.EuVatEmailAdminWhenNewVatSubmitted">
            <summary>
            Gets or sets a value indicating whether we should notify a store owner when a new VAT number is submitted
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxSettings.VatRequired">
            <summary>
            Gets or sets a value indicating whether a VAT-ID is required
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.Tax">
            <summary>
            Represents tax info.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.Tax.#ctor(Smartstore.Core.Checkout.Tax.TaxRate,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.Checkout.Tax.Tax"/> structure.
            </summary>
            <param name="rate">The tax rate.</param>
            <param name="amount">The calculated tax amount.</param>
            <param name="price">The origin price.</param>
            <param name="priceNet">The calculated bet price.</param>
            <param name="priceGross">The calculated gross price.</param>
            <param name="isGrossPrice">A value indicating whether <paramref name="price"/> includes tax already.</param>
            <param name="inclusive">A value indicating whether the result price should be gross (including tax).</param>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.Tax.Rate">
            <summary>
            The tax rate used for calculation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.Tax.Amount">
            <summary>
            The unrounded tax amount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.Tax.IsGrossPrice">
            <summary>
            Whether source price is gross (including tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.Tax.Inclusive">
            <summary>
            Whether result price is gross (including tax)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.Tax.PriceNet">
            <summary>
            The unrounded net price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.Tax.PriceGross">
            <summary>
            The unrounded gross price.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.Tax.Price">
            <summary>
            The rounded price, either net or gross according to <see cref="P:Smartstore.Core.Checkout.Tax.Tax.Inclusive"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.TaxCategory">
            <summary>
            Represents a tax category
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxCategory.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxCategory.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.TaxDisplayType">
            <summary>
            Represents the tax display type.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.TaxDisplayType.IncludingTax">
            <summary>
            Including tax.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.TaxDisplayType.ExcludingTax">
            <summary>
            Excluding tax.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.TaxBasedOn">
            <summary>
            Represents the tax base.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.TaxBasedOn.BillingAddress">
            <summary>
            Billing address.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.TaxBasedOn.ShippingAddress">
            <summary>
            Shipping address.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.TaxBasedOn.DefaultAddress">
            <summary>
            Default address.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.VatNumberStatus">
            <summary>
            Represents the VAT number status.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.VatNumberStatus.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.VatNumberStatus.Empty">
            <summary>
            Empty.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.VatNumberStatus.Valid">
            <summary>
            Valid.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.VatNumberStatus.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.AuxiliaryServicesTaxType">
            <summary>
            Specifies how to calculate the tax of auxiliary services like shipping and payment fees.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.AuxiliaryServicesTaxType.SpecifiedTaxCategory">
            <summary>
            Calculate tax of auxiliary services with the tax category specified in settings.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.AuxiliaryServicesTaxType.HighestCartAmount">
            <summary>
            Calculate tax with the tax rate that has the highest amount in the cart.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Checkout.Tax.AuxiliaryServicesTaxType.HighestTaxRate">
            <summary>
            Calculate tax by the highest tax rate in the cart.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.TaxRate">
            <summary>
            Represents the tax rate resolution result.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxRate.Rate">
            <summary>
            The tax rate
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxRate.TaxCategoryId">
            <summary>
            The tax category id
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.TaxRateRequest">
            <summary>
            Represents a request for a tax rate.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxRateRequest.Customer">
            <summary>
            Gets or sets a customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxRateRequest.Address">
            <summary>
            Gets or sets an address
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.TaxRateRequest.TaxCategoryId">
            <summary>
            Gets or sets a tax category identifier
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.VatCheckResult">
            <summary>
            Represents the result of VAT number check.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.VatCheckResult.Status">
            <summary>
            Gets or sets the VAT number status.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.VatCheckResult.VatNumber">
            <summary>
            Gets or sets the VAT number to be checked (including the two letter country ISO code).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.VatCheckResult.CountryCode">
            <summary>
            Gets or sets the two letter country ISO code of the <see cref="P:Smartstore.Core.Checkout.Tax.VatCheckResult.VatNumber"/> returned by the VAT service.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.VatCheckResult.Name">
            <summary>
            Gets or sets the name of the holder of the <see cref="P:Smartstore.Core.Checkout.Tax.VatCheckResult.VatNumber"/> returned by the VAT service.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.VatCheckResult.Address">
            <summary>
            Gets or sets the address of the holder of the <see cref="P:Smartstore.Core.Checkout.Tax.VatCheckResult.VatNumber"/> returned by the VAT service.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Checkout.Tax.VatCheckResult.Exception">
            <summary>
            Gets or sets an exception that occurred during the check of the <see cref="P:Smartstore.Core.Checkout.Tax.VatCheckResult.VatNumber"/>.
            <c>null</c> if the VAT service is operating properly.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.ITaxCalculator">
            <summary>
            Tax calculator interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxCalculator.CalculateTaxFromGross(System.Decimal,Smartstore.Core.Checkout.Tax.TaxRate,System.Boolean,Smartstore.Core.Common.Currency)">
            <summary>
            Calculates tax for a given gross price (price including tax).
            </summary>
            <param name="grossPrice">Gross price</param>
            <param name="rate">Tax rate</param>
            <param name="inclusive">A value indicating whether the result price should be gross (inclusing tax).</param>
            <param name="currency">Optional currency for result price rounding. If <c>null</c>, result will be unrounded.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxCalculator.CalculateTaxFromNet(System.Decimal,Smartstore.Core.Checkout.Tax.TaxRate,System.Boolean,Smartstore.Core.Common.Currency)">
            <summary>
            Calculates tax for a given net price (price excluding tax).
            </summary>
            <param name="netPrice">Net price</param>
            <param name="rate">Tax rate</param>
            <param name="inclusive">A value indicating whether the result price should be gross (inclusing tax).</param>
            <param name="currency">Optional currency for result price rounding. If <c>null</c>, result will be unrounded.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxCalculator.CalculateProductTaxAsync(Smartstore.Core.Catalog.Products.Product,System.Decimal,System.Nullable{System.Boolean},Smartstore.Core.Identity.Customer,Smartstore.Core.Common.Currency)">
            <summary>
            Calculates product tax.
            </summary>
            <param name="product">Product</param>
            <param name="price">Product price.</param>
            <param name="inclusive">A value indicating whether the calculated price should include tax. Obtained from <see cref="P:Smartstore.Core.IWorkContext.TaxDisplayType"/> if <c>null</c>.</param>
            <param name="customer">Customer. Obtained from <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/> if <c>null</c>.</param>
            <param name="currency">Optional currency instance for cash rounding.</param>
            <returns>A <see cref="T:Smartstore.Core.Checkout.Tax.Tax"/> structure containing the calculation result.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxCalculator.CalculateCheckoutAttributeTaxAsync(Smartstore.Core.Checkout.Attributes.CheckoutAttributeValue,System.Nullable{System.Boolean},Smartstore.Core.Identity.Customer,Smartstore.Core.Common.Currency)">
            <summary>
            Calculates tax for a checkout attribute value.
            </summary>
            <param name="attributeValue">Checkout attribute value.</param>
            <param name="inclusive">A value indicating whether the calculated price should include tax. Obtained from <see cref="P:Smartstore.Core.IWorkContext.TaxDisplayType"/> if <c>null</c>.</param>
            <param name="customer">Customer. Obtained from <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/> if <c>null</c>.</param>
            <param name="currency">Optional currency instance for cash rounding.</param>
            <returns>A <see cref="T:Smartstore.Core.Checkout.Tax.Tax"/> structure containing the calculation result.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxCalculator.CalculateShippingTaxAsync(System.Decimal,System.Nullable{System.Boolean},System.Nullable{System.Int32},Smartstore.Core.Identity.Customer,Smartstore.Core.Common.Currency)">
            <summary>
            Calculates shipping charge tax.
            </summary>
            <param name="price">The shipping charge.</param>
            <param name="inclusive">A value indicating whether the calculated price should include tax. Obtained from <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShippingPriceIncludesTax"/> if <c>null</c>.</param>
            <param name="taxCategoryId">Tax category identifier. If <c>null</c>, <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShippingTaxClassId"/> will be used.</param>
            <param name="customer">Customer. Obtained from <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/> if <c>null</c>.</param>
            <param name="currency">Optional currency instance for cash rounding.</param>
            <returns>A <see cref="T:Smartstore.Core.Checkout.Tax.Tax"/> structure containing the calculation result.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxCalculator.CalculatePaymentFeeTaxAsync(System.Decimal,System.Nullable{System.Boolean},System.Nullable{System.Int32},Smartstore.Core.Identity.Customer,Smartstore.Core.Common.Currency)">
            <summary>
            Calculates payment fee tax.
            </summary>
            <param name="price">The payment fee.</param>
            <param name="inclusive">A value indicating whether the calculated price should include tax. Obtained from <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.PaymentMethodAdditionalFeeIncludesTax"/> if <c>null</c>.</param>
            <param name="customer">Customer. Obtained from <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/> if <c>null</c>.</param>
            <param name="taxCategoryId">Tax category identifier. If <c>null</c>, <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.PaymentMethodAdditionalFeeTaxClassId"/> will be used.</param>
            <param name="currency">Optional currency instance for cash rounding.</param>
            <returns>A <see cref="T:Smartstore.Core.Checkout.Tax.Tax"/> structure containing the calculation result.</returns>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.ITaxProvider">
            <summary>
            Provides an interface for creating tax providers
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxProvider.GetTaxRateAsync(Smartstore.Core.Checkout.Tax.TaxRateRequest)">
            <summary>
            Gets tax rate
            </summary>
        </member>
        <member name="T:Smartstore.Core.Checkout.Tax.ITaxService">
            <summary>
            Tax service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxService.LoadActiveTaxProvider">
            <summary>
            Loads active tax provider.
            </summary>
            <returns>
            Active tax provider or <c>null</c> if none was found.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxService.LoadTaxProviderBySystemName(System.String)">
            <summary>
            Loads tax provider by system name.
            </summary>
            <param name="systemName">Tax providers system name.</param>
            <returns>
            Tax provider or <c>null</c> if none was found by system name.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxService.LoadAllTaxProviders">
            <summary>
            Loads all tax providers.
            </summary>
            <returns>
            All tax providers or <c>null</c> if none were found.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxService.FormatTaxRate(System.Decimal)">
            <summary>
            Formats a tax rate.
            </summary>
            <param name="taxRate">Tax rate to format.</param>
            <returns>Formatted tax rate.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxService.GetTaxRateAsync(Smartstore.Core.Catalog.Products.Product,System.Nullable{System.Int32},Smartstore.Core.Identity.Customer)">
            <summary>
            Gets tax rate for given product.
            </summary>
            <param name="product">Product. Can be <c>null</c>.</param>
            <param name="taxCategoryId">Tax category identifier. Obtained from <see cref="P:Smartstore.Core.Catalog.Products.Product.TaxCategoryId"/> if <c>null</c>.</param>
            <param name="customer">Customer. Obtained from <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/> if <c>null</c>.</param>
            <returns>Tax rate.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxService.GetTaxFormat(System.Nullable{System.Boolean},System.Nullable{System.Boolean},Smartstore.Core.Catalog.Pricing.PricingTarget,Smartstore.Core.Localization.Language)">
            <summary>
                Gets a tax formatting pattern that can be applied to
                <see cref="T:Smartstore.Core.Common.Money"/> values by calling <see cref="M:Smartstore.Core.Common.Money.WithPostFormat(System.String)"/>.
            </summary>
            <param name="displayTaxSuffix">
                A value indicating whether to display the tax suffix.
                If <c>null</c>, current setting will be obtained via <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.DisplayTaxSuffix"/> and
                additionally via <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShippingPriceIncludesTax"/> or <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.PaymentMethodAdditionalFeeIncludesTax"/>
                according to <paramref name="target"/>.
            </param>
            <param name="priceIncludesTax">
                A value indicating whether given price includes tax already.
                If <c>null</c>, current setting will be obtained via <see cref="P:Smartstore.Core.IWorkContext.TaxDisplayType"/>.
            </param>
            <param name="target">
                The target object to format price for. This parameter affects how <paramref name="displayTaxSuffix"/>
                will be auto-resolved if it is <c>null</c>.
            </param>
            <param name="language">
                Language for tax suffix. If <c>null</c>, language will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingLanguage"/>.
            </param>
            <returns>Money</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxService.GetVatNumberStatusAsync(System.String)">
            <summary>
            Checks the validity of a VAT number using an online service like VIES service of the EU.
            </summary>
            <param name="fullVatNumber">The full VAT number including the two letter country ISO code (e.g. DE 111 1111 111).</param>
            <returns>Result of the VAT check including current status.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxService.IsTaxExemptAsync(Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Identity.Customer)">
            <summary>
            Checks whether the product is tax exempt for the customer.
            </summary>
            <param name="product">Product for tax exemption.</param>
            <param name="customer">Customer to check.</param>
            <remarks>
            Either product or customer can be <c>null</c>.
            </remarks>
            <returns>
            <c>True</c> if the product is tax exempted, <c>False</c> if otherwise.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.ITaxService.IsVatExemptAsync(Smartstore.Core.Identity.Customer,Smartstore.Core.Common.Address)">
            <summary>
            Checks whether the customer has a EU VAT exemption (the European Union value added tax).
            </summary>
            <param name="customer">Customer for VAT exemption.</param>
            <param name="address">Address to check. Gets tax address of customer if <c>null</c>.</param>
            <returns>
            <c>True</c> if customer is VAT exempted, <c>False</c> if customer is not VAT exempted.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.TaxService.VatNumberRegex">
            <remarks>
            Pattern:<br/>
            <code>^(\\w{2})(.*)</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match a word character exactly 2 times.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a character other than '\n' atomically any number of times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.TaxService.CreateTaxRateCacheKey(Smartstore.Core.Identity.Customer,System.Int32,Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Creates tax rate cache key as tuple of {int, int, int}.
            </summary>
            <param name="customer">Customer. Gets id or 0 if <c>null</c>.</param>
            <param name="taxCategoryId">Tax category identifier.</param>
            <param name="product">Product. Gets id or 0 if <c>null</c>.</param>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.TaxService.CalculateAmount(System.Decimal,System.Decimal,System.Boolean)">
            <summary>
            Calculates a tax based price.
            </summary>
            <param name="price">Original price.</param>
            <param name="percent">Percentage to change.</param>
            <param name="increase"><c>true</c> to increase and <c>false</c> to decrease the price.</param>
            <returns>Calculated price.</returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.TaxService.IsEuConsumer(Smartstore.Core.Identity.Customer)">
            <summary>
            Checks whether the customer is a consumer (NOT a company) within the EU.
            </summary>
            <param name="customer">Customer to check.</param>
            <remarks>
            A customer is assumed to be an EU consumer if the default tax address does not contain a company name, 
            OR the IP address is within the EU, 
            OR a business name has been provided but the EU VAT number is invalid.
            </remarks>
            <returns>
            <c>True</c> if the customer is a consumer within the EU, <c>False</c> if otherwise.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Checkout.Tax.TaxService.GetTaxAddressAsync(Smartstore.Core.Identity.Customer,Smartstore.Core.Catalog.Products.Product)">
            <summary>
            Gets tax address of customer.
            </summary>
            <param name="customer">Customer of tax address.</param>
            <param name="product">The related product is used for caching and ESD check. Can be <c>null</c>.</param>
            <remarks>
            Tries to get customer address from cached addresses before accessing database.
            </remarks>
            <returns>
            Customer's tax address.
            </returns>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.ValidateEmailAddress">
            <summary>
            Gets or sets a value indicating whether email address should be validated
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.SalutationEnabled">
            <summary>
            Gets or sets a value indicating whether 'Salutation' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.Salutations">
            <summary>
            Gets or sets values with available salutations
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.TitleEnabled">
            <summary>
            Gets or sets a value indicating whether 'Title' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.CompanyEnabled">
            <summary>
            Gets or sets a value indicating whether 'Company' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.CompanyRequired">
            <summary>
            Gets or sets a value indicating whether 'Company' is required
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.StreetAddressEnabled">
            <summary>
            Gets or sets a value indicating whether 'Street address' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.StreetAddressRequired">
            <summary>
            Gets or sets a value indicating whether 'Street address' is required
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.StreetAddress2Enabled">
            <summary>
            Gets or sets a value indicating whether 'Street address 2' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.StreetAddress2Required">
            <summary>
            Gets or sets a value indicating whether 'Street address 2' is required
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.ZipPostalCodeEnabled">
            <summary>
            Gets or sets a value indicating whether 'Zip / postal code' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.ZipPostalCodeRequired">
            <summary>
            Gets or sets a value indicating whether 'Zip / postal code' is required
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.CityEnabled">
            <summary>
            Gets or sets a value indicating whether 'City' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.CityRequired">
            <summary>
            Gets or sets a value indicating whether 'City' is required
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.CountryEnabled">
            <summary>
            Gets or sets a value indicating whether 'Country' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.CountryRequired">
            <summary>
            Gets or sets a value indicating whether 'Country' is required
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.StateProvinceEnabled">
            <summary>
            Gets or sets a value indicating whether 'State / province' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.StateProvinceRequired">
            <summary>
            Gets or sets a value indicating whether 'State / province' is required
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.PhoneEnabled">
            <summary>
            Gets or sets a value indicating whether 'Phone number' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.PhoneRequired">
            <summary>
            Gets or sets a value indicating whether 'Phone number' is required
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.FaxEnabled">
            <summary>
            Gets or sets a value indicating whether 'Fax number' is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.AddressSettings.FaxRequired">
            <summary>
            Gets or sets a value indicating whether 'Fax number' is required
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.BankConnectionSettings.Bankname">
            <summary>
            Gets or sets the bank name that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.BankConnectionSettings.Bankcode">
            <summary>
            Gets or sets the bank code that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.BankConnectionSettings.AccountNumber">
            <summary>
            Gets or sets the account number that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.BankConnectionSettings.AccountHolder">
            <summary>
            Gets or sets the account holder that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.BankConnectionSettings.Iban">
            <summary>
            Gets or sets the iban that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.BankConnectionSettings.Bic">
            <summary>
            Gets or sets the bic that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CommonSettings.DisplayJavaScriptDisabledWarning">
            <summary>
            Gets or sets a value indicating whether to display a warning if java-script is disabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CommonSettings.EntityPickerPageSize">
            <summary>
            Gets or sets the page size for the entity picker
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CommonSettings.MaxScheduleHistoryAgeInDays">
            <summary>
            Gets or sets the maximum age of schedule history entries (in days).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CommonSettings.MaxLogAgeInDays">
            <summary>
            Gets or sets the maximum age of log entries (in days).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CommonSettings.MaxNumberOfScheduleHistoryEntries">
            <summary>
            Gets or sets the maximum number of schedule history entries per task.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CommonSettings.MaxQueuedMessagesAgeInDays">
            <summary>
            Gets or sets the maximum age of sent queued messages (in days).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CommonSettings.MaxGuestsRegistrationAgeInMinutes">
            <summary>
            Gets or sets the maximum registration age (in minutes) for automatic deletion of guests customers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.CompanyName">
            <summary>
            Gets or sets the company name that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.Salutation">
            <summary>
            Gets or sets the salutation that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.Title">
            <summary>
            Gets or sets the title that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.Firstname">
            <summary>
            Gets or sets the firstname that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.Lastname">
            <summary>
            Gets or sets the lastname that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.CompanyManagementDescription">
            <summary>
            Gets or sets the company management description that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.CompanyManagement">
            <summary>
            Gets or sets the company management that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.Street">
            <summary>
            Gets or sets the street that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.Street2">
            <summary>
            Gets or sets the housenumber that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.ZipCode">
            <summary>
            Gets or sets the zip code that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.City">
            <summary>
            Gets or sets the location that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.CountryId">
            <summary>
            Gets or sets the country that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.Region">
            <summary>
            Gets or sets the state that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.StateName">
            <summary>
            Gets or sets the state that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.VatId">
            <summary>
            Gets or sets the vat id that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.CommercialRegister">
            <summary>
            Gets or sets the commercial register that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CompanyInformationSettings.TaxNumber">
            <summary>
            Gets or sets the tax number that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.ContactDataSettings.CompanyTelephoneNumber">
            <summary>
            Gets or sets the company telephone number that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.ContactDataSettings.HotlineTelephoneNumber">
            <summary>
            Gets or sets the hotline telephone number that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.ContactDataSettings.MobileTelephoneNumber">
            <summary>
            Gets or sets the mobile telephone number that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.ContactDataSettings.CompanyFaxNumber">
            <summary>
            Gets or sets the company fax number that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.ContactDataSettings.CompanyEmailAddress">
            <summary>
            Gets or sets the company email address that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.ContactDataSettings.WebmasterEmailAddress">
            <summary>
            Gets or sets the webmaster email address that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.ContactDataSettings.SupportEmailAddress">
            <summary>
            Gets or sets the webmaster email address that will be used.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.ContactDataSettings.ContactEmailAddress">
            <summary>
            Gets or sets the contact email address that will be used.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.Configuration.CurrencySettings">
            <summary>
            Global currency settings
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CurrencySettings.PrimaryCurrencyId">
            <summary>
            Primary currency identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CurrencySettings.PrimaryExchangeCurrencyId">
            <summary>
             Primary exchange rate currency identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CurrencySettings.AutoUpdateEnabled">
            <summary>
            Gets or sets a value indicating whether to automatically update currency rates.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CurrencySettings.ActiveExchangeRateProviderSystemName">
            <summary>
            Active exchange rate provider system name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CurrencySettings.RoundOrderItemsEnabled">
            <summary>
            Gets or sets a value indicating whether rounding during shopping cart calculation is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CurrencySettings.RoundNetPrices">
            <summary>
            Gets or sets a value indicating whether to round during shopping cart calculation when net prices are displayed for the customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.CurrencySettings.RoundUnitPrices">
            <summary>
            Gets or sets a value indicating whether to round the unit price before or after quantity multiplication.
            <c>true</c> to round before and <c>false</c> to round after quantity multiplication.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.DateTimeSettings.DefaultStoreTimeZoneId">
            <summary>
            Gets or sets a default store time zone identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.DateTimeSettings.AllowCustomersToSetTimeZone">
            <summary>
            Gets or sets a value indicating whether customers are allowed to select their time zone.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.HomePageSettings.MetaTitle">
            <summary>
            Gets or sets the homepage meta title.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.HomePageSettings.MetaDescription">
            <summary>
            Gets or sets the homepage meta description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.HomePageSettings.MetaKeywords">
            <summary>
            Gets or sets the homepage meta keywords.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PdfSettings.Enabled">
            <summary>
            Gets or sets a value indicating PDF is supported.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PdfSettings.LogoPictureId">
            <summary>
            PDF logo picture identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PdfSettings.LetterPageSizeEnabled">
            <summary>
            Gets or sets whether letter page size is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PdfSettings.RenderOrderNotes">
            <summary>
            Gets or sets a value indicating whether to render order notes in PDf reports.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PdfSettings.AttachOrderPdfToOrderPlacedEmail">
            <summary>
            Gets or sets a value indicating whether to attach the order PDF to 'Order Placed (customer)' email.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PdfSettings.AttachOrderPdfToOrderCompletedEmail">
            <summary>
            Gets or sets a value indicating whether to attach the order PDF to 'Order Completed (customer)' email.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PdfSettings.MaxItemsToPrint">
            <summary>
            Gets or sets the maximum number of items to print.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PerformanceSettings.CacheSegmentSize">
            <summary>
            The number of entries in a single cache segment
            when greedy loading is disabled. The larger the catalog,
            the smaller this value should be. We recommend segment
            size 500 for catalogs smaller than 100.000 items.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PerformanceSettings.AlwaysPrefetchTranslations">
            <summary>
            By default only instant search prefetches translations.
            All other product listings work against the segmented cache.
            In very large multilingual catalogs (> 500.000) setting this to true
            can result in higher request performance as well as less
            resource usage.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PerformanceSettings.AlwaysPrefetchUrlSlugs">
            <summary>
            By default only instant search prefetches url slugs.
            All other product listings work against the segmented cache.
            In very large catalogs (> 500.000) setting this to true
            can result in higher request performance as well as less
            resource usage.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PerformanceSettings.MaxUnavailableAttributeCombinations">
            <summary>
            Maximum number of attribute combinations to be loaded and parsed
            to make them unavailable for selection on the product detail page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PerformanceSettings.UseResponseCompression">
            <summary>
            Enables response compression for text-based static and dynamic responses
            (html, css, js, svg etc.). Turn this off if the webserver handles response
            compression already. Changing the value requires an application restart to take effect.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.PerformanceSettings.MediaDupeDetectorMaxCacheSize">
            <summary>
            Maximum number of MediaFile entities to cache for detecting duplicate files.
            If a media folder contains more files, no caching is done for scalability reasons
            and the <see cref="T:Smartstore.Core.Content.Media.MediaFile"/> entities are loaded directly from the database.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.FacebookAppId">
            <summary>
            Gets or sets facebook app id.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.TwitterSite">
            <summary>
            Gets or sets twitter account site name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.ShowSocialLinksInFooter">
            <summary>
            Gets or sets the value that determines whether social links should be show in the footer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.FacebookLink">
            <summary>
            Gets or sets the Facebook link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.TwitterLink">
            <summary>
            Gets or sets the Twitter link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.PinterestLink">
            <summary>
            Gets or sets the Pinterest link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.YoutubeLink">
            <summary>
            Gets or sets the Youtube link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.InstagramLink">
            <summary>
            Gets or sets the Instagram link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.FlickrLink">
            <summary>
            Gets or sets the Flickr link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.LinkedInLink">
            <summary>
            Gets or sets the LinkedIn link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.XingLink">
            <summary>
            Gets or sets the Xing link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.TikTokLink">
            <summary>
            Gets or sets the TikTok link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.SnapchatLink">
            <summary>
            Gets or sets the Snapchat link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.VimeoLink">
            <summary>
            Gets or sets the Vimeo link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.TumblrLink">
            <summary>
            Gets or sets the Tumblr link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.ElloLink">
            <summary>
            Gets or sets the Ello link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.SocialSettings.BehanceLink">
            <summary>
            Gets or sets the Behance link.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.StoreInformationSettings.StoreClosed">
            <summary>
            Gets or sets a value indicating whether store is closed
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Configuration.StoreInformationSettings.StoreClosedAllowForAdmins">
            <summary>
            Gets or sets a value indicating whether administrators can visit a closed store
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.Salutation">
            <summary>
            Gets or sets the first name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.Title">
            <summary>
            Gets or sets the first name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.FirstName">
            <summary>
            Gets or sets the first name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.LastName">
            <summary>
            Gets or sets the last name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.Email">
            <summary>
            Gets or sets the email
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.Company">
            <summary>
            Gets or sets the company
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.CountryId">
            <summary>
            Gets or sets the country identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.StateProvinceId">
            <summary>
            Gets or sets the state/province identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.City">
            <summary>
            Gets or sets the city
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.Address1">
            <summary>
            Gets or sets the address 1
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.Address2">
            <summary>
            Gets or sets the address 2
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.ZipPostalCode">
            <summary>
            Gets or sets the zip/postal code
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.PhoneNumber">
            <summary>
            Gets or sets the phone number
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.FaxNumber">
            <summary>
            Gets or sets the fax number
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of instance creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.Country">
            <summary>
            Gets or sets the country
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.StateProvince">
            <summary>
            Gets or sets the state/province
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Address.Customers">
            <remarks>
            Unused but required to avoid ArgumentExeption 'inverseName cannot be empty' in <see cref="M:Smartstore.Core.Identity.CustomerMap.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Smartstore.Core.Identity.Customer})"/>.
            See https://github.com/dotnet/efcore/issues/3864#issuecomment-749981539
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Common.Country">
            <summary>
            Represents a country
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.AllowsBilling">
            <summary>
            Gets or sets a value indicating whether billing is allowed to this country
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.AllowsShipping">
            <summary>
            Gets or sets a value indicating whether shipping is allowed to this country
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.TwoLetterIsoCode">
            <summary>
            Gets or sets the two letter ISO 3166 code.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.ThreeLetterIsoCode">
            <summary>
            Gets or sets the three letter ISO 3166 code.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.NumericIsoCode">
            <summary>
            Gets or sets the numeric ISO 3166 code.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.SubjectToVat">
            <summary>
            Gets or sets a value indicating whether customers in this country must be charged EU VAT
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.Published">
            <summary>
            Gets or sets a value indicating whether the entity is published
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.DisplayCookieManager">
            <summary>
            Gets or sets a value indicating whether the cookie manager should be displayed for visitors of this country.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.LimitedToStores">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.AddressFormat">
            <summary>
            Gets or sets the international mailing address format
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.DiallingCode">
            <summary>
            Gets or sets the international dailling code
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.DefaultCurrencyId">
            <summary>
            Gets or sets the identfier of the default currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.DefaultCurrency">
            <summary>
            Gets or sets the default currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Country.StateProvinces">
            <summary>
            Gets or sets the state/provinces
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.Currency">
            <summary>
            Represents a currency
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.CurrencyCode">
            <summary>
            Gets or sets the ISO currency code
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.Rate">
            <summary>
            Gets or sets the rate
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.DisplayLocale">
            <summary>
            Gets or sets the display locale
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.CustomFormatting">
            <summary>
            Gets or sets the custom formatting
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.LimitedToStores">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.Published">
            <summary>
            Gets or sets a value indicating whether the entity is published
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of instance creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.UpdatedOnUtc">
            <summary>
            Gets or sets the date and time of instance update
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.DomainEndings">
            <summary>
            Gets or sets the (comma separated) list of domain endings (e.g. country code top-level domains) to which this currency is the default one
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.RoundNumDecimals">
            <summary>
            Gets or sets the number of decimal places to round to
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.MidpointRounding">
            <summary>
            Gets or sets the rounding strategy of the midpoint between two currency values.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.RoundOrderItemsEnabled">
            <summary>
            Gets or sets a value indicating whether rounding during shopping cart calculation is enabled.
            Will be obtained from <see cref="P:Smartstore.Core.Common.Configuration.CurrencySettings.RoundOrderItemsEnabled"/> if <c>null</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.RoundNetPrices">
            <summary>
            Gets or sets a value indicating whether to round during shopping cart calculation when net prices are displayed for the customer.
            Will be obtained from <see cref="P:Smartstore.Core.Common.Configuration.CurrencySettings.RoundNetPrices"/> if <c>null</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.RoundUnitPrices">
            <summary>
            Gets or sets a value indicating whether to round the unit price before or after quantity multiplication.
            Will be obtained from <see cref="P:Smartstore.Core.Common.Configuration.CurrencySettings.RoundUnitPrices"/> if <c>null</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.RoundOrderTotalEnabled">
            <summary>
            Gets or sets a value indicating whether to round the order total
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.RoundOrderTotalDenominator">
            <summary>
            Gets or sets the smallest denomination. The order total is rounded to the nearest multiple of it.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Currency.RoundOrderTotalRule">
            <summary>
            Gets or sets the order total rounding rule.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.CurrencyMidpointRounding">
            <summary>
            Represents the rounding strategy of the halfway between two currency amounts.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Common.CurrencyMidpointRounding.AwayFromZero">
            <summary>
            Round the midpoint between two amounts to the nearest number that is away from zero.
            Thus down if the first dropped decimal place is 0, 1, 2, 3 or 4, otherwise round up.
            Also called "commercial rounding" or "kaufmännisches Runden".
            </summary>
            <example>
            1.2250 is rounded up to 1.23.
            1.2240 is rounded down to 1.22.
            </example>
        </member>
        <member name="F:Smartstore.Core.Common.CurrencyMidpointRounding.ToEven">
            <summary>
            Round the midpoint between two amounts to the nearest even number.
            Also called "banker's rounding" or "mathematisches Runden".
            </summary>
            <example>
            1.2250 is rounded down to 1.22.
            1.2350 is rounded up to 1.24.
            </example>
        </member>
        <member name="T:Smartstore.Core.Common.CurrencyRoundingRule">
            <summary>
            Represents a rule for rounding the order total to the nearest multiple of denomination (cash rounding).
            </summary>
        </member>
        <member name="F:Smartstore.Core.Common.CurrencyRoundingRule.RoundMidpointDown">
            <summary>
            E.g. denomination 0.05: 9.225 will round to 9.20
            </summary>
        </member>
        <member name="F:Smartstore.Core.Common.CurrencyRoundingRule.RoundMidpointUp">
            <summary>
            E.g. denomination 0.05: 9.225 will round to 9.25
            </summary>
        </member>
        <member name="F:Smartstore.Core.Common.CurrencyRoundingRule.AlwaysRoundDown">
            <summary>
            E.g. denomination 0.05: 9.24 will round to 9.20
            </summary>
        </member>
        <member name="F:Smartstore.Core.Common.CurrencyRoundingRule.AlwaysRoundUp">
            <summary>
            E.g. denomination 0.05: 9.26 will round to 9.30
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.DeliveryTime">
            <summary>
            Represents a delivery time
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.DeliveryTime.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.DeliveryTime.ColorHexValue">
            <summary>
            Gets or sets the hex value
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.DeliveryTime.DisplayLocale">
            <summary>
            Gets or sets the display locale
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.DeliveryTime.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.DeliveryTime.IsDefault">
            <summary>
            Gets or sets a value indicating whether this is the system global default delivery time.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.DeliveryTime.MinDays">
            <summary>
            Specifies the earliest time of delivery in days.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.DeliveryTime.MaxDays">
            <summary>
            Specifies the latest time of delivery in days.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.DeliveryTimesPresentation">
            <summary>
            Represents how to present delivery times.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Common.DeliveryTimesPresentation.None">
            <summary>
            Do not display.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Common.DeliveryTimesPresentation.LabelOnly">
            <summary>
            Display label only.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Common.DeliveryTimesPresentation.DateOnly">
            <summary>
            Display date only (if possible).
            </summary>
        </member>
        <member name="F:Smartstore.Core.Common.DeliveryTimesPresentation.LabelAndDate">
            <summary>
            Display label and date.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.ExchangeRate">
            <summary>
            Represents an exchange rate
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.ExchangeRate.Name">
            <summary>
            Name of the currrency
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.ExchangeRate.CurrencyCode">
            <summary>
            The three letter ISO code for the Exchange Rate, e.g. USD
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.ExchangeRate.IsStoreCurrency">
            <summary>
            Indicates whether the currency is available in the store
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.ExchangeRate.Rate">
            <summary>
            The conversion rate of this currency from the base currency
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.ExchangeRate.UpdatedOn">
            <summary>
            When was this exchange rate updated from the data source (the internet data xml feed)
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.GenericAttribute">
            <summary>
            Represents a generic attribute
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.GenericAttribute.EntityId">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.GenericAttribute.KeyGroup">
            <summary>
            Gets or sets the key group
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.GenericAttribute.Key">
            <summary>
            Gets or sets the key
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.GenericAttribute.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.GenericAttribute.StoreId">
            <summary>
            Gets or sets the store identifier
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.GenericAttributeCollection`1">
            <summary>
            Generic attribute collection base implementation for covariance or <typeparamref name="TEntity"/> specific extension methods.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.GenericAttributeCollection.#ctor(System.String)">
            <summary>
            For transient entities and to avoid that MVC model binder crashes.
            </summary>
            <param name="entityName"></param>
        </member>
        <member name="P:Smartstore.Core.Common.GenericAttributeCollection.UnderlyingEntities">
            <summary>
            Gets all entities that were loaded from the database
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.GenericAttributeCollection.Reload">
            <summary>
            Reloads all entities from database
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.GenericAttributeCollection.ReloadAsync">
            <summary>
            Reloads all entities from database
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.GenericAttributeCollection.DeleteAll">
            <summary>
            Marks all underlying entities as deleted. This method is non-saving.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.GenericAttributeCollection.SaveChanges">
            <summary>
            Saves all entity changes to the database.
            </summary>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.GenericAttributeCollection.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all entity changes to the database.
            </summary>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.GenericAttributeCollection.Get``1(System.String,System.Int32)">
            <summary>
            Gets a generic attribute value
            </summary>
            <typeparam name="TProp">The type to convert raw <see cref="P:Smartstore.Core.Common.GenericAttribute.Value"/> to.</typeparam>
            <param name="key">Key</param>
            <param name="storeId">Store identifier; pass 0 to get a store-neutral attribute value.</param>
            <returns>Converted generic attribute value</returns>
        </member>
        <member name="M:Smartstore.Core.Common.GenericAttributeCollection.TryGetEntity(System.String,System.Int32,Smartstore.Core.Common.GenericAttribute@)">
            <summary>
            Tries to get a generic attribute entity.
            </summary>
            <param name="key">Key</param>
            <param name="storeId">Store identifier; pass 0 to get a store-neutral entity.</param>
            <param name="entity">The underlying entity instance.</param>
            <returns><c>true</c> if an entity with given key is present, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Smartstore.Core.Common.MeasureDimension">
            <summary>
            Represents a measure dimension
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.MeasureDimension.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.MeasureDimension.SystemKeyword">
            <summary>
            Gets or sets the system keyword
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.MeasureDimension.Ratio">
            <summary>
            Gets or sets the ratio
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.MeasureDimension.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.MeasureWeight">
            <summary>
            Represents a measure weight
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.MeasureWeight.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.MeasureWeight.SystemKeyword">
            <summary>
            Gets or sets the system keyword
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.MeasureWeight.Ratio">
            <summary>
            Gets or sets the ratio
            </summary>        
        </member>
        <member name="P:Smartstore.Core.Common.MeasureWeight.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Money.DecimalDigits">
            <summary>
            Gets the number of decimal digits for the associated currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Money.Amount">
            <summary>
            The internal unrounded raw amount
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Money.RoundedAmount">
            <summary>
            Rounds the amount using <see cref="P:Smartstore.Core.Common.Currency.RoundNumDecimals"/> and <see cref="P:Smartstore.Core.Common.Currency.MidpointRounding"/>.
            </summary>
            <remarks>
            <see cref="P:Smartstore.Core.Common.Money.RoundedAmount"/> is for display only. If an amount is to be rounded according to all currency settings and properties,
            the amount rounded by IRoundingHelper must be passed to <see cref="T:Smartstore.Core.Common.Money"/>! In this case <see cref="P:Smartstore.Core.Common.Money.Amount"/> and <see cref="P:Smartstore.Core.Common.Money.RoundedAmount"/> are identical.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Common.Money.TruncatedAmount">
            <summary>
            Truncates the amount to the number of significant decimal digits
            of the associated currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Money.PostFormat">
            <summary>
            The format string to apply AFTER amount has been formatted (amount + currency symbol), 
            e.g. "{0} incl. tax" (where {0} is replaced by currency formatted amount).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Money.WithAmount(System.Single,Smartstore.Core.Common.Currency)">
            <summary>
            Changes the underlying amount.
            </summary>
            <param name="amount">The new amount.</param>
            <param name="currency">New optional currency.</param>
        </member>
        <member name="M:Smartstore.Core.Common.Money.WithAmount(System.Double,Smartstore.Core.Common.Currency)">
            <summary>
            Changes the underlying amount.
            </summary>
            <param name="amount">The new amount.</param>
            <param name="currency">New optional currency.</param>
        </member>
        <member name="M:Smartstore.Core.Common.Money.WithAmount(System.Decimal,Smartstore.Core.Common.Currency)">
            <summary>
            Changes the underlying amount.
            </summary>
            <param name="amount">The new amount.</param>
            <param name="currency">New optional currency.</param>
        </member>
        <member name="M:Smartstore.Core.Common.Money.WithCurrency(Smartstore.Core.Common.Currency)">
            <summary>
            Changes the underlying currency.
            </summary>
            <param name="currency">The currency to switch to.</param>
        </member>
        <member name="M:Smartstore.Core.Common.Money.WithPostFormat(System.String)">
            <summary>
            Applies a second format string AFTER amount has been formatted (amount + currency symbol), 
            e.g. "{0} incl. tax" (where {0} is replaced by currency formatted amount).
            </summary>
            <param name="format">The post format string.</param>
        </member>
        <member name="M:Smartstore.Core.Common.Money.WithSymbol(System.Boolean)">
            <summary>
            Sets a value specifying whether the currency symbol should be displayed during formatting.
            </summary>
            <param name="showSymbol"><c>true</c> = render symbol, <c>false</c> = hide symbol.</param>
        </member>
        <member name="M:Smartstore.Core.Common.Money.ToString">
            <summary>
            Creates the string representation of the rounded amount.
            </summary>
            <returns>The formatted rounded amount.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Money.ToString(System.Nullable{System.Boolean},System.Boolean,System.String)">
            <summary>
            Creates the string representation of the rounded amount.
            </summary>
            <param name="showCurrency">Whether to render currency symbol. If <c>null</c>, falls back to negated <see cref="P:Smartstore.Core.Common.Money.HideCurrency"/>.</param>
            <param name="useISOCodeAsSymbol">Whether to render currency symbol as ISO code. Only relevant if currency symbol should be rendered.</param>
            <param name="postFormat">Applies a second format string AFTER amount has been formatted (amount + currency symbol), e.g. "{0} incl. tax" (where {0} is replaced by currency formatted amount).</param>
            <returns>The formatted rounded amount.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Money.Exchange(System.Decimal)">
            <summary>
            Exchanges <see cref="P:Smartstore.Core.Common.Money.Amount"/> by multiplying with given <paramref name="exchangeRate"/>.
            </summary>
            <param name="exchangeRate">Exchange rate.</param>
        </member>
        <member name="M:Smartstore.Core.Common.Money.ExchangeTo(Smartstore.Core.Common.Currency)">
            <summary>
            Exchanges <see cref="P:Smartstore.Core.Common.Money.Amount"/> to <paramref name="toCurrency"/> using <paramref name="toCurrency"/> as primary exchange currency.
            </summary>
            <param name="toCurrency">The target currency</param>
        </member>
        <member name="M:Smartstore.Core.Common.Money.ExchangeTo(Smartstore.Core.Common.Currency,Smartstore.Core.Common.Currency)">
            <summary>
            Exchanges <see cref="P:Smartstore.Core.Common.Money.Amount"/> to <paramref name="toCurrency"/> using <paramref name="exchangeCurrency"/> as primary exchange currency.
            </summary>
            <param name="toCurrency">The target currency</param>
            <param name="exchangeCurrency">Primary exchange currency.</param>
        </member>
        <member name="M:Smartstore.Core.Common.Money.Allocate(System.Int32)">
            <summary>
            Evenly distributes the amount over n parts, resolving remainders that occur due to rounding 
            errors, thereby garuanteeing the postcondition: result->sum(r|r.amount) = this.amount and
            x elements in result are greater than at least one of the other elements, where x = amount mod n.
            </summary>
            <param name="n">Number of parts over which the amount is to be distibuted.</param>
            <returns>Array with distributed Money amounts.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Money.GetRatio(Smartstore.Core.Common.Money,Smartstore.Core.Common.Money)">
            <summary>
            Gets the ratio of one money to another.
            </summary>
            <param name="numerator">The numerator of the operation.</param>
            <param name="denominator">The denominator of the operation.</param>
            <returns>A decimal from 0.0 to 1.0 of the ratio between the two money values.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Money.Min(Smartstore.Core.Common.Money,Smartstore.Core.Common.Money)">
            <summary>
            Gets the smallest money, given the two values.
            </summary>
            <param name="a">The first money to compare.</param>
            <param name="b">The second money to compare.</param>
            <returns>The smallest money value of the arguments.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Money.Max(Smartstore.Core.Common.Money,Smartstore.Core.Common.Money)">
            <summary>
            Gets the largest money, given the two values.
            </summary>
            <param name="a">The first money to compare.</param>
            <param name="b">The second money to compare.</param>
            <returns>The largest money value of the arguments.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Money.Abs(Smartstore.Core.Common.Money)">
            <summary>
            Gets the absolute value of the <see cref="T:Smartstore.Core.Common.Money"/>.
            </summary>
            <param name="value">The value of money to convert.</param>
            <returns>The money value as an absolute value.</returns>
        </member>
        <member name="T:Smartstore.Core.Common.QuantityUnit">
            <summary>
            Represents a quantity unit
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.QuantityUnit.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.QuantityUnit.NamePlural">
            <summary>
            Gets or sets the name plural.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.QuantityUnit.Description">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.QuantityUnit.DisplayLocale">
            <summary>
            Gets or sets the display locale
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.QuantityUnit.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.QuantityUnit.IsDefault">
            <summary>
            Gets or sets a value indicating whether this is the system global default quantity unit.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.StateProvince">
            <summary>
            Represents a state/province
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.StateProvince.CountryId">
            <summary>
            Gets or sets the country identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.StateProvince.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.StateProvince.Abbreviation">
            <summary>
            Gets or sets the abbreviation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.StateProvince.Published">
            <summary>
            Gets or sets a value indicating whether the entity is published
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.StateProvince.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.StateProvince.Country">
            <summary>
            Gets or sets the country
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.PermanentDeletionRequestedEvent`1">
            <summary>
            An event that is published immediately before the final deletion of ISoftDeletable entities.
            The event is usually part of deleting recycle bin items.
            </summary>
            <typeparam name="TEntity">The entity type to be deleted.</typeparam>
        </member>
        <member name="P:Smartstore.Core.Common.PermanentDeletionRequestedEvent`1.EntityType">
            <summary>
            Gets the type of the entities to be deleted.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.PermanentDeletionRequestedEvent`1.EntityIds">
            <summary>
            Gets the identifiers of the entities to be deleted.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.PermanentDeletionRequestedEvent`1.Errors">
            <summary>
            Adds errors, e.g. reasons why entities cannot be deleted.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.PermanentDeletionRequestedEvent`1.DisallowedEntityIds">
            <summary>
            Identifiers of entities that must not be deleted.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.PermanentDeletionRequestedEvent`1.AddEntitiesDeletedCallback(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Adds a callback that is called after the entities specified by <see cref="P:Smartstore.Core.Common.PermanentDeletionRequestedEvent`1.EntityIds"/> were deleted physically.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.Hooks.AssignedEntitiesHook">
            <summary>
            Deletes assigned entities of entities that were deleted by referential integrity.
            Without explicit deletion these assigned entities would remain in the database forever.
            Typically used for satellite entities like LocalizedProperty or MediaTrack that have no foreign key relationships.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Hooks.AssignedEntitiesHook.#ctor(Smartstore.Core.Data.SmartDbContext)">
            <summary>
            Deletes assigned entities of entities that were deleted by referential integrity.
            Without explicit deletion these assigned entities would remain in the database forever.
            Typically used for satellite entities like LocalizedProperty or MediaTrack that have no foreign key relationships.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Hooks.AssignedEntitiesHook.AssignedItem.AssignedEntities">
            <summary>
            The assigned entities to delete.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Hooks.AssignedEntitiesHook.AssignedItem.EntityName">
            <summary>
            The name of the assigned entities.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Hooks.AssignedEntitiesHook.AssignedItem.EntityIds">
            <summary>
            IDs of entities to delete.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Hooks.QuantityUnitHook.OnInsertingAsync(Smartstore.Core.Common.QuantityUnit,Smartstore.Data.Hooks.IHookedEntity,System.Threading.CancellationToken)">
            <summary>
            Sets all quantity units to <see cref="P:Smartstore.Core.Common.QuantityUnit.IsDefault"/> = false if the currently updated entity is the default quantity unit.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Hooks.QuantityUnitHook.OnUpdatingAsync(Smartstore.Core.Common.QuantityUnit,Smartstore.Data.Hooks.IHookedEntity,System.Threading.CancellationToken)">
            <summary>
            Sets all quantity units to <see cref="P:Smartstore.Core.Common.QuantityUnit.IsDefault"/> = false if the currently updated entity is the default quantity unit.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Hooks.QuantityUnitHook.OnDeletingAsync(Smartstore.Core.Common.QuantityUnit,Smartstore.Data.Hooks.IHookedEntity,System.Threading.CancellationToken)">
            <summary>
            Prevents saving of quantity unit if it's referenced by products or attribute combinations.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.DeliveryTimeService.OnInsertingAsync(Smartstore.Core.Common.DeliveryTime,Smartstore.Data.Hooks.IHookedEntity,System.Threading.CancellationToken)">
            <summary>
            Sets all delivery times to <see cref="P:Smartstore.Core.Common.DeliveryTime.IsDefault"/> = false if the currently updated entity is the default delivery time.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.DeliveryTimeService.OnUpdatingAsync(Smartstore.Core.Common.DeliveryTime,Smartstore.Data.Hooks.IHookedEntity,System.Threading.CancellationToken)">
            <summary>
            Sets all delivery times to <see cref="P:Smartstore.Core.Common.DeliveryTime.IsDefault"/> = false if the currently updated entity is the default delivery time.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.DeliveryTimeService.OnDeletingAsync(Smartstore.Core.Common.DeliveryTime,Smartstore.Data.Hooks.IHookedEntity,System.Threading.CancellationToken)">
            <summary>
            Prevents saving of delivery time if it's referenced in products or attribute combinations 
            and removes associations to deleted products and attribute combinations.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.DeliveryTimeService.AddDays(System.DateTime,System.Int32)">
            <see href="https://stackoverflow.com/questions/1044688/addbusinessdays-and-getbusinessdays"/>
            <seealso href="https://en.wikipedia.org/wiki/Workweek_and_weekend"/>
        </member>
        <member name="T:Smartstore.Core.Common.Services.EcbExchangeRateProvider">
            <summary>
            Gets live currency exchange rates from ECB web service.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IAddressService.IsAddressValidAsync(Smartstore.Core.Common.Address)">
            <summary>
            Gets a value indicating whether address is valid (can be saved).
            </summary>
            <param name="address">Address to validate.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IAddressService.FormatAddressAsync(Smartstore.Core.Common.Configuration.CompanyInformationSettings,System.Boolean)">
            <summary>
            Formats the address according to the countries address formatting template.
            </summary>
            <param name="settings">Address to format.</param>
            <param name="newLineToBr">Whether new lines should be replaced with html BR tags.</param>
            <returns>The formatted address.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IAddressService.FormatAddressAsync(Smartstore.Core.Common.Address,System.Boolean)">
            <summary>
            Formats the address according to the countries address formatting template.
            </summary>
            <param name="address">Address to format.</param>
            <param name="newLineToBr">Whether new lines should be replaced with html BR tags.</param>
            <returns>The formatted address.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IAddressService.FormatAddressAsync(System.Object,System.String,System.IFormatProvider)">
            <summary>
            Formats the address according to the countries address formatting template.
            </summary>
            <param name="address">Address to format. Usually passed by the template engine as a dictionary.</param>
            <param name="template">The (liquid) formatting template. If <c>null</c>, the system global template will be used.</param>
            <returns>The formatted address.</returns>
        </member>
        <member name="T:Smartstore.Core.Common.Services.ICurrencyService">
            <summary>
            Currency service interface.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryCurrency">
            <summary>
            Gets the primary currency (in which all money amounts are entered in backend).
            </summary>
            <remarks>The setter is for testing purposes only.</remarks>
        </member>
        <member name="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryExchangeCurrency">
            <summary>
            Gets the primary exchange currency which is used to calculate money conversions.
            </summary>
            <remarks>The setter is for testing purposes only.</remarks>
        </member>
        <member name="M:Smartstore.Core.Common.Services.ICurrencyService.ConvertToWorkingCurrency(Smartstore.Core.Common.Money)">
            <summary>
            Exchanges given <see cref="T:Smartstore.Core.Common.Money"/> amount to <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>,
            using <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryExchangeCurrency"/> as exchange rate currency.
            </summary>
            <param name="amount">The source amount to exchange</param>
            <returns>The exchanged amount.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.ICurrencyService.ConvertToWorkingCurrency(System.Decimal)">
            <summary>
            Exchanges given money amount (which is assumed to be in <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryCurrency"/>) to <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>,
            using <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryExchangeCurrency"/> as exchange rate currency.
            </summary>
            <param name="amount">The source amount to exchange (should be in <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryCurrency"/>).</param>
            <returns>The exchanged amount.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.ICurrencyService.GetCurrencyLiveRatesAsync(System.Boolean)">
            <summary>
            Gets live exchange rates for the <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryExchangeCurrency"/>.
            </summary>
            <param name="force">
            <c>true</c> to get the live rates from <see cref="T:Smartstore.Core.Common.Services.IExchangeRateProvider"/>.
            <c>false</c> to load the currency rates from cache.</param> Cache duration is 24 hours. 
            <returns>Currency exchange rates.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.ICurrencyService.LoadActiveExchangeRateProvider">
            <summary>
            Load active exchange rate provider
            </summary>
            <returns>Active exchange rate provider</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.ICurrencyService.LoadExchangeRateProviderBySystemName(System.String)">
            <summary>
            Load exchange rate provider by system name
            </summary>
            <param name="systemName">System name</param>
            <returns>Found exchange rate provider</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.ICurrencyService.LoadAllExchangeRateProviders">
            <summary>
            Load all exchange rate providers
            </summary>
            <returns>Exchange rate providers</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.ICurrencyService.CreateMoney(System.Decimal,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Creates and returns a <see cref="T:Smartstore.Core.Common.Money"/> struct.
            </summary>
            <param name="amount">The money amount.</param>
            <param name="currencyCodeOrObj">
            Target currency as string code (e.g. USD) or an actual <see cref="T:Smartstore.Core.Common.Currency"/> instance.
            If <c>null</c>, currency will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>.
            </param>
            <param name="displayCurrency">A value indicating whether to display the currency symbol/code.</param>
            <param name="roundIfEnabled">
            A value indicating whether to rounds <paramref name="amount"/> if rounding is enabled for the currency specified by <paramref name="currencyCodeOrObj"/>.
            </param>
            <returns>Money</returns>
        </member>
        <member name="T:Smartstore.Core.Common.Services.IDateTimeHelper">
            <summary>
            Represents a datetime helper
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IDateTimeHelper.FindTimeZoneById(System.String)">
            <summary>
            Retrieves a System.TimeZoneInfo object from the registry based on its identifier.
            </summary>
            <param name="id">The time zone identifier, which corresponds to the System.TimeZoneInfo.Id property.</param>
            <returns>A System.TimeZoneInfo object whose identifier is the value of the id parameter.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IDateTimeHelper.GetSystemTimeZones">
            <summary>
            Returns a sorted collection of all the time zones.
            </summary>
            <returns>A read-only collection of System.TimeZoneInfo objects.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IDateTimeHelper.ConvertToUserTime(System.DateTime,System.DateTimeKind)">
            <summary>
            Converts the date and time to current user date and time.
            </summary>
            <param name="dt">The date and time (respesents local system time or UTC time) to convert.</param>
            <param name="sourceDateTimeKind">The source datetimekind</param>
            <returns>A DateTime value that represents time that corresponds to the dateTime parameter in customer time zone.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IDateTimeHelper.ConvertToUserTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
            <summary>
            Converts the date and time to current user date and time.
            </summary>
            <param name="dt">The date and time to convert.</param>
            <param name="sourceTimeZone">The time zone of dateTime.</param>
            <param name="destinationTimeZone">The time zone to convert dateTime to.</param>
            <returns>A DateTime value that represents time that corresponds to the dateTime parameter in customer time zone.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IDateTimeHelper.ConvertToUtcTime(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Converts the date and time to Coordinated Universal Time (UTC)
            </summary>
            <param name="dt">The date and time to convert.</param>
            <param name="sourceTimeZone">The time zone of dateTime.</param>
            <returns>A DateTime value that represents the Coordinated Universal Time (UTC) that corresponds to the dateTime parameter. The DateTime value's Kind property is always set to DateTimeKind.Utc.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IDateTimeHelper.GetCustomerTimeZone(Smartstore.Core.Identity.Customer)">
            <summary>
            Gets a customer time zone
            </summary>
            <param name="customer">Customer</param>
            <returns>Customer time zone; if customer is null, then default store time zone</returns>
        </member>
        <member name="P:Smartstore.Core.Common.Services.IDateTimeHelper.DefaultStoreTimeZone">
            <summary>
            Gets or sets a default store time zone
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Services.IDateTimeHelper.CurrentTimeZone">
            <summary>
            Gets or sets the current user time zone
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.Services.IDeliveryTimeService">
            <summary>
            Delivery time service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IDeliveryTimeService.GetDeliveryDate(Smartstore.Core.Common.DeliveryTime)">
            <summary>
            Calculates the delivery date.
            </summary>
            <param name="deliveryTime">Delivery time.</param>
            <returns>Calculated minimum and maximum date.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IDeliveryTimeService.GetDeliveryDate(Smartstore.Core.Common.DeliveryTime,System.DateTime)">
            <summary>
            Calculates the delivery date.
            </summary>
            <param name="deliveryTime">Delivery time.</param>
            <param name="fromDate">The date from which the delivery date should be calculated.</param>
            <returns>Calculated minimum and maximum date.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IDeliveryTimeService.GetFormattedDeliveryDate(Smartstore.Core.Common.DeliveryTime,System.Nullable{System.DateTime},System.Globalization.CultureInfo)">
            <summary>
            Gets the formatted delivery date.
            </summary>
            <param name="deliveryTime">Delivery time.</param>
            <param name="fromDate">The date from which the delivery date should be calculated.
            <c>null</c> to use store's local time <see cref="P:Smartstore.Core.Common.Services.DateTimeHelper.DefaultStoreTimeZone"/>.</param>
            <param name="culture">Culture to use for formatting. <c>null</c> to use UI culture of current thread.</param>
            <returns>Formatted delivery date.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IDeliveryTimeService.GetDeliveryTimeAsync(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets a delivery time by id or returns default delivery time corresponding to <see cref="P:Smartstore.Core.Catalog.CatalogSettings.ShowDefaultDeliveryTime"/>
            </summary>
            <returns>DeliveryTime</returns>
        </member>
        <member name="T:Smartstore.Core.Common.Services.IExchangeRateProvider">
            <summary>
            Exchange rate provider interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IExchangeRateProvider.GetCurrencyLiveRatesAsync(System.String)">
            <summary>
            Gets currency live rates
            </summary>
            <param name="exchangeRateCurrencyCode">Exchange rate currency code</param>
            <returns>Exchange rates</returns>
        </member>
        <member name="T:Smartstore.Core.Common.Services.IGenericAttributeService">
            <summary>
            Generic attribute service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IGenericAttributeService.GetAttributesForEntity(System.String,System.Int32)">
            <summary>
            Gets a specialized generic attributes collection for the given entity.
            Loaded data will be cached for the duration of the request.
            </summary>
            <param name="entityName">Key group</param>
            <param name="entityId">Entity identifier</param>
            <returns>Generic attributes collection</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IGenericAttributeService.PrefetchAttributesAsync(System.String,System.Int32[])">
            <summary>
            Prefetches a collection of generic attributes for a range of entities in one go
            and caches them for the duration of the current request.
            </summary>
            <param name="entityName">Key group</param>
            <param name="entityIds">The entity ids to prefetch attributes for.</param>
        </member>
        <member name="P:Smartstore.Core.Common.Services.LookupCountryResponse.GeoNameId">
            <summary>
            The GeoName ID for the country. 
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Services.LookupCountryResponse.Name">
            <summary>
            The english name of the country.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Services.LookupCountryResponse.IsoCode">
            <summary>
            The two-letter ISO 3166-1 alpha code for the country
            </summary>
        </member>
        <member name="P:Smartstore.Core.Common.Services.LookupCountryResponse.IsInEu">
            <summary>
            This is true if the country is a member state of the European Union.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.Services.IGeoCountryLookup">
            <summary>
            Country lookup helper for IPv4/6 addresses
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.Services.IMeasureService">
            <summary>
            Measure dimension service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IMeasureService.ConvertDimensionAsync(System.Decimal,Smartstore.Core.Common.MeasureDimension,Smartstore.Core.Common.MeasureDimension,System.Boolean)">
            <summary>
            Converts dimension
            </summary>
            <param name="quantity">Quantity</param>
            <param name="source">Source dimension</param>
            <param name="target">Target dimension</param>
            <param name="round">A value indicating whether a result should be rounded</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IMeasureService.ConvertToPrimaryDimensionAsync(System.Decimal,Smartstore.Core.Common.MeasureDimension)">
            <summary>
            Converts to primary measure dimension
            </summary>
            <param name="quantity">Quantity</param>
            <param name="source">Source dimension</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IMeasureService.ConvertFromPrimaryDimensionAsync(System.Decimal,Smartstore.Core.Common.MeasureDimension)">
            <summary>
            Converts from primary dimension
            </summary>
            <param name="quantity">Quantity</param>
            <param name="target">Target dimension</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IMeasureService.ConvertWeightAsync(System.Decimal,Smartstore.Core.Common.MeasureWeight,Smartstore.Core.Common.MeasureWeight,System.Boolean)">
            <summary>
            Converts weight
            </summary>
            <param name="quantity">Quantity</param>
            <param name="source">Source weight</param>
            <param name="target">Target weight</param>
            <param name="round">A value indicating whether a result should be rounded</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IMeasureService.ConvertToPrimaryWeightAsync(System.Decimal,Smartstore.Core.Common.MeasureWeight)">
            <summary>
            Converts to primary measure weight
            </summary>
            <param name="quantity">Quantity</param>
            <param name="source">Source weight</param>
            <returns>Converted value</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IMeasureService.ConvertFromPrimaryWeightAsync(System.Decimal,Smartstore.Core.Common.MeasureWeight)">
            <summary>
            Converts from primary weight
            </summary>
            <param name="quantity">Quantity</param>
            <param name="target">Target weight</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Smartstore.Core.Common.Services.IRoundingHelper">
            <summary>
            Represents rounding of currency amounts.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IRoundingHelper.Round(System.Decimal,Smartstore.Core.Common.Currency)">
            <summary>Rounds <paramref name="amount"/>.</summary>
            <param name="amount">Amount to round.</param>
            <param name="currency">
            Rounds <paramref name="amount"/> using <see cref="P:Smartstore.Core.Common.Currency.RoundNumDecimals"/> and <see cref="P:Smartstore.Core.Common.Currency.MidpointRounding"/>.
            If <c>null</c>, currency will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>.
            </param>
            <returns>Rounded amount.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IRoundingHelper.Round(System.Decimal,System.Int32,Smartstore.Core.Common.CurrencyMidpointRounding)">
            <summary>
            Rounds <paramref name="amount"/>.
            </summary>
            <param name="amount">Amount to round.</param>
            <param name="decimals">Number of decimal places (precision).</param>
            <param name="midpointRounding">The rounding strategy of the midway between two currency amounts.</param>
            <returns>Rounded amount.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IRoundingHelper.IsShoppingCartRoundingEnabled(Smartstore.Core.Common.Currency,System.Nullable{Smartstore.Core.Checkout.Tax.TaxDisplayType})">
            <summary>
            Gets a value indicating whether rounding during shopping cart calculation is enabled.
            </summary>
            <param name="currency">
            Currency. If <c>null</c>, currency will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>.
            </param>
            <param name="taxDisplayType">
            Tax display type. If <c>null</c>, type will be obtained via <see cref="P:Smartstore.Core.IWorkContext.TaxDisplayType"/>.
            </param>
            <returns></returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IRoundingHelper.RoundIfEnabledFor(System.Decimal,Smartstore.Core.Common.Currency,System.Nullable{Smartstore.Core.Checkout.Tax.TaxDisplayType})">
            <summary>
            Rounds <paramref name="amount"/> if rounding during shopping cart calculation is enabled.
            </summary>
            <param name="amount">Amount to round.</param>
            <param name="currency">
            Rounds <paramref name="amount"/> using <see cref="P:Smartstore.Core.Common.Currency.RoundNumDecimals"/> and <see cref="P:Smartstore.Core.Common.Currency.MidpointRounding"/>.
            If <c>null</c>, currency will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>.
            </param>
            <param name="taxDisplayType">
            Tax display type. If <c>null</c>, type will be obtained via <see cref="P:Smartstore.Core.IWorkContext.TaxDisplayType"/>.
            </param>
            <returns>Rounded amount if rounding is enabled for <paramref name="currency"/>, <paramref name="amount"/> otherwise.</returns>
        </member>
        <member name="M:Smartstore.Core.Common.Services.IRoundingHelper.ToNearest(System.Decimal,System.Decimal@,Smartstore.Core.Common.Currency)">
            <summary>
            Round amount up or down to the nearest multiple of denomination (cash rounding) if activated for currency.
            </summary>
            <param name="amount">Amount to round.</param>
            <param name="toNearestRounding">Amount by which was rounded.</param>
            <param name="currency">
            Currency. <see cref="P:Smartstore.Core.Common.Currency.RoundOrderTotalEnabled"/> must be activated for this currency.
            If <c>null</c>, currency will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>.
            </param>
            <returns>Rounded amount.</returns>
            <example>"Schweizer Rappenrundung" of 16.23 -> returned value is 16.25 and toNearestRounding is 0.02.</example>
            <remarks>Usually this method is used to round the order total.</remarks>
        </member>
        <member name="T:Smartstore.Core.Common.Tasks.TempFileCleanupTask">
            <summary>
            Task to cleanup temporary files.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Common.Tasks.UpdateExchangeRateTask">
            <summary>
            A task that periodically updates exchange rates.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.BlockAttribute">
            <summary>
            Applies metadata to concrete block types which implement <see cref="T:Smartstore.Core.Content.Blocks.IBlock"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.BlockAttribute.SystemName">
            <summary>
            The block system name, e.g. 'html', 'picture' etc.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.BlockAttribute.FriendlyName">
            <summary>
            The english friendly name of the block.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.BlockAttribute.Icon">
            <summary>
            The icon class name of the block, e.g. 'fa fa-sitemap'.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.BlockAttribute.DisplayOrder">
            <summary>
            The order of display.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.IBlockMetadata">
            <summary>
            Represents block registration metadata.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.IBindableBlock">
            <summary>
            When implemented on <see cref="T:Smartstore.Core.Content.Blocks.IBlock"/> types, makes the block bindable to
            product, category and manufacturer entities. The UI will display a 'Data binding'
            section which allows selection of an entity.
            </summary>
            <remarks>
            The handler for a bindable block type MUST implement <see cref="T:Smartstore.Core.Content.Blocks.IBindableBlockHandler"/>.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBindableBlock.BindEntityName">
            <summary>
            The name of the bound entity, e.g. 'product'.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBindableBlock.BindEntityId">
            <summary>
            The id of the bound entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBindableBlock.CanBind">
            <summary>
            Returns a value to indicate whether the block can be bound. A block can be bound
            if both <see cref="P:Smartstore.Core.Content.Blocks.IBindableBlock.BindEntityName"/> and <see cref="P:Smartstore.Core.Content.Blocks.IBindableBlock.BindEntityId"/> have values.
            However, this property does not indicate whether the bound entity actually exists.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBindableBlock.IsLoaded">
            <summary>
            Returns a value to indicate whether the binding source (<see cref="P:Smartstore.Core.Content.Blocks.IBindableBlock.DataItem"/>) has been loaded from the store already.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBindableBlock.DataItem">
            <summary>
            The data item of the bound entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBindableBlock.IsBound">
            <summary>
            Returns a value to indicate whether the block has been bound already.
            A block is considered bound if the binding source dictionary has been
            applied to the block instance's bindable properties.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Blocks.IBindableBlock.Reset">
            <summary>
            Resets the data item of the bound entity. After calling this method,
            <see cref="P:Smartstore.Core.Content.Blocks.IBindableBlock.DataItem"/> is <c>null</c>, <see cref="P:Smartstore.Core.Content.Blocks.IBindableBlock.IsLoaded"/> and <see cref="P:Smartstore.Core.Content.Blocks.IBindableBlock.IsBound"/> are <c>false</c>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.IBindableBlockHandler">
            <summary>
            Retrieves information about UI mapping between template tokens and form controls.
            </summary>
            <remarks>
            <see cref="T:Smartstore.Core.Content.Blocks.IBindableBlockHandler"/> only works in conjunction with <see cref="T:Smartstore.Core.Content.Blocks.IBindableBlock"/>.
            Make sure that the handled block type implements <see cref="T:Smartstore.Core.Content.Blocks.IBindableBlock"/>.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Content.Blocks.IBindableBlockHandler.GetMappingConfiguration">
            <summary>
            Build and returns the template mapping configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.TemplateMappingConfiguration">
            <summary>
            Contans information about UI mapping between template tokens and form controls.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.TemplateMappingConfiguration.Map">
            <summary>
            A list of template tokens and their corresponding form controls.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.TemplateMappingConfiguration.BindableFields">
            <summary>
            The complete list of field names which can be bound to entity fields.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.TemplateMapping">
            <summary>
            Block data binding mapping definition for a single field.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.TemplateMapping.FieldName">
            <summary>
            Name of the bound field, e.g. 'Title', 'Description', 'Price' etc.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.TemplateMapping.Template">
            <summary>
            The 'Liquid' template
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.IBlock">
            <summary>
            Marker interface for a PageBuilder block implementation.
            Blocks are handled by corresponding <see cref="T:Smartstore.Core.Content.Blocks.IBlockHandler"/> implementations.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.IBlockContainer">
            <summary>
            Contains base data for a block instance.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBlockContainer.BlockType">
            <summary>
            The type of the block, e.g. 'html'.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBlockContainer.Block">
            <summary>
            The actual block instance.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBlockContainer.Metadata">
            <summary>
            The block metadata.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBlockContainer.Title">
            <summary>
            The block title / display name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBlockContainer.IsInversed">
            <summary>
            Whether the block's text content color should be inversed so
            that it gets readable on dark backgrounds.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBlockContainer.HtmlId">
            <summary>
            The block html id.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBlockContainer.CssClass">
            <summary>
            The block css class name(s).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.IBlockContainer.CssStyle">
            <summary>
            The block css style expression.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.IBlockEntity">
            <summary>
            Represents a block instance's storage data.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.IBlockHandler">
            <summary>
            Handles rendering of corresponding <see cref="T:Smartstore.Core.Content.Blocks.IBlock"/> implementations.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Blocks.IBlockHandler.BeforeRender(Smartstore.Core.Content.Blocks.IBlockContainer,Smartstore.Core.Content.Blocks.StoryViewMode,Smartstore.Core.Content.Blocks.IBlockHtmlParts)">
            <summary>
            Called when the block is about to be rendered. Gives you the chance to add css classes or html attributes to the root element.
            </summary>
            <param name="container">The block instance wrapper / model.</param>
            <param name="viewMode">The stories current view mode.</param>
            <param name="htmlParts">Allows adding classes or attributes.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Blocks.IBlockHandler.RenderAsync(Smartstore.Core.Content.Blocks.IBlockContainer,System.Collections.Generic.IEnumerable{System.String},Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)">
            <summary>
            Renders the block result.
            </summary>
            <param name="element">The block element to render.</param>
            <param name="templates">A list of template names. The first valid template will be used for rendering.</param>
            <param name="htmlHeper">Html helper instance.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Blocks.IBlockHandler.AfterSaveAsync(Smartstore.Core.Content.Blocks.IBlockContainer,Smartstore.Core.Content.Blocks.IBlockEntity)">
            <summary>
            Called after the entity has been saved to the database to perform operations which require an entity id (e.g. localization stuff).
            </summary>
            <param name="container">The block instance wrapper / model.</param>
            <param name="entity">
            The corresponding entity record for the block.
            </param>
        </member>
        <member name="M:Smartstore.Core.Content.Blocks.IBlockHandler.CloneAsync(Smartstore.Core.Content.Blocks.IBlockEntity,Smartstore.Core.Content.Blocks.IBlockEntity)">
            <summary>
            Clones <see cref="P:Smartstore.Core.Content.Blocks.IBlockEntity.Model"/>. In most cases it is sufficient to directly return the serialized model, but there may be cases
            where the inner data must be cloned first, e.g. if it contains a picture reference.
            </summary>
            <param name="sourceEntity">The source entity.</param>
            <param name="clonedEntity">The target entity clone which is about to be saved in the data storage.</param>
            <returns>The serialized block clone.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Blocks.IBlockHandler.ToHtmlContentAsync(Smartstore.Core.Content.Blocks.IBlockContainer,System.Collections.Generic.IEnumerable{System.String},Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper)">
            <summary>
            returns the block's render result as string.
            </summary>
            <param name="element">The block element to render.</param>
            <param name="templates">A list of valid template names. The first valid template will be used for rendering.</param>
            <param name="htmlHelper">Html helper instance.</param>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.IBlockHandler`1">
            <summary>
            Handles loading, saving and rendering of corresponding <see cref="T:Smartstore.Core.Content.Blocks.IBlock"/> implementations.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Blocks.IBlockHandler`1.Create(Smartstore.Core.Content.Blocks.IBlockEntity)">
            <summary>
            Creates the <see cref="T:Smartstore.Core.Content.Blocks.IBlock"/> implementation instance for the passed block entity.
            </summary>
            <param name="entity">The serialized entity to create a block instance for.</param>
            <returns>A concrete block implementation instance.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Blocks.IBlockHandler`1.LoadAsync(Smartstore.Core.Content.Blocks.IBlockEntity,Smartstore.Core.Content.Blocks.StoryViewMode)">
            <summary>
            Creates and loads the <see cref="T:Smartstore.Core.Content.Blocks.IBlock"/> implementation instance for the passed block entity and view mode.
            </summary>
            <param name="entity">The serialized entity to load a block instance for.</param>
            <param name="viewMode">Depending on view mode, some data may be loaded or not.</param>
            <returns>A concrete block implementation instance.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Blocks.IBlockHandler`1.SaveAsync(`0,Smartstore.Core.Content.Blocks.IBlockEntity)">
            <summary>
            Serializes the passed block instance and saves the result in the <see cref="P:Smartstore.Core.Content.Blocks.IBlockEntity.Model"/> property.
            </summary>
            <param name="block">The block instance to save.</param>
            <param name="entity">
            The corresponding entity record for the block. In most cases <paramref name="block"/> will
            be converted to JSON and assigned to <see cref="P:Smartstore.Core.Content.Blocks.IBlockEntity.Model"/> property, which then will be saved in the data storage.
            </param>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.Domain.StoryAssetAttribute">
            <summary>
            Specifies whether a property refers to an asset to be included in the story export.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Blocks.Domain.StoryAssetAttribute.Kind">
            <summary>
            The asset property kind.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.Domain.StoryAssetKind.Picture">
            <summary>
            The property value is a picture identifier.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.Domain.StoryAssetKind.Video">
            <summary>
            The property value is a video path.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.Domain.StoryAssetKind.Product">
            <summary>
            The property value is a product identifier.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.Domain.StoryAssetKind.Category">
            <summary>
            The property value is a category identifier.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.Domain.StoryAssetKind.Manufacturer">
            <summary>
            The property value is a manufacturer identifier.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.Domain.StoryAssetKind.Link">
            <summary>
            The property value is a link builder expression.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.Domain.StoryAssetKind.Audio">
            <summary>
            The property value is a audio path.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Blocks.StoryViewMode">
            <summary>
            Enumeration for the current view mode of a PageBuilder block.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.StoryViewMode.Public">
            <summary>
            Final rendering result in public frontend.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.StoryViewMode.Preview">
            <summary>
            Preview mode in backend
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.StoryViewMode.GridEdit">
            <summary>
            Visual block editing in backend's story editor.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Blocks.StoryViewMode.Edit">
            <summary>
            Property dialog in backend.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.AlbumInfo">
            <summary>
            Common info about a media album.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumInfo.Id">
            <summary>
            Storage id of the album
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumInfo.Name">
            <summary>
            System name of the album
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumInfo.ProviderType">
            <summary>
            The type of the concrete <see cref="T:Smartstore.Core.Content.Media.IAlbumProvider"/> implementation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumInfo.IsSystemAlbum">
            <summary>
            An album created by <see cref="T:Smartstore.Core.Content.Media.SystemAlbumProvider"/> is always a system album.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumInfo.DisplayHint">
            <summary>
            Info about how to display the album by the media manager UI
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumInfo.HasTrackDetector">
            <summary>
            <c>true</c> if at least one (<see cref="T:Smartstore.Core.Content.Media.IMediaTrackDetector"/>) implementation
            can detect tracks for this album.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumInfo.TrackDetectorTypes">
            <summary>
            The types of the matching concrete <see cref="T:Smartstore.Core.Content.Media.IMediaTrackDetector"/> implementations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumInfo.TrackedProperties">
            <summary>
            Reflection info about trackable properties.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumDisplayHint.Color">
            <summary>
            Gets or sets the album folder icon display HTML color
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumDisplayHint.OverlayIcon">
            <summary>
            Gets or sets the album overlay icon class name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.AlbumDisplayHint.OverlayColor">
            <summary>
            Gets or sets the album overlay icon display HTML color
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IAlbumProvider">
            <summary>
            Creates album entities and provides media manager UI infos about them.
            Implementation classes are instantiated once on app startup. Impl does NOT
            need to be registered in DI.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IAlbumProvider.GetAlbums">
            <summary>
            Creates a list of album entities the provider is responsible for.
            A special bootstrapper checks whether an album already exists in the
            database (by <see cref="P:Smartstore.Core.Content.Media.MediaFolder.Name"/> key). The entity is inserted
            to the database if it does not exist yet, or skipped otherwise.
            </summary>
            <returns>List of entities.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IAlbumProvider.GetDisplayHint(Smartstore.Core.Content.Media.MediaAlbum)">
            <summary>
            Gets UI display info about an album.
            </summary>
            <param name="album">Album to get info for.</param>
            <returns>UI display hint object.</returns>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IAlbumRegistry">
            <summary>
            Manages all registered albums.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IAlbumRegistry.GetAllAlbums">
            <summary>
            Enlists all albums.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IAlbumRegistry.GetAlbumNames(System.Boolean)">
            <summary>
            Gets the names of all albums.
            </summary>
            <param name="withTrackDetectors">If <c>true</c> skips all albums without track detection capability.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IAlbumRegistry.GetAlbumByName(System.String)">
            <summary>
            Gets an album by name.
            </summary>
            <param name="name">Name of album to retrieve.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IAlbumRegistry.GetAlbumById(System.Int32)">
            <summary>
            Gets an album by ID.
            </summary>
            <param name="id">Storage id of album to retrieve.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IAlbumRegistry.UninstallAlbumAsync(System.String)">
            <summary>
            Deletes album and all containing files
            </summary>
            <param name="albumName">Name of album to delete</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IAlbumRegistry.DeleteAlbumAsync(System.String,System.String)">
            <summary>
            Deletes album but keeps containing files
            </summary>
            <param name="albumName">Name of album to delete</param>
            <param name="moveFilesToAlbum">Name of album to move files to</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IAlbumRegistry.ClearCacheAsync">
            <summary>
            Clears album cache and reloads all entities from database.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IFolderService">
            <summary>
            Reads media folder objects either from cache (as <see cref="T:Smartstore.Collections.TreeNode`1"/>).
            Methods with <see cref="T:Smartstore.Core.Content.Media.MediaFolderNode"/> in their signature always work against the cache and enable very fast
            data retrieval.
            The tree cache is invalidated automatically after any storage action.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IFolderService.GetRootNode">
            <summary>
            Gets the root folder node from cache.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IFolderService.GetNodeById(System.Int32)">
            <summary>
            Gets a folder node by storage id.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IFolderService.GetNodeByPath(System.String)">
            <summary>
            Gets a folder node by path, e.g. "catalog/subfolder1/subfolder2".
            The first token always refers to an album. This method operates very fast 
            because all possible pathes are cached.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IFolderService.CheckUniqueFolderName(System.String,System.String@)">
            <summary>
            Checks whether any given path does already exist and - if true -
            outputs a unique leaf folder name that can be used to save a folder
            to the database.
            </summary>
            <param name="path">The path to check.</param>
            <param name="newName">If method return value is <c>true</c>: the new unique folder name, otherwise: <c>null</c>.</param>
            <returns><c>true</c> when passed path exists already.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IFolderService.ClearCacheAsync">
            <summary>
            Clears the cache and reloads data from database.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Exists">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Microsoft#Extensions#FileProviders#IFileInfo#IsDirectory">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IFileEntry#CreatedOn">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Microsoft#Extensions#FileProviders#IFileInfo#LastModified">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Microsoft#Extensions#FileProviders#IFileInfo#Length">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Microsoft#Extensions#FileProviders#IFileInfo#PhysicalPath">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.Microsoft#Extensions#FileProviders#IFileInfo#CreateReadStream">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IFileEntry#FileSystem">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IFileEntry#SubPath">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IFileEntry#IsSymbolicLink(System.String@)">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IDirectory#IsRoot">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderInfo.Parent">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IFileEntry#Delete">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IFileEntry#DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IDirectory#Create">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IDirectory#CreateAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IDirectory#CreateSubdirectory(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IDirectory#CreateSubdirectoryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IFileEntry#MoveTo(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.Smartstore#IO#IFileEntry#MoveToAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.EnumerateEntries(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.EnumerateEntriesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.EnumerateDirectories(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.EnumerateDirectoriesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.EnumerateFiles(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.EnumerateFilesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.CountFiles(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.CountFilesAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.GetDirectorySize(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFolderInfo.GetDirectorySizeAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderNode.IsAlbum">
            <summary>
            Whether the folder is a root album node
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderNode.AlbumName">
            <summary>
            The root album name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderNode.Id">
            <summary>
            Entity Id
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolderNode.Name">
            <summary>
            Folder name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.DefaultThumbnailAspectRatio">
            <summary>
            Gets or sets the height to width ratio for thumbnails in grid style lists (0.2 - 2)
            </summary>
            <remarks>
            A value greater than 1 indicates, that your product pictures are generally
            in portrait format, less than 1 indicates landscape format.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.MultipleThumbDirectories">
            <summary>
            Geta or sets a vaue indicating whether single (/media/thumbs/) or multiple (/media/thumbs/0001/ and /media/thumbs/0002/) directories will used for picture thumbs
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.AutoGenerateAbsoluteUrls">
            <summary>
            Generates absolute media urls based upon current request uri instead of relative urls.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.MakeFilesTransientWhenOrphaned">
            <summary>
            Whether orphaned files should automatically be marked as transient so that the daily cleanup task may delete them.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.MaxUploadFileSize">
            <summary>
            Gets or sets the maximum size (in KB) of an uploaded media file. The default is 102,400 (100 MB).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.ImageTypes">
            <summary>
            A space separated list of image type file extensions (dotless)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.VideoTypes">
            <summary>
            A space separated list of video type file extensions (dotless)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.AudioTypes">
            <summary>
            A space separated list of audio type file extensions (dotless)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.DocumentTypes">
            <summary>
            A space separated list of document type file extensions (dotless)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.TextTypes">
            <summary>
            A space separated list of text type file extensions (dotless)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.BinTypes">
            <summary>
            A space separated list of other types file extensions (dotless)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.DefaultResamplingMode">
            <summary>
            Gets or sets the default resampling mode during image resize operations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.DefaultImageQuality">
            <summary>
            Gets or sets the default JPEG quality used for JPEG encoding.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.JpegColorType">
            <summary>
            Gets or sets the default JPEG subsampling used for JPEG encoding.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.PngCompressionLevel">
            <summary>
            Gets or sets the default compression level used for PNG encoding.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.PngQuantizationMethod">
            <summary>
            Gets or sets the default quantization method used for PNG encoding.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.PngInterlaced">
            <summary>
            Whether PNG should be encoded interlaced.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.PngIgnoreMetadata">
            <summary>
            Whether PNG metadata should be ignored when the image is being encoded.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.GifQuantizationMethod">
            <summary>
            Gets or sets the default quantization method used for GIF encoding.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.OffloadEmbeddedImagesOnSave">
            <summary>
            Finds embedded Base64 images in long HTML descriptions, extracts and saves them
            to the media storage, and replaces the Base64 fragment with the media path.
            Offloading is automatically triggered by saving an entity to the database.
            Currently supported entity types are: 
            <c>Product</c>, <c>Category</c>, <c>Manufacturer</c> and <c>Topic</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.ResponseCacheDuration">
            <summary>
            Gets or sets the duration in seconds for which a media file response is cached.
            This sets "max-age" in "Cache-control" header.
            The default is 604800 sec. (7 days).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.ResponseCacheLocation">
            <summary>
            Gets or sets the location where a media file response must be cached.
            The defualt is <see cref="F:Microsoft.AspNetCore.Mvc.ResponseCacheLocation.Any"/>
            (cache in both proxies and client, sets "Cache-control" header to "public").
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.ResponseCacheNoStore">
            <summary>
            Gets or sets the value which determines whether a media file response should be stored or not.
            When set to <see langword="true"/>, it sets "Cache-control" header to "no-store".
            Ignores the "Location" parameter for values other than "None".
            Ignores the "duration" parameter.
            Setting this to <see langword="true"/> has the effect that no HTTP 304 revalidation can
            occur on the server because the client has been instructed not to cache the response.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaSettings.AppendFileVersionToUrl">
            <summary>
            If <see langword="true"/>, appends file version hash to every generated url in "ver" query
            to force clients (e.g. the browser) to ignore their local copy when the file has changed.
            The hash includes last modified date and file size.
            </summary>
            <remarks>
            Setting this to <see langword="true"/> does not make any sense when the cache location
            is <see cref="F:Microsoft.AspNetCore.Mvc.ResponseCacheLocation.None"/> or <see cref="P:Smartstore.Core.Content.Media.MediaSettings.ResponseCacheNoStore"/> is <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Content.Media.Download">
            <summary>
            Represents a downloadable file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.DownloadGuid">
            <summary>
            Gets or sets a GUID.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.UseDownloadUrl">
            <summary>
            Gets or sets a value indicating whether to use the <see cref="P:Smartstore.Core.Content.Media.Download.DownloadUrl"/> property.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.DownloadUrl">
            <summary>
            Gets or sets a download URL.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.IsTransient">
            <summary>
            Gets or sets a value indicating whether the entity is transient/preliminary.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.UpdatedOnUtc">
            <summary>
            Gets or sets the date of instance update.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.MediaFileId">
            <summary>
            Gets or sets the media file identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.MediaFile">
            <summary>
            Gets or sets the media file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.EntityId">
            <summary>
            Gets or sets the corresponding entity id.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.EntityName">
            <summary>
            Gets or sets the corresponding entity name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.FileVersion">
            <summary>
            Gets or sets the file version.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Download.Changelog">
            <summary>
            Gets or sets informations about changes of the current download version.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Download.Clone">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Content.Media.MediaAlbum">
            <summary>
            Represents a media album.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaAlbum.ResKey">
            <summary>
            Gets or sets the display name resource key.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaAlbum.IncludePath">
            <summary>
            Gets or sets a value indicating whether to include the folder paths in file URL generation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaAlbum.Order">
            <summary>
            Gets or sets the media album display order.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.FallbackPictureType">
            <summary>
            Represents a picture item type.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Media.FallbackPictureType.Entity">
            <summary>
            Entities (products, categories, manufacturers).
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.MediaFile">
            <summary>
            Represents a media file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.FolderId">
            <summary>
            Gets or sets the associated folder identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Folder">
            <summary>
            Gets or sets the associated folder.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Name">
            <summary>
            Gets or sets the SEO friendly name of the media file including file extension.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Alt">
            <summary>
            Gets or sets the localizable image ALT text.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Title">
            <summary>
            Gets or sets the localizable media file title text.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Extension">
            <summary>
            Gets or sets the (dotless) file extension.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.MimeType">
            <summary>
            Gets or sets the file MIME type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.MediaType">
            <summary>
            Gets or sets the file media type (image, video, audio, document etc.).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Size">
            <summary>
            Gets or sets the file size in bytes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.PixelSize">
            <summary>
            Gets or sets the total pixel size of an image (width * height).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Metadata">
            <summary>
            Gets or sets the file metadata as raw JSON dictionary (width, height, video length, EXIF etc.).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.AdminComment">
            <summary>
            Gets or sets an internal admin comment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Width">
            <summary>
            Gets or sets the image width (if file is an image).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Height">
            <summary>
            Gets or sets the image height (if file is an image).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.CreatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.UpdatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.IsTransient">
            <summary>
            Gets or sets a value indicating whether the file is transient/preliminary.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Deleted">
            <summary>
            Gets or sets a value indicating whether the file has been soft deleted.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Hidden">
            <summary>
            Gets or sets a value indicating whether the file is hidden.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Version">
            <summary>
            Internally used for migration stuff only.
            0 = needs migration because existed in previous versions already, 1 = was migrated by migrator, 2 = relations have been detected.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.MediaStorageId">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.MediaStorage">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Tags">
            <summary>
            Gets or sets the associated tags.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.Tracks">
            <summary>
            Gets or sets the related entity tracks.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFile.ProductMediaFiles">
            <summary>
            Gets or sets the product media files.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.MediaFolder">
            <summary>
            Represents a media folder.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolder.ParentId">
            <summary>
            Gets or sets the parent folder id.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolder.TreePath">
            <summary>
            Gets or sets the tree path.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolder.Parent">
            <summary>
            Gets or sets the parent folder.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolder.Children">
            <summary>
            Gets or sets the child folders.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolder.Name">
            <summary>
            Gets or sets the media folder name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolder.Slug">
            <summary>
            Gets or sets the folder URL part slug.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolder.CanDetectTracks">
            <summary>
            Gets or sets a value indicating whether the folder can track relations to entities for containing files.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolder.Metadata">
            <summary>
            Gets or sets the media folder metadata as raw JSON string.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolder.FilesCount">
            <summary>
            (Perf) Gets or sets the total number of files in this folder (excluding files from sub-folders).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFolder.Files">
            <summary>
            Gets or sets the associated media files.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.MediaStorage">
            <summary>
            Represents the raw media data.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaStorage.Data">
            <summary>
            Gets or sets the media binary data.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.MediaTag">
            <summary>
            Represents a media tag.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaTag.Name">
            <summary>
            Gets or sets the media tag name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaTag.MediaFiles">
            <summary>
            Gets or sets the associated media files.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.MediaTrack">
            <summary>
            Represents a media file reference.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaTrack.MediaFileId">
            <summary>
            Gets or sets the media file identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaTrack.MediaFile">
            <summary>
            Gets or sets the media file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaTrack.Album">
            <summary>
            Gets or sets the origin album system name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaTrack.EntityId">
            <summary>
            Gets or sets the related entity identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaTrack.EntityName">
            <summary>
            Gets or sets the related entity set name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaTrack.Property">
            <summary>
            Gets or sets the media file property name in the tracked entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaTrack.Operation">
            <summary>
            Gets or sets the media track operation.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IMediaDupeDetector">
            <summary>
            Represents a detector for finding duplicate <see cref="T:Smartstore.Core.Content.Media.MediaFile"/> entities.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaDupeDetector.DetectFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Tries to detect a duplicate file.
            </summary>
            <param name="fileName">The name of the file to search for.</param>
            <returns>Found duplicate file or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaDupeDetector.GetUniqueFileNameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a unique file name.
            </summary>
            <param name="title">File title to be checked and to be used to generate unique file names.</param>
            <param name="extension">Dot-less file extension, e.g. <c>png</c>.</param>
            <returns>Unique file name, or <c>null</c> if no file with the name <paramref name="title"/> exists.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaDupeDetectorExtensions.CheckUniqueFileNameAsync(Smartstore.Core.Content.Media.IMediaDupeDetector,Smartstore.Core.Content.Media.MediaPathData,System.Threading.CancellationToken)">
            <summary>
            Applies a unique file name to <paramref name="pathData.."/> if it is not unique.
            </summary>
            <returns><c>true</c> if a unique file name was applied to <paramref name="pathData.."/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IMediaDupeDetectorFactory">
            <summary>
            Responsible for resolving <see cref="T:Smartstore.Core.Content.Media.MediaFile"/> duplicate detectors (<see cref="T:Smartstore.Core.Content.Media.IMediaDupeDetector"/>).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaDupeDetectorFactory.GetDetector(System.Int32)">
            <summary>
            Gets the most suitable detector to find <see cref="T:Smartstore.Core.Content.Media.MediaFile"/> duplicates (uses <see cref="P:Smartstore.Core.Common.Configuration.PerformanceSettings.MediaDupeDetectorMaxCacheSize"/>).
            </summary>
            <param name="folderId"><see cref="P:Smartstore.Core.Content.Media.MediaFolderNode.Id"/> of the folder to check for duplicates in.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.DownloadExtensions.OrderByVersion(System.Collections.Generic.ICollection{Smartstore.Core.Content.Media.Download},System.Boolean)">
            <summary>
            Orders the given download collection by <see cref="P:Smartstore.Core.Content.Media.Download.FileVersion"/>
            </summary>
            <param name="downloads">The source collection.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.DownloadQueryExtensions.ApplyEntityFilter``1(System.Linq.IQueryable{Smartstore.Core.Content.Media.Download},``0)">
            <summary>
            Applies a filter for identifier and name of the entity.
            </summary>
            <param name="entity">The entity instance to get downloads for.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.DownloadQueryExtensions.ApplyEntityFilter(System.Linq.IQueryable{Smartstore.Core.Content.Media.Download},System.String,System.Int32)">
            <summary>
            Applies a filter for identifier and name of the entity.
            </summary>
            <param name="entityName">Name of entity to get downloads for.</param>
            <param name="entityId">Identifier of entity to get downloads for.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.DownloadQueryExtensions.ApplyEntityFilter(System.Linq.IQueryable{Smartstore.Core.Content.Media.Download},System.String,System.Int32[])">
            <summary>
            Applies a filter for entity name and multiple identifiers.
            </summary>
            <param name="entityName">Name of entity to get downloads for.</param>
            <param name="entityIds">Identifiers of entities to get downloads for.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.DownloadQueryExtensions.ApplyVersionFilter(System.Linq.IQueryable{Smartstore.Core.Content.Media.Download},System.String)">
            <summary>
            Applies a version filter.
            </summary>
            <param name="version">
                The version to filter by. 
                <see cref="F:System.String.Empty"/> = Any versioned file.
                Any string = All files with exact version match.
                <c>null</c> = No filter.
            </param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IFolderServiceExtensions.FindNode(Smartstore.Core.Content.Media.IFolderService,Smartstore.Core.Content.Media.MediaFile)">
            <summary>
            Finds the folder node for a given <see cref="T:Smartstore.Core.Content.Media.MediaFile"/> object.
            </summary>
            <returns>The found folder node or <c>null</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IFolderServiceExtensions.FindAlbum(Smartstore.Core.Content.Media.IFolderService,Smartstore.Core.Content.Media.MediaFile)">
            <summary>
            Finds the root album node for a given <see cref="T:Smartstore.Core.Content.Media.MediaFile"/> object.
            </summary>
            <returns>The found album node or <c>null</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IFolderServiceExtensions.FindAlbum(Smartstore.Core.Content.Media.IFolderService,System.Int32)">
            <summary>
            Finds the root album node for a given folder id.
            </summary>
            <returns>The found album node or <c>null</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IFolderServiceExtensions.AreInSameAlbum(Smartstore.Core.Content.Media.IFolderService,Smartstore.Core.Content.Media.MediaFile[])">
            <summary>
            Checks whether all passed files are contained in the same album.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IFolderServiceExtensions.AreInSameAlbum(Smartstore.Core.Content.Media.IFolderService,System.Int32[])">
            <summary>
            Checks whether all passed folder ids are children of the same album.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaServiceExtensions.FindEqualFile(Smartstore.Core.Content.Media.IMediaService,System.Byte[],System.Collections.Generic.IEnumerable{Smartstore.Core.Content.Media.MediaFile},Smartstore.Core.Content.Media.MediaFile@)">
            <summary>
            Tries to find an equal file by comparing the source buffer to a list of files.
            </summary>
            <param name="sourceBuffer">Binary source file data to find a match for.</param>
            <param name="files">The sequence of files to seek within for duplicates.</param>
            <param name="equalFile">A file from the <paramref name="files"/> collection whose content is equal to <paramref name="sourceBuffer"/>.</param>
            <returns>The passed file binary when no file equals in the sequence, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaServiceExtensions.FindEqualFileAsync(Smartstore.Core.Content.Media.IMediaService,System.String,System.Int32,System.Boolean)">
            <summary>
            Tries to find an equal file by file name, then by comparing the binary contents of the matched files to <paramref name="sourcePath"/> binary content.
            </summary>
            <param name="sourcePath">The full physical path to the source file to find a duplicate for (e.g. a local or downloaded file during an import process).</param>
            <param name="targetFolderId">The id of the folder in which to look for duplicates.</param>
            <param name="deepSearch">Whether to search in subfolders too.</param>
            <returns><c>true</c> when a duplicate file was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaServiceExtensions.FindEqualFileAsync(Smartstore.Core.Content.Media.IMediaService,System.IO.Stream,System.String,System.Int32,System.Boolean)">
            <summary>
            Tries to find an equal file by file name, then by comparing the binary contents of the matched files to <paramref name="source"/> content.
            </summary>
            <param name="source">The source file stream to find a duplicate for (e.g. a local or downloaded file during an import process).</param>
            <param name="fileName">The file name used to determine potential duplicates to check against.</param>
            <param name="targetFolderId">The id of the folder in which to look for duplicates.</param>
            <param name="deepSearch">Whether to search in subfolders too.</param>
            <returns><c>true</c> when a duplicate file was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileExtensions.RefreshMetadata(Smartstore.Core.Content.Media.MediaFile,System.IO.Stream,Smartstore.Imaging.IImageFactory)">
            <summary>
            Refreshes file metadata like size, dimensions etc.
            </summary>
            <param name="stream">The file stream (can be null)</param>
        </member>
        <member name="P:Smartstore.Core.Content.Media.FileBatchSource.Source">
            <summary>
            The file source as <see cref="T:Smartstore.Core.Content.Media.Storage.MediaStorageItem"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.FileBatchSource.FileName">
            <summary>
            Name of file including extension.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.FileBatchSource.State">
            <summary>
            Any state to identify the source later after batch save. E.g.: <see cref="T:Smartstore.Core.DataExchange.Import.ImportRow`1"/>, <see cref="T:Smartstore.Net.Http.DownloadManagerItem"/> etc.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.MaxMediaFileSizeAttribute">
            <summary>
            Filters a request by the size of uploaded files according to <see cref="P:Smartstore.Core.Content.Media.MediaSettings.MaxUploadFileSize"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MaxMediaFileSizeAttribute.#ctor(System.Int64)">
            <param name="maxSize">
            Overrides the the maximum allowed size (in KB) of an uploaded media file for a particular action. 
            If <c>null</c>, uses <see cref="P:Smartstore.Core.Content.Media.MediaSettings.MaxUploadFileSize"/>.
            </param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.ImageHandlerBase.ProcessImageAsync(Smartstore.Core.Content.Media.MediaHandlerContext,Smartstore.Core.Content.Media.Imaging.CachedImage,System.IO.Stream)">
            <summary>
            The handler implementation. <paramref name="inputStream"/> should be closed by implementor.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IDownloadService">
            <summary>
            Contract for downloadable files service.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IDownloadService.InsertDownloadAsync(Smartstore.Core.Content.Media.Download,System.IO.Stream,System.String)">
            <summary>
            Inserts a new download entity and assigns <paramref name="stream"/> as downloadable file.
            </summary>
            <param name="download">The new entity to insert.</param>
            <param name="stream">The source file stream</param>
            <param name="fileName">Name of file.</param>
            <returns>The inserted <see cref="T:Smartstore.Core.Content.Media.MediaFileInfo"/> object instance.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IDownloadService.IsDownloadAllowed(Smartstore.Core.Checkout.Orders.OrderItem)">
            <summary>
            Gets a value indicating whether download is allowed for given <paramref name="orderItem"/>.
            </summary>
            <param name="orderItem">Order item to check</param>
            <returns>True if download is allowed; otherwise, false.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IDownloadService.OpenDownloadStream(Smartstore.Core.Content.Media.Download)">
            <summary>
            Opens the download file's stream for reading.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IDownloadService.OpenDownloadStreamAsync(Smartstore.Core.Content.Media.Download)">
            <summary>
            Opens the download file's stream for reading.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.OffloadImageResult">
            <summary>
            Represents the result of an embedded image offload operation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.OffloadImageResult.NumAttempted">
            <summary>
            Number of embedded Base64 images that were found in the input HTML.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.OffloadImageResult.OffloadedFiles">
            <summary>
            The list of successfully offloaded files.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.OffloadImageResult.ResultHtml">
            <summary>
            The resulting HTML after all successfully offloaded embedded images 
            has been replaced with paths to media storage.
            Will be <c>null</c> if no replacement took place.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.OffloadImageResult.NumFailed">
            <summary>
            Number of failed offload operations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.OffloadImageResult.NumSucceded">
            <summary>
            Number of succeeded offload operations.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.OffloadImagesBatchResult">
            <summary>
            Represents the result of an embedded image offload batch operation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.OffloadImagesBatchResult.NumAffectedEntities">
            <summary>
            Total number of all entities containing at least one embedded Base64 image.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.OffloadImagesBatchResult.NumProcessedEntities">
            <summary>
            Number of entities processed during the current batch operation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.OffloadImagesBatchResult.NumAttempted">
            <summary>
            Number of embedded Base64 images that were found in all HTML sources.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.OffloadImagesBatchResult.NumFailed">
            <summary>
            Number of failed offload operations.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.OffloadImagesBatchResult.NumSucceded">
            <summary>
            Number of succeeded offload operations.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IImageOffloder">
            <summary>
            Responsible for the extraction of Base64 images embedded in HTML documents.
            For each embedded image, a <see cref="T:Smartstore.Core.Content.Media.MediaFile"/> instance is created and saved
            to media storage. The embedded image match is then replaced with the path to
            the media file.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IImageOffloder.HasEmbeddedImage(System.String)">
            <summary>
            Checks whether the given <paramref name="html"/> input contains at least
            one embedded Base64 image.
            </summary>
            <param name="html">The input HTML to check.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IImageOffloder.GetDefaultMediaFolderAsync">
            <summary>
            Gets the default destination folder for extracted images (file/outsourced).
            If the folder does not exist yet, it will be created and returned.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IImageOffloder.OffloadEmbeddedImagesAsync(System.String,Smartstore.Core.Content.Media.MediaFolderNode,System.String)">
            <summary>
            Tries to extract embedded Base64 images from a single HTML source.
            </summary>
            <param name="html">The input HTML from which to extract embedded images from.</param>
            <param name="destinationFolder">The destination folder to save media files to.</param>
            <param name="entityTag">An entity tag used as file name prefix for the generated file.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IImageOffloder.BatchOffloadEmbeddedImagesAsync(System.Int32)">
            <summary>
            Tries to extract embedded Base64 images from all possible HTML document sources.
            </summary>
            <param name="take">Max number of entities to process.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.ImageOffloader.EmbeddedImagesRegex">
            <remarks>
            Pattern:<br/>
            <code>src\\s*=\\s*['"](data:image\\/(?&lt;format&gt;[a-z]+);base64,(?&lt;data&gt;[^'"]+))['"]</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "src".<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match '='.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match a character in the set ["'].<br/>
            ○ 1st capture group.<br/>
                ○ Match the string "data:image/".<br/>
                ○ "format" capture group.<br/>
                    ○ Match a character in the set [a-z] atomically at least once.<br/>
                ○ Match the string ";base64,".<br/>
                ○ "data" capture group.<br/>
                    ○ Match a character in the set [^"'] atomically at least once.<br/>
            ○ Match a character in the set ["'].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Content.Media.Imaging.CachedImage">
            <summary>
            Contains information about a cached image
            </summary>
            <remarks>
            An instance of this object is always returned, even when
            the requested image does not physically exists in the storage.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.CachedImage.File">
            <summary>
            The abstracted file object
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.CachedImage.Exists">
            <summary>
            <c>true</c> when the image exists in the cache, <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.CachedImage.FileName">
            <summary>
            The name of the file (without path)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.CachedImage.Extension">
            <summary>
            The file extension (without 'dot')
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.CachedImage.MimeType">
            <summary>
            The filemime type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.CachedImage.PixelSize">
            <summary>
            The image width and height.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.CachedImage.Path">
            <summary>
            The path relative to the cache root folder
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.CachedImage.LastModifiedUtc">
            <summary>
            The last modified date or <c>null</c> if the file does not exist
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.CachedImage.IsRemote">
            <summary>
            Checks whether the file is remote (outside the application's physical root)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Imaging.DefaultImageProcessor.ProcessImageCore(Smartstore.Core.Content.Media.Imaging.ProcessImageQuery,Smartstore.Imaging.IProcessableImage,System.Boolean@)">
            <summary>
            Processes the loaded image. Inheritors should NOT save the image, this is done by the caller. 
            </summary>
            <param name="query">Query</param>
            <param name="image">Image instance</param>
            <param name="fxApplied">
            Should be true if any effect has been applied that potentially changes the image visually (like background color, contrast, sharpness etc.).
            Resize and compression quality does NOT count as FX.
            </param>
        </member>
        <member name="T:Smartstore.Core.Content.Media.Imaging.ImageProcessedEvent">
            <summary>
            Published after processing finishes.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.Imaging.ImageProcessingEvent">
            <summary>
            Published before processing begins, but after the source has been loaded.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.Imaging.ImageQueryCreatedEvent">
            <summary>
            Published after image query has been created and initialized
            by the media middleware with data from HttpContent.Request.QueryString.
            This event implies that a thumbnail is about to be created.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.Imaging.ImageUploadedEvent">
            <summary>
            Published for every uploaded image which does NOT exceed maximum
            allowed size. This gives subscribers the chance to still process the image,
            e.g. to achieve better compression before saving image data to storage. 
            This event does NOT get published when the uploaded image is about to be processed anyway.
            </summary>
            <remarks>
            A subscriber should NOT resize the image. But if you do - and you shouldn't :-) - , don't forget to set <see cref="P:Smartstore.Core.Content.Media.Imaging.ImageUploadedEvent.ResultImage"/>.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.ImageUploadedEvent.Query">
            <summary>
            Contains the source (as byte[], Stream or path string), max size, format and default image quality instructions.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.ImageUploadedEvent.Info">
            <summary>
            Info/metadata of uploaded image.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.ImageUploadedEvent.ResultImage">
            <summary>
            The processing result. If null, the original data
            from <c>Query.Source</c> will be put to storage.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.Imaging.MediaSavedEvent">
            <summary>
            Will be fired after a media upload has been saved.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.MediaSavedEvent.MediaFileInfo">
            <summary>
            The media file info of the saved image.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.MediaSavedEvent.EntityType">
            <summary>
            The type of the entity that the image belongs to.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.Imaging.IImageCache">
            <summary>
            Image cache interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Imaging.IImageCache.PutAsync(Smartstore.Core.Content.Media.Imaging.CachedImage,Smartstore.Imaging.IImage)">
            <summary>
            Adds an image to the cache.
            </summary>
            <param name="cachedImage">An instance of the <see cref="T:Smartstore.Core.Content.Media.Imaging.CachedImage"/> object which is returned by the <c>Get()</c> method.</param>
            <param name="image">The image object.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Imaging.IImageCache.PutAsync(Smartstore.Core.Content.Media.Imaging.CachedImage,System.IO.Stream)">
            <summary>
            Asynchronously adds an image to the cache.
            </summary>
            <param name="cachedImage">An instance of the <see cref="T:Smartstore.Core.Content.Media.Imaging.CachedImage"/> object which is returned by the <c>Get()</c> method.</param>
            <param name="stream">The file input stream.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Imaging.IImageCache.GetAsync(System.Nullable{System.Int32},Smartstore.Core.Content.Media.MediaPathData,Smartstore.Core.Content.Media.Imaging.ProcessImageQuery)">
            <summary>
            Gets an instance of the <see cref="T:Smartstore.Core.Content.Media.Imaging.CachedImage"/> object which contains information about a cached image.
            </summary>
            <param name="mediaFileId">The id of the file to resolve a thumbnail for.</param>
            <param name="pathData">The path data.</param>
            <param name="query">The image processing query.</param>
            <returns>An instance of the <see cref="T:Smartstore.Core.Content.Media.Imaging.CachedImage"/> object</returns>
            <remarks>If the requested thumbnail does not exist in the cache, the value of the <c>Exists</c> property will be <c>false</c>.</remarks>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Imaging.IImageCache.DeleteAsync(Smartstore.Core.Content.Media.MediaFile)">
            <summary>
            Deletes all cached images for the given <see cref="T:Smartstore.Core.Content.Media.MediaFile"/>
            </summary>
            <param name="picture">The <see cref="T:Smartstore.Core.Content.Media.MediaFile"/> for which to delete cached images</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Imaging.IImageCache.ClearAsync">
            <summary>
            Deletes all cached images (nukes all files in the cache folder)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Imaging.IImageCache.RefreshInfoAsync(Smartstore.Core.Content.Media.Imaging.CachedImage)">
            <summary>
            Refreshes the file info.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Imaging.IImageCache.CacheStatisticsAsync">
            <summary>
            Calculates statistics about the image cache data.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.Imaging.IImageProcessor">
            <summary>
            A service interface responsible for processing images.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.IImageProcessor.Factory">
            <summary>
            The image factory adapter used to load and process images.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Imaging.IImageProcessor.ProcessImageAsync(Smartstore.Core.Content.Media.Imaging.ProcessImageQuery,System.Boolean)">
            <summary>
            Processes an image
            </summary>
            <param name="query">Resize request</param>
            <param name="disposeOutput">Whether to dispose the output stream when <see cref="T:Smartstore.Core.Content.Media.Imaging.ProcessImageResult"/> instance gets disposed.</param>
            <returns>The resizing result encapsulated in <see cref="T:Smartstore.Core.Content.Media.Imaging.ProcessImageResult"/> type</returns>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.IImageProcessor.TotalProcessingTimeMs">
            <summary>
            Gets the cumulative total processing time since app start in miliseconds
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.ProcessImageQuery.Source">
            <summary>
            The source image's physical path, app-relative virtual path, or a Stream, byte array, Image or IFile instance.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.ProcessImageQuery.DisposeSource">
            <summary>
            Whether to dispose the source stream after processing completes
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.ProcessImageQuery.ExecutePostProcessor">
            <summary>
            Whether to execute an applicable post processor which
            can reduce the resulting file size drastically, but also
            can slow down processing time.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.ProcessImageQuery.ScaleMode">
            <summary>
            max (default) | boxpad | crop | min | pad | stretch
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.ProcessImageQuery.AnchorPosition">
            <summary>
            center (default) | top | bottom | left | right | top-left | top-right | bottom-left | bottom-right
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.ProcessImageQuery.Format">
            <summary>
            Gets or sets the output file format either as a string ("png", "jpg", "gif" and "svg"),
            or as a format object instance.
            When format is not specified, the original format of the source image is used (unless it is not a web safe format - jpeg is the fallback in that scenario).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Imaging.ProcessImageResult.HasAppliedVisualEffects">
            <summary>
            Is <c>true</c> if any effect has been applied that changed the image visually (like background color, contrast, sharpness etc.).
            Resize and compression quality does NOT count as FX.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IMediaAware">
            <summary>
            Represents an entity with media storage.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaAware.MediaStorageId">
            <summary>
            Gets or sets the media storage identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaAware.MediaStorage">
            <summary>
            Gets or sets the media storage.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaAware.Size">
            <summary>
            Gets or sets the file size in bytes.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IMediaFile">
            <summary>
            Represents an entity with a media file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaFile.MediaFileId">
            <summary>
            Gets or sets the media identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaFile.MediaFile">
            <summary>
            Gets or sets the media file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaFile.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IMediaFileSystem">
            <summary>
            Storage abstraction for media files.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaFileSystem.StorageConfiguration">
            <summary>
            Contains media storage and path configuration.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaFileSystem.IsCloudStorage">
            <summary>
            Checks whether the underlying storage is remote, like 'Azure' for example. 
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IMediaService">
            <summary>
            Media service interface.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaService.StorageProvider">
            <summary>
            Gets the underlying storage provider
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaService.ImagePostProcessingEnabled">
            <summary>
            Gets or sets a value indicating whether image post-processing is enabled.
            It is recommended to turn this off during long-running processes - like product imports -
            as post-processing can heavily decrease processing time.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaService.CountFilesAsync(Smartstore.Core.Content.Media.MediaSearchQuery)">
            <summary>
            Determines the number of files that match the filter criteria in <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">The query that defines the criteria.</param>
            <returns>The number of matching files.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaService.CountFilesGroupedAsync(Smartstore.Core.Content.Media.MediaFilesFilter)">
            <summary>
            Determines the number of files that match the filter criteria in <paramref name="filter"/> and groups them by folders.
            </summary>
            <param name="filter">The filter that defines the criteria.</param>
            <returns>The grouped file counts (all, trash, unassigned, transient, all folders as dictionary)</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaService.SearchFilesAsync(Smartstore.Core.Content.Media.MediaSearchQuery,System.Func{System.Linq.IQueryable{Smartstore.Core.Content.Media.MediaFile},System.Linq.IQueryable{Smartstore.Core.Content.Media.MediaFile}},Smartstore.Core.Content.Media.MediaLoadFlags)">
            <summary>
            Searches files that match the filter criteria in <paramref name="query"/>.
            </summary>
            <param name="query">The query that defines the criteria.</param>
            <param name="queryModifier">An optional modifier function for the LINQ query that was internally derived from <paramref name="query"/>. Can be null.</param>
            <param name="flags">Flags that affect the loading behaviour (eager-loading, tracking etc.)</param>
            <returns>The search result.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaService.FindEqualFile(System.IO.Stream,System.Collections.Generic.IEnumerable{Smartstore.Core.Content.Media.MediaFile},System.Boolean,Smartstore.Core.Content.Media.MediaFile@)">
            <summary>
            Tries to find an equal file by comparing the source stream to a list of files.
            </summary>
            <param name="source">The source stream to find a match for.</param>
            <param name="files">The sequence of files to seek within for duplicates.</param>
            <param name="leaveOpen">Whether to leave the <paramref name="source"/>source stream</param> open.
            <param name="equalFile">A file from the <paramref name="files"/> collection whose content is equal to <paramref name="source"/>.</param>
            <returns><c>true</c> when a duplicate file was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaService.FindEqualFileAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{Smartstore.Core.Content.Media.MediaFile},System.Boolean)">
            <summary>
            Tries to find an equal file by comparing the source stream to a list of files.
            </summary>
            <param name="source">The source stream to find a match for.</param>
            <param name="files">The sequence of files to seek within for duplicates.</param>
            <param name="leaveOpen">Whether to leave the <paramref name="source"/>source stream</param> open.
            <returns>
            <c>true</c> when a duplicate file was found, <c>false</c> otherwise.
            If true, a file from the <paramref name="files"/> collection whose content is equal to <paramref name="source"/> is the <c>out</c> parameter.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaService.EnsureMetadataResolvedAsync(System.String)">
            <summary>
            Resolves metadata for any files that are missing metadata.
            </summary>
            <param name="folderPath">Optional folder path. If <c>null</c>, all files with empty names will be processed.</param>
            <returns>Number of processed files.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaService.BatchSaveFilesAsync(Smartstore.Core.Content.Media.FileBatchSource[],Smartstore.Core.Content.Media.MediaFolderNode,System.Boolean,Smartstore.Core.Content.Media.DuplicateFileHandling,System.Threading.CancellationToken)">
            <summary>
            Saves multiple files batched.
            </summary>
            <param name="sources">The source files to save. The source streams will be disposed after batch completion.</param>
            <param name="destinationFolder">The destination folder to save files to.</param>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IMediaStorageConfiguration">
            <summary>
            Contains media storage and path configuration.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaStorageConfiguration.PublicPath">
            <summary>
            Gets the public base path to the media storage used to generate URLs for output HTML.
            e.g.: "media" (default), "static", "storage/files" etc. 
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaStorageConfiguration.StoragePath">
            <summary>
            Gets the storage path for media files either as app local relative path or
            as a fully qualified physical path to a shared location. E.g.:
            <list type="bullet">
                <item>"Media" points to the subfolder named "Media" in the application root.</item>
                <item>"F:\SharedMedia" points to a (mapped network) drive.</item>
                <item>"\\Server1\SharedMedia" points to a network drive.</item>
            </list>
            <para>Default is <c>App_Data/Tenants/{Tenant}/Media</c></para>
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaStorageConfiguration.StoragePathIsAbsolute">
            <summary>
            Checks whether <see cref="P:Smartstore.Core.Content.Media.IMediaStorageConfiguration.StoragePath"/> is a fully qualified physical path (e.g. 'D:\SharedMedia', \\MyServer\SharedMedia etc.)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaStorageConfiguration.RootPath">
            <summary>
            Gets the storage root physical path for media files.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.IMediaStorageConfiguration.IsCloudStorage">
            <summary>
            Checks whether the underlying storage is remote, like 'Azure' for example. 
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IMediaUrlGenerator">
            <summary>
            Generates URLs for media files
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaUrlGenerator.GenerateUrl(Smartstore.Core.Content.Media.MediaFileInfo,Microsoft.AspNetCore.Http.QueryString,System.String,System.Boolean)">
            <summary>
            Generates a public URL for a media file
            </summary>
            <param name="file">The file to create a URL for</param>
            <param name="query">URL query to append.</param>
            <param name="host">
                Store host for an absolute URL that also contains scheme and host parts. 
                <c>null</c>: tries to resolve host automatically based on <see langword="Store.ContentDeliveryNetwork"/> or <see cref="P:Smartstore.Core.Content.Media.MediaSettings.AutoGenerateAbsoluteUrls"/>.
                <c>String.Empty</c>: bypasses automatic host resolution and does NOT prepend host to path.
                <c>Any string</c>: host name to use explicitly.
            </param>
            <param name="doFallback">
            Specifies behaviour in case URL generation fails.
                <c>false</c>: return <c>null</c>.
                <c>true</c>: return URL to a fallback image which is <c>~/Content/images/default-image.png</c> by default but can be modified with hidden setting <c>Media.DefaultImageName</c>
            </param>
            <returns>The passed file's public URL.</returns>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Path">
            <summary>
            Gets the file path.
            </summary>
            <example>catalog/my-picture.jpg</example>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Version">
            <summary>
            Gets <see cref="P:Smartstore.Core.Content.Media.MediaFileInfo.LastModified"/> as Unix time for cache busting purposes.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Url">
            <summary>
            Gets the relative file URL.
            </summary>
            <example>/media/6/catalog/my-picture.jpg</example>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.ThumbUrl">
            <summary>
            Gets the relative thumbnail URL.
            </summary>
            <example>/media/6/catalog/my-picture.jpg?size=256</example>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Exists">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Microsoft#Extensions#FileProviders#IFileInfo#IsDirectory">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.LastModified">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Length">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Microsoft#Extensions#FileProviders#IFileInfo#PhysicalPath">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Microsoft#Extensions#FileProviders#IFileInfo#CreateReadStream">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFileEntry#FileSystem">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFileEntry#SubPath">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFileEntry#IsSymbolicLink(System.String@)">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Media.MediaFileInfo.Directory">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.OpenRead">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.OpenReadAsync">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFileEntry#Delete">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFileEntry#DeleteAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFile#GetPixelSize">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFile#CopyTo(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFile#CopyToAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFileEntry#MoveTo(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFileEntry#MoveToAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFile#Create(System.IO.Stream,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.MediaFileInfo.Smartstore#IO#IFile#CreateAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Content.Media.MediaLegacyMiddleware">
            <summary>
            Media middleware that handles redirection from legacy media URLs to main media route.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.MediaServiceFileSystemAdapter">
            <summary>
            A media service implementation that emulates file system.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IMediaTypeResolver">
            <summary>
            Media type resolver contract.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaTypeResolver.Resolve(System.String,System.String)">
            <summary>
            Resolves the conceptual media type for a given file extension or mime type.
            </summary>
            <param name="extension">The file extension (with dot).</param>
            <param name="mimeType">Used to map to an extension if <paramref name="extension"/> parameter is null or empty.</param>
            <returns>The media type or <see cref="F:Smartstore.Core.Content.Media.MediaType.Binary"/> as fallback.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaTypeResolver.ParseTypeFilter(System.String)">
            <summary>
            Parses and expands a given type filter, returning a distinct list of all suitable file extensions.
            If <paramref name="typeFilter"/> is empty or '*', all supported file extensions are returned.
            </summary>
            <param name="typeFilter">A comma separated list of either file extensions and/or media type names, e.g.: "image,.mp4,audio,.pdf". Extensions must start with a dot.</param>
            <returns>All suitable file extensions.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaTypeResolver.ParseTypeFilter(System.String[])">
            <summary>
            Parses and expands a given type filter, returning a distinct list of all suitable file extensions.
            </summary>
            <param name="typeFilter">A list of either file extensions and/or media type names, e.g.: [ "image", ".mp4", "audio", ".pdf" ]. Extensions must start with a dot.</param>
            <returns>All suitable file extensions.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaTypeResolver.GetExtensionMediaTypeMap">
            <summary>
            Get the cached "file extension to media type name" map.
            "Key" is the dot-less file extension and "Value" is the corresponding media type name.
            </summary>
            <returns>The cached dictionary</returns>
        </member>
        <member name="T:Smartstore.Core.Content.Media.SampleMediaUtility">
            <summary>
            Utility class that helps to load and assign sample media files during
            app or module installation.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.DatabaseMediaStorageProvider.ApplyBlobAsync(Smartstore.Core.Content.Media.IMediaAware,Smartstore.Core.Content.Media.Storage.MediaStorageItem,System.Boolean)">
            <summary>
            Applies given media storage <paramref name="item"/> to <paramref name="media"/> entity as blob.
            </summary>
            <param name="media">Media item</param>
            <param name="item">The source item</param>
            <param name="save">Whether to commit changes to <paramref name="media"/> entity to database immediately.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaMover.MoveAsync(Smartstore.Engine.Modularity.Provider{Smartstore.Core.Content.Media.Storage.IMediaStorageProvider},Smartstore.Engine.Modularity.Provider{Smartstore.Core.Content.Media.Storage.IMediaStorageProvider},System.Threading.CancellationToken)">
            <summary>
            Moves media items from one storage provider to another
            </summary>
            <param name="sourceProvider">The source media storage provider</param>
            <param name="targetProvider">The target media storage provider</param>
            <returns><c>true</c> success, <c>failure</c></returns>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaReceiver.ReceiveAsync(Smartstore.Core.Content.Media.Storage.MediaMoverContext,Smartstore.Core.Content.Media.MediaFile,System.IO.Stream)">
            <summary>
            Data received by the source provider to be stored by the target provider
            </summary>
            <param name="context">Media storage mover context</param>
            <param name="mediaFile">Media file item</param>
            <param name="stream">Source stream</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaReceiver.OnCompletedAsync(Smartstore.Core.Content.Media.Storage.MediaMoverContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Called when batch media moving completes
            </summary>
            <param name="context">Media storage mover context</param>
            <param name="succeeded">Whether media moving succeeded</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaSender.MoveToAsync(Smartstore.Core.Content.Media.Storage.IMediaReceiver,Smartstore.Core.Content.Media.Storage.MediaMoverContext,Smartstore.Core.Content.Media.MediaFile)">
            <summary>
            Moves a media item to the target provider
            </summary>
            <param name="target">Target provider</param>
            <param name="context">Media storage mover context</param>
            <param name="mediaFile">Media file item</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaSender.OnCompletedAsync(Smartstore.Core.Content.Media.Storage.MediaMoverContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Called when batch media moving completes
            </summary>
            <param name="context">Media storage mover context</param>
            <param name="succeeded">Whether media moving succeeded</param>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Storage.IMediaStorageProvider.IsCloudStorage">
            <summary>
            Gets a value indicating whether the provider saves data in a remote cloud storage (e.g. Azure)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaStorageProvider.GetLengthAsync(Smartstore.Core.Content.Media.MediaFile)">
            <summary>
            Gets the size of the media item in bytes.
            </summary>
            <param name="mediaFile">Media file item</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaStorageProvider.OpenRead(Smartstore.Core.Content.Media.MediaFile)">
            <summary>
            Opens the media item for reading
            </summary>
            <param name="mediaFile">Media file item</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaStorageProvider.OpenReadAsync(Smartstore.Core.Content.Media.MediaFile)">
            <inheritdoc cref="M:Smartstore.Core.Content.Media.Storage.IMediaStorageProvider.OpenRead(Smartstore.Core.Content.Media.MediaFile)"/>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaStorageProvider.LoadAsync(Smartstore.Core.Content.Media.MediaFile)">
            <summary>
            Asynchronously loads media item data
            </summary>
            <param name="mediaFile">Media file item</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaStorageProvider.SaveAsync(Smartstore.Core.Content.Media.MediaFile,Smartstore.Core.Content.Media.Storage.MediaStorageItem)">
            <summary>
            Asynchronously saves media item data
            </summary>
            <param name="mediaFile">Media file item</param>
            <param name="item">The source item</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaStorageProvider.RemoveAsync(Smartstore.Core.Content.Media.MediaFile[])">
            <summary>
            Remove media storage item(s)
            </summary>
            <param name="mediaFiles">Media file items</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.Storage.IMediaStorageProvider.ChangeExtensionAsync(Smartstore.Core.Content.Media.MediaFile,System.String)">
            <summary>
            Changes the extension of the stored file if the provider supports
            </summary>
            <param name="mediaFile">Media file item</param>
            <param name="extension">The nex file extension</param>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Storage.MediaMoverContext.Source">
            <summary>
            The system name of the source provider
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Storage.MediaMoverContext.Target">
            <summary>
            The system name of the target provider
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Storage.MediaMoverContext.MovedItems">
            <summary>
            Current number of moved media items
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Storage.MediaMoverContext.AffectedFiles">
            <summary>
            Paths of affected media files
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Media.Storage.MediaMoverContext.CustomProperties">
            <summary>
            Use this dictionary for any custom data required along the move operation
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.Tasks.TransientMediaClearTask">
            <summary>
            Represents a task for deleting transient media from the database
            (files and downloads which have been uploaded but never assigned to an entity).
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Media.IMediaTrackDetector">
            <summary>
            Responsible for detecting assignments between entities and media files.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaTrackDetector.MatchAlbum(System.String)">
            <summary>
            Should return <see langword="true"/> if the implementation class handles 
            track detection for given <paramref name="albumName"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaTrackDetector.ConfigureTracks(System.String,Smartstore.Core.Content.Media.TrackedMediaPropertyTable)">
            <summary>
            Used to announce foreign key properties for media files in any entity type.
            This method is called only once on app startup to feed the media tracker database hook
            with information about how to react to entity changes (Track, Untrack etc.)
            </summary>
            <param name="albumName">The name of album to configure tracks for.</param>
            <param name="table">The configuration builder.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Media.IMediaTrackDetector.DetectAllTracksAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Detects all tracks between entities and media files.
            </summary>
            <param name="albumName">The name of album to detect tracks for.</param>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.CatalogMenuInvalidator">
            <summary>
            Invalidates all menus that contain the <see cref="T:Smartstore.Core.Content.Menus.CatalogMenuProvider"/>
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.MenuEntity">
            <summary>
            Represents a menu.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuEntity.SystemName">
            <summary>
            Gets or sets the system name. It identifies the menu.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuEntity.IsSystemMenu">
            <summary>
            Gets or sets the value indicating whether this menu is deleteable by a user.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuEntity.Template">
            <summary>
            Gets or sets the menu template name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuEntity.WidgetZone">
            <summary>
            Gets or sets the widget zone name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuEntity.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuEntity.Published">
            <summary>
            Gets or sets a value indicating whether the menu is published.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuEntity.DisplayOrder">
            <summary>
            Gets or sets the order for widget registration.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuEntity.LimitedToStores">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuEntity.SubjectToAcl">
            <summary>
            Gets or sets a value indicating whether the entity is subject to ACL.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuEntity.Items">
            <summary>
            /// Gets or sets the menu items.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuItem.Smartstore#Collections#IKeyedNode#GetNodeKey">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItem.EntityId">
            <summary>
            If this menu item refers to an entity, the id of the backed entity (like category, products e.g.)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItem.MenuItemId">
            <summary>
            If this menu item originates from the database, the id of the <see cref="T:Smartstore.Core.Content.Menus.MenuItemEntity"/> entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItem.MenuId">
            <summary>
            If this menu item originates from the database, the id of the containing <see cref="T:Smartstore.Core.Content.Menus.MenuEntity"/> entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItem.ElementsCount">
            <summary>
            The total count of contained elements (like the count of products within a category)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItem.ElementsCountResolved">
            <summary>
            Gets or sets a value indicating whether <see cref="P:Smartstore.Core.Content.Menus.MenuItem.ElementsCount"/> has been resolved already.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItem.Id">
            <summary>
            Unique identifier.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.MenuItemEntity">
            <summary>
            Represents a menu item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.MenuId">
            <summary>
            Gets or sets the menu identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.Menu">
            <summary>
            Gets the menu.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.ParentItemId">
            <summary>
            Gets or sets the parent menu item identifier. 0 if the item has no parent.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.ProviderName">
            <summary>
            Gets or sets the provider name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.Model">
            <summary>
            Gets or sets the model.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.ShortDescription">
            <summary>
            Gets or sets the short description. It is used for the link title attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.PermissionNames">
            <summary>
            Gets or sets permission names.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.Published">
            <summary>
            Gets or sets a value indicating whether the menu item is published.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.DisplayOrder">
            <summary>
            Gets or sets the display order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.BeginGroup">
            <summary>
            Gets or sets a value indicating whether the menu item has a divider or a group header.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.ShowExpanded">
            <summary>
            If selected and this menu item has children, the menu will initially appear expanded.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.NoFollow">
            <summary>
            Gets or sets the no-follow link attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.NewWindow">
            <summary>
            Gets or sets the blank target link attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.Icon">
            <summary>
            Gets or sets fontawesome icon class.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.Style">
            <summary>
            Gets or sets fontawesome icon style.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.IconColor">
            <summary>
            Gets or sets fontawesome icon color.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.HtmlId">
            <summary>
            Gets or sets HTML id attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.CssClass">
            <summary>
            Gets or sets the CSS class.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.LimitedToStores">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemEntity.SubjectToAcl">
            <summary>
            Gets or sets a value indicating whether the entity is subject to ACL.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.NavigationItem.GetCombinedAttributes">
            <summary>
            Merges attributes of <see cref="P:Smartstore.Core.Content.Menus.NavigationItem.HtmlAttributes"/> and <see cref="P:Smartstore.Core.Content.Menus.NavigationItem.LinkHtmlAttributes"/> into one combined dictionary.
            </summary>
            <returns>New attribute dictionary instance with combined attributes.</returns>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.NavigationItem.HasRoute">
            <summary>
            Checks whether action/controller or routeName or url has been specified.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.NavigationItem.IsVoid">
            <summary>
            Checks whether url has been specified with '#' or 'javascript:void()' or empty string.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuItemExtensions.GetNodePathState(Smartstore.Collections.TreeNode{Smartstore.Core.Content.Menus.MenuItem},System.Collections.Generic.IEnumerable{Smartstore.Collections.TreeNode{Smartstore.Core.Content.Menus.MenuItem}})">
            <summary>
            Gets the state of <c>node</c> within the passed <c>currentPath</c>, which is the navigation breadcrumb.
            </summary>
            <param name="node">The node to get the state for</param>
            <param name="currentPath">The current path/breadcrumb</param>
            <returns>
            	<see cref="T:Smartstore.Core.Content.Menus.NodePathState" /> enumeration indicating whether the node is in the current path (<c>Selected</c> or <c>Expanded</c>)
            	and whether it has children (<c>Parent</c>)
            </returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuItemExtensions.GetNodePathState(Smartstore.Collections.TreeNode{Smartstore.Core.Content.Menus.MenuItem},System.Collections.Generic.IList{Smartstore.Core.Content.Menus.MenuItem})">
            <summary>
            Gets the state of <c>node</c> within the passed <c>currentPath</c>, which is the navigation breadcrumb.
            </summary>
            <param name="node">The node to get the state for</param>
            <param name="currentPath">The current path/breadcrumb</param>
            <returns>
            	<see cref="T:Smartstore.Core.Content.Menus.NodePathState" /> enumeration indicating whether the node is in the current path (<c>Selected</c> or <c>Expanded</c>)
            	and whether it has children (<c>Parent</c>)
            </returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuItemExtensions.ApplyRouteData(Smartstore.Collections.TreeNode{Smartstore.Core.Content.Menus.MenuItem},System.String)">
            <summary>
            Applies serialized route informations to a tree node.
            </summary>
            <param name="node">Tree node.</param>
            <param name="data">JSON serialized route data.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuItemExtensions.GetTreeAsync(System.Collections.Generic.IEnumerable{Smartstore.Core.Content.Menus.MenuItemEntity},System.String,System.Collections.Generic.IDictionary{System.String,System.Lazy{Smartstore.Core.Content.Menus.IMenuItemProvider,Smartstore.Core.Content.Menus.MenuItemProviderMetadata}})">
            <summary>
            Converts a list of menu items into a tree.
            </summary>
            <param name="origin">Origin of the tree.</param>
            <param name="items">List of menu items.</param>
            <param name="itemProviders">Menu item providers.</param>
            <returns>Tree of menu items.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Content.Menus.MenuEntity},System.String,System.Nullable{System.Boolean},System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Applies standard filter for <see cref="T:Smartstore.Core.Content.Menus.MenuEntity"/>.
            </summary>
            <param name="systemName">Applies filter by <see cref="P:Smartstore.Core.Content.Menus.MenuEntity.SystemName"/>.</param>
            <param name="isSystemMenu">Applies filter by <see cref="P:Smartstore.Core.Content.Menus.MenuEntity.IsSystemMenu"/>.</param>
            <param name="storeId">Store identifier to apply filter by store restriction.</param>
            <param name="customerRoleIds">Customer roles identifiers to apply filter by ACL restriction.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Content.Menus.MenuEntity.Published"/>.</param>
            <returns><see cref="T:Smartstore.Core.Content.Menus.MenuEntity"/> query.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuQueryExtensions.ApplyMenuItemFilter(System.Linq.IQueryable{Smartstore.Core.Content.Menus.MenuEntity},System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Applies filter for <see cref="T:Smartstore.Core.Content.Menus.MenuItemEntity"/>.
            </summary>
            <param name="storeId">Store identifier to apply filter by store restriction.</param>
            <param name="customerRoleIds">Customer roles identifiers to apply filter by ACL restriction.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Content.Menus.MenuItemEntity.Published"/>.</param>
            <returns><see cref="T:Smartstore.Core.Content.Menus.MenuItemEntity"/> query.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuQueryExtensions.ApplySorting(System.Linq.IQueryable{Smartstore.Core.Content.Menus.MenuEntity})">
            <summary>
            Applies order by <see cref="P:Smartstore.Core.Content.Menus.MenuEntity.DisplayOrder"/>, then by <see cref="P:Smartstore.Core.Content.Menus.MenuEntity.SystemName"/>,
            then by <see cref="P:Smartstore.Core.Content.Menus.MenuEntity.Title"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuUrlHelperExtensions.TopicAsync(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String,System.Boolean)">
            <summary>
            Resolves a link to a topic page.
            </summary>
            <param name="systemName">The system name of the topic.</param>
            <returns>Link</returns>
            <remarks>
            This method returns an empty string in following cases:
            - the requested page does not exist.
            - the current user has no permission to acces the page.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuUrlHelperExtensions.TopicLabelAsync(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)">
            <summary>
            Resolves a link label for a topic page.
            The label is either the page short title or title.
            </summary>
            <param name="systemName">The system name of the topic.</param>
            <returns>Label</returns>
            <remarks>
            This method returns an empty string if the requested page does not exist.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuUrlHelperExtensions.EntityAsync(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)">
            <summary>
            Resolves a link to a system internal entity like product, topic, category or manufacturer.
            </summary>
            <param name="expression">A link expression as supported by the <see cref="T:Smartstore.Core.Content.Menus.ILinkResolver"/></param>
            <returns>Link</returns>
            <remarks>
            This method returns an empty string in following cases:
            - the requested entity does not exist.
            - the current user has no permission to acces the entity.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuUrlHelperExtensions.EntityLabelAsync(Microsoft.AspNetCore.Mvc.IUrlHelper,System.String)">
            <summary>
            Resolves a link label for a system internal entity like product, topic, category or manufacturer.
            The label is either the entity short title, title or name, whichever is applicable.
            </summary>
            <param name="expression">A link expression as supported by the <see cref="T:Smartstore.Core.Content.Menus.ILinkResolver"/></param>
            <returns>Label</returns>
            <remarks>
            This method returns an empty string if the requested entity does not exist.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuFilterAttribute.MenuFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            Find the selected node in any registered menu
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuFilterAttribute.MenuFilter.ProcessUserMenusAsync">
            <summary>
            Registers actions to render user menus in widget zones.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.DatabaseMenu">
            <summary>
            A generic implementation of <see cref="T:Smartstore.Core.Content.Menus.IMenu" /> which represents a <see cref="T:Smartstore.Core.Content.Menus.MenuEntity"/> entity.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.IMenu">
            <summary>
            A hierarchical navigation menu.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.IMenu.Name">
            <summary>
            Gets the menu system name (e.g. main, footer, service, admin etc.)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenu.GetRootNodeAsync">
            <summary>
            Gets the root node of the menu.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.IMenu.ApplyPermissions">
            <summary>
            Whether menu items should be hidden based on permission names.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenu.ResolveElementCountAsync(Smartstore.Collections.TreeNode{Smartstore.Core.Content.Menus.MenuItem},System.Boolean)">
            <summary>
            Resolves the contained elements count (e.g. the products count on a category page).
            </summary>
            <param name="curNode">The current node.</param>
            <param name="deep"><c>false</c> resolves counts for direct children of <paramref name="curNode"/> only, <c>true</c> traverses the whole sub-tree.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenu.ResolveCurrentNodeAsync(Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            Resolves the current node.
            </summary>
            <param name="actionContext">Action context.</param>
            <returns>The current menu item node.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenu.GetAllCachedMenus">
            <summary>
            Gets all cached trees from the underlying cache storage.
            </summary>
            <returns>A dictionary of trees (Key: cache key, Value: tree instance).</returns>
            <remarks>
            Multiple trees are created per menu depending
            on language, customer-(roles), store and other parameters.
            This method does not create anything, but returns all 
            previously processed and cached menu variations.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenu.ClearCacheAsync">
            <summary>
            Removes the menu from the application cache.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.IMenuService">
            <summary>
            Main service for menus.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenuService.GetMenuAsync(System.String)">
            <summary>
            Gets a menu instance
            </summary>
            <param name="name">Name of a code-based or a persisted user menu.</param>
            <returns>Menu instance</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenuService.GetRootNodeAsync(System.String)">
            <summary>
            Gets the root node of a menu
            </summary>
            <param name="menuName">Name of a code-based or a persisted user menu.</param>
            <returns>The root menu item node.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenuService.ResolveElementCountsAsync(System.String,Smartstore.Collections.TreeNode{Smartstore.Core.Content.Menus.MenuItem},System.Boolean)">
            <summary>
            Resolves all element counts for a tree subset, e.g. resolves the number of products in categories.
            </summary>
            <param name="menuName">Name of a code-based or a persisted user menu.</param>
            <param name="curNode">The node to begin resolution.</param>
            <param name="deep"><c>true</c>: process ALL children of <paramref name="curNode"/>, <c>false:</c> process only direct children of <paramref name="curNode"/>.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenuService.ClearCacheAsync(System.String)">
            <summary>
            Removes all cached menu variations for <paramref name="menuName"/>
            </summary>
            <param name="menuName">Name of a code-based or a persisted user menu.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenuStorage.GetUserMenuInfosAsync(System.Collections.Generic.IEnumerable{Smartstore.Core.Identity.CustomerRole},System.Nullable{System.Int32})">
            <summary>
            Gets cached infos about all user menus.
            </summary>
            <param name="roles">Customer roles to check access for. <c>null</c> to use current customer's roles.</param>
            <param name="storeId">Store identifier. If <c>null</c>, identifier will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
            <returns>Menu infos.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenuStorage.MenuExistsAsync(System.String)">
            <summary>
            Checks whether the menu exists.
            </summary>
            <param name="systemName">Menu system name <see cref="P:Smartstore.Core.Content.Menus.MenuEntity.SystemName"/>.</param>
            <returns><c>true</c> the menu exists, <c>false</c> the menu doesn't exist.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenuStorage.GetMenuSystemNamesAsync(System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Gets the system names of all published menus.
            </summary>
            <param name="ensureCreated">Bypasses cache and returns entities from database.</param>
            <param name="storeId">Store identifier. If <c>null</c>, identifier will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenuStorage.DeleteMenuItemAsync(Smartstore.Core.Content.Menus.MenuItemEntity,System.Boolean)">
            <summary>
            Deletes a menu item.
            </summary>
            <param name="item">Menu item entity.</param>
            <param name="deleteChilds">Specifies whether to delete all child items too.</param>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.ILinkProvider">
            <summary>
            Provides link translator and UI builder metadata for custom link expressions.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.ILinkProvider.TranslateAsync(Smartstore.Core.Content.Menus.LinkExpression,System.Int32,System.Int32)">
            <summary>
            Translates a link expression.
            </summary>
            <param name="expression">
            The parsed link expression.
            </param>
            <param name="languageId">Language identifier. 0 = working language.</param>
            <param name="storeId">Store identifier. 0 = current store.</param>
            <returns><see cref="T:Smartstore.Core.Content.Menus.LinkTranslationResult"/> instance or <c>null</c></returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.ILinkProvider.GetBuilderMetadata">
            <summary>
            Gets metadata of all links expression patterns supported by this provider.
            </summary>
            <returns>List of <see cref="T:Smartstore.Core.Content.Menus.LinkBuilderMetadata"/> instances.</returns>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.ILinkResolver">
            <summary>
            Provides methods to create and resolve link expressions.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.ILinkResolver.GetBuilderMetadata">
            <summary>
            Gets metadata of all links expression patterns currently supported.
            </summary>
            <returns>List of <see cref="T:Smartstore.Core.Content.Menus.LinkBuilderMetadata"/> instances.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.ILinkResolver.ResolveAsync(Smartstore.Core.Content.Menus.LinkExpression,System.Collections.Generic.IEnumerable{Smartstore.Core.Identity.CustomerRole},System.Int32,System.Int32)">
            <summary>
            Resolves a link expression.
            </summary>
            <param name="expression">
            The parsed link expression.
            </param>
            <param name="roles">Customer roles to check access for. <c>null</c> to use current customer's roles.</param>
            <param name="languageId">Language identifier. 0 to use current working language.</param>
            <param name="storeId">Store identifier. 0 to use current store.</param>
            <returns>LinkResolutionResult</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.ILinkResolver.InvalidateLink(System.String,System.Object)">
            <summary>
            Removes all links for given <paramref name="schema"/> and <paramref name="target"/> from memory cache.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.ILinkResolverExtensions.ResolveAsync(Smartstore.Core.Content.Menus.ILinkResolver,System.String,System.Collections.Generic.IEnumerable{Smartstore.Core.Identity.CustomerRole},System.Int32,System.Int32)">
            <inheritdoc cref="M:Smartstore.Core.Content.Menus.ILinkResolver.ResolveAsync(Smartstore.Core.Content.Menus.LinkExpression,System.Collections.Generic.IEnumerable{Smartstore.Core.Identity.CustomerRole},System.Int32,System.Int32)"/>
            <param name="expression">
            Link expression, e.g. product:123, category:234, topic:2, topic:aboutus etc.
            Supported schemas are product, category, manufacturer, topic, url and file. Target of topic can
            either be the topic id or system name. Custom providers may provide more schemas.
            </param>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.LinkExpression">
            <summary>
            The parsed representation of a link expression.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Content.Menus.LinkResolver.LinkCacheKey">
            <remarks>
            {0} : Expression w/o q
            {1} : LanguageId
            {2} : Store
            {3} : RolesIdent
            </remarks>
        </member>
        <member name="F:Smartstore.Core.Content.Menus.MenuBase.MENU_KEY">
            <summary>
            Key for Menu caching
            </summary>
            <remarks>
            {0} : Menu name
            {1} : Menu specific key suffix
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.IMenuItemProvider.AppendAsync(Smartstore.Core.Content.Menus.MenuItemProviderRequest)">
            <summary>
            Converts a <see cref="T:Smartstore.Core.Content.Menus.MenuItemEntity"/> object and appends it to the parent tree node.
            </summary>
            <param name="request">Contains information about the request to the provider.</param>
            <returns>Appended node.</returns>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemProviderRequest.Origin">
            <summary>
            Represents the origin for the creation of the tree.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemProviderRequest.Parent">
            <summary>
            Node to which items are to be appended.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemProviderRequest.Entity">
            <summary>
            Entity that is converted to a menu item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemProviderRequest.IsEditMode">
            <summary>
            Inidicates whether the request is for backend menu editing.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.IMenuProvider">
            <summary>
            Enables (plugins) developers to inject menu items to menus.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.IMenuProvider.MenuName">
            <summary>
            Gets the menu name to inject the menu items into (e.g. admin, catalog etc.)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuItemProviderBase.ConvertToMenuItem(Smartstore.Core.Content.Menus.MenuItemProviderRequest)">
            <summary>
            Converts the passed menu item entity to a <see cref="T:Smartstore.Core.Content.Menus.MenuItem"/> object.
            </summary>
            <param name="request">The entity to convert.</param>
            <returns>Menu item.</returns>
        </member>
        <member name="M:Smartstore.Core.Content.Menus.MenuItemProviderBase.ApplyLinkAsync(Smartstore.Core.Content.Menus.MenuItemProviderRequest,Smartstore.Collections.TreeNode{Smartstore.Core.Content.Menus.MenuItem})">
            <summary>
            Generates and applies the link to the converted <see cref="T:Smartstore.Core.Content.Menus.MenuItem"/> object.
            </summary>
            <param name="request">Contains information about the request to the provider.</param>
            <param name="node">The newly created menu item node to apply the generated link to.</param>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.MenuItemProviderAttribute">
            <summary>
            Applies metadata to menu item provider types which implement <see cref="T:Smartstore.Core.Content.Menus.IMenuItemProvider"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemProviderAttribute.ProviderName">
            <summary>
            Unique name of the provider.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Menus.MenuItemProviderAttribute.AppendsMultipleItems">
            <summary>
            Indicates that the provider appends multiple items to the tree.
            The corresponding <see langword="MenuItemRecord"/> cannot have child elements and certain properties such as title, short description etc. are ignored. 
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Menus.MenuItemProviderMetadata">
            <summary>
            Represents menu item provider registration metadata.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Content.Topics.Topic">
            <summary>
            Represents a topic.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.SystemName">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.IsSystemTopic">
            <summary>
            Gets or sets the value indicating whether this topic is deleteable by a user.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.HtmlId">
            <summary>
            Gets or sets the html id.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.BodyCssClass">
            <summary>
            Gets or sets the body css class.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.IncludeInSitemap">
            <summary>
            Gets or sets the value indicating whether this topic should be included in sitemap.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.IsPasswordProtected">
            <summary>
            Gets or sets the value indicating whether this topic is password protected.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.ShortTitle">
            <summary>
            Gets or sets the short title (for links).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.Intro">
            <summary>
            Gets or sets the intro.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.Body">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.MetaKeywords">
            <summary>
            Gets or sets the meta keywords.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.MetaDescription">
            <summary>
            Gets or sets the meta description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.MetaTitle">
            <summary>
            Gets or sets the meta title.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.LimitedToStores">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.RenderAsWidget">
            <summary>
            Gets or sets a value indicating whether the topic should also be rendered as a generic html widget.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.WidgetZone">
            <summary>
            Gets or sets the widget zone name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.WidgetWrapContent">
            <summary>
            Gets or sets a value indicating whether the content should be surrounded by a topic block wrapper.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.WidgetShowTitle">
            <summary>
            Gets or sets a value indicating whether the title should be displayed in the widget block.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.WidgetBordered">
            <summary>
            Gets or sets a value indicating whether the widget block should have borders.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.Priority">
            <summary>
            Gets or sets the sort order (relevant for widgets).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.TitleTag">
            <summary>
            Gets or sets the title tag.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.SubjectToAcl">
            <summary>
            Gets or sets a value indicating whether the entity is subject to ACL.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.IsPublished">
            <summary>
            Gets or sets a value indicating whether the topic page is published.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Content.Topics.Topic.CookieType">
            <summary>
            Gets or sets a value indicating whether the topic set a cookie and the cookie type.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Content.Topics.Topic.GetWidgetZones">
            <summary>
            Helper function which gets the comma-separated <c>WidgetZone</c> property as list of strings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smartstore.Core.Content.Topics.Topic.GetDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Topics.Topic.GetDisplayNameMemberNames">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Content.Topics.TopicQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Content.Topics.Topic},System.Boolean,System.Int32[],System.Int32)">
            <summary>
            Applies standard filter and sorts by <see cref="P:Smartstore.Core.Content.Topics.Topic.Priority"/>, then by <see cref="P:Smartstore.Core.Content.Topics.Topic.SystemName"/>.
            </summary>
            <param name="query">Topic query.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Content.Topics.Topic.IsPublished"/>.</param>
            <param name="customerRoleIds">Customer roles identifiers to apply filter by ACL restriction.</param>
            <param name="storeId">Store identifier to apply filter by store restriction.</param>
            <returns>Topic query.</returns>
        </member>
        <member name="F:Smartstore.Core.Content.Topics.TopicWidgetSource.TOPIC_WIDGET_ALL_MODEL_KEY">
            <summary>
            Key for TopicWidget caching
            </summary>
            <remarks>
            {0} : store id
            {1} : language id
            {2} : role ids
            </remarks>
        </member>
        <member name="T:Smartstore.Core.AI.AIChatTopic">
            <summary>
            Represents the topic of an AI chat.
            </summary>
        </member>
        <member name="F:Smartstore.Core.AI.AIChatTopic.Text">
            <summary>
            Chat to generate simple text.
            </summary>
        </member>
        <member name="F:Smartstore.Core.AI.AIChatTopic.RichText">
            <summary>
            Chat to generate rich text.
            </summary>
        </member>
        <member name="F:Smartstore.Core.AI.AIChatTopic.Translation">
            <summary>
            Chat to translate text.
            </summary>
        </member>
        <member name="F:Smartstore.Core.AI.AIChatTopic.Suggestion">
            <summary>
            Chat to generate suggestions.
            </summary>
        </member>
        <member name="F:Smartstore.Core.AI.AIChatTopic.Image">
            <summary>
            Chat to generate images.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.AIImageFormat">
            <summary>
            Represents the AI image creation type.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.AIRole">
            <summary>
            Represents the AI role.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.AIException">
            <summary>
            Represents an error that occurs during AI processing.
            </summary>
            <remarks>
            It is recommended to output a user-friendly message and to put all technical details 
            such as text or image creation data into an inner exception for logging.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.AI.AIException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.AI.AIException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Smartstore.Core.AI.AIException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.AI.AIException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="provider">Payment provider that caused the exception.</param>
        </member>
        <member name="M:Smartstore.Core.AI.AIException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Smartstore.Core.AI.AIException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="provider">Payment provider that caused the exception.</param>
        </member>
        <member name="P:Smartstore.Core.AI.AIException.Provider">
            <summary>
            AI provider that caused the exception.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.AIChat">
            <summary>
            Represents an AI conversation consisting of a sequence of messages.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.AIChat.#ctor(Smartstore.Core.AI.AIChatTopic)">
            <summary>
            Represents an AI conversation consisting of a sequence of messages.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.AIChat.ModelName">
            <summary>
            The name of the AI model.
            <c>null</c> to use the default model.
            </summary>
            <example>gpt-4o</example>
        </member>
        <member name="M:Smartstore.Core.AI.AIChat.AddMessages(Smartstore.Core.AI.AIChatMessage[])">
            <summary>
            Adds messages. Empty messages are not added.
            </summary>
            <param name="messages">The messages to add.</param>
        </member>
        <member name="M:Smartstore.Core.AI.AIChat.SetMetaData``1(``0,System.String)">
            <summary>
            Adds metadata using the expression of the caller.
            </summary>
            <typeparam name="T">The type of the metadata value.</typeparam>
            <param name="value">The metadata value.</param>
            <param name="expression">The expression of the caller.</param>
            <returns>The AIChat instance.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.AIChat.SetMetaData(System.String,System.Object)">
            <summary>
            Adds metadata using the specified key and value.
            </summary>
            <param name="key">The key of the metadata.</param>
            <param name="value">The value of the metadata.</param>
            <returns>The AIChat instance.</returns>
        </member>
        <member name="P:Smartstore.Core.AI.AIChat.Metadata">
            <summary>
            Gets or sets the metadata associated with the AIChat.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.AIChatCompletionResponse">
            <summary>
            Represents the response of an AI chat completion.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.AIChatCompletionResponse.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Represents the response of an AI chat completion.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.AIChatCompletionResponse.Message">
            <summary>
            Gets the message generated by the AI chat completion.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.AIChatCompletionResponse.Index">
            <summary>
            Gets the index of the AI chat completion response.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.AIChatMessage">
            <summary>
            Represents a chat message in an AI conversation history.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.AIChatMessage.FromUser(System.String,System.String)">
            <summary>
            Creates a <see cref="F:Smartstore.Core.AI.KnownAIMessageRoles.User"/> message.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.AIChatMessage.FromSystem(System.String,System.String)">
            <summary>
            Creates a <see cref="F:Smartstore.Core.AI.KnownAIMessageRoles.System"/> message.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.AIChatMessage.FromAssistant(System.String,System.String)">
            <summary>
            Creates an <see cref="F:Smartstore.Core.AI.KnownAIMessageRoles.Assistant"/> message.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.AIChatMessage.Role">
            <summary>
            The role of the author of this message. Typically system, user or assistant.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.AIChatMessage.Author">
            <summary>
            The author's name of this message.
            May contain a-z, A-Z, 0-9 and underscores with a maximum length of 64 characters.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.AIChatMessage.Content">
            <summary>
            The message content.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.AIChatMessage.Append(System.String)">
            <summary>
            Appends content to the message.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.KnownAIMessageRoles">
            <summary>
            Respresents a message role.
            </summary>
        </member>
        <member name="F:Smartstore.Core.AI.KnownAIMessageRoles.User">
            <summary>
            Used to provide content (requests or comments) for the assistant to respond to.
            </summary>
            <example>Who won the world series in 2020?</example>
        </member>
        <member name="F:Smartstore.Core.AI.KnownAIMessageRoles.System">
            <summary>
            Used to set the behavior of the assistant.
            </summary>
            <example>You are a helpful assistant.</example>
        </member>
        <member name="F:Smartstore.Core.AI.KnownAIMessageRoles.Assistant">
            <summary>
            Used for assistant responses, but can also be written by the client to give examples of desired behavior.
            </summary>
            <example>The Los Angeles Dodgers won the World Series in 2020.</example>
        </member>
        <member name="M:Smartstore.Core.AI.AIChatExtensions.User(Smartstore.Core.AI.AIChat,System.String,System.String)">
            <summary>
            Adds a <see cref="F:Smartstore.Core.AI.KnownAIMessageRoles.User"/> message.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.AIChatExtensions.System(Smartstore.Core.AI.AIChat,System.String,System.String)">
            <summary>
            Adds a <see cref="F:Smartstore.Core.AI.KnownAIMessageRoles.System"/> message.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.AIChatExtensions.Assistant(Smartstore.Core.AI.AIChat,System.String,System.String)">
            <summary>
            Adds an <see cref="F:Smartstore.Core.AI.KnownAIMessageRoles.Assistant"/> message.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.AIChatExtensions.UseModel(Smartstore.Core.AI.AIChat,System.String)">
            <summary>
            Applies the name of an AI model.
            </summary>
            <param name="modelName">AI model name.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddTextMessagesAsync(Smartstore.Core.AI.Prompting.IAITextModel,Smartstore.Core.AI.AIChat,System.Boolean)">
            <summary>
            Adds <see cref="T:System.Collections.Generic.List`1"/> with general instructions for text creation. 
            </summary>
            <param name="model">The <see cref="T:Smartstore.Core.AI.Prompting.IAITextModel"/> model</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated messages will be added.</param>
            <param name="isRichText">A value indicating whether to build a HTML containing rich text prompt.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddTextLayoutMessages(Smartstore.Core.AI.Prompting.IAITextLayoutModel,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds <see cref="T:System.Collections.Generic.List`1"/> for creating HTML structure instructions for rich text creation. 
            </summary>
            <param name="model">The <see cref="T:Smartstore.Core.AI.Prompting.IAITextLayoutModel"/> model</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated messages will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddKeywordsMessages(Smartstore.Core.AI.Prompting.IAIKeywordModel,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds <see cref="T:System.Collections.Generic.List`1"/> for keyword generation instructions for rich text creation. 
            </summary>
            <param name="model">The <see cref="T:Smartstore.Core.AI.Prompting.IAIKeywordModel"/> model</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated messages will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddImageContainerMessages(Smartstore.Core.AI.Prompting.IAIImageContainerModel,Smartstore.Core.AI.AIChat,System.Boolean,System.Boolean)">
            <summary>
            Adds <see cref="T:System.Collections.Generic.List`1"/> for image creation instructions for rich text creation. 
            </summary>
            <param name="model">The <see cref="T:Smartstore.Core.AI.Prompting.IAIImageContainerModel"/> model</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated messages will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddLinkMessagesAsync(Smartstore.Core.AI.Prompting.IAILinkModel,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds <see cref="T:System.Collections.Generic.List`1"/> for link generation instructions for rich text creation. 
            </summary>
            <param name="model">The <see cref="T:Smartstore.Core.AI.Prompting.IAILinkModel"/> model</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated messages will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.BuildImagePrompt(Smartstore.Core.AI.Prompting.IAIImageModel,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds <see cref="T:Smartstore.Core.AI.AIChatMessage"/> with specific parameters for image creation.
            </summary>
            <param name="model">The <see cref="T:Smartstore.Core.AI.Prompting.IAIImageModel"/> model</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated message will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddMetaTitleMessages(System.String,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds messages of type <see cref="T:Smartstore.Core.AI.AIChatMessage"/> to a <see cref="T:Smartstore.Core.AI.AIChat" /> for the meta title generation.
            </summary>
            <param name="forPromptPart">The part where we tell the AI what to generate.</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated message will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddMetaDescriptionMessages(System.String,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds messages of type <see cref="T:Smartstore.Core.AI.AIChatMessage"/> to a <see cref="T:Smartstore.Core.AI.AIChat" /> for the meta description generation.
            </summary>
            <param name="forPromptPart">The part where we tell the AI what to generate.</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated message will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddMetaKeywordsMessages(System.String,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds messages of type <see cref="T:Smartstore.Core.AI.AIChatMessage"/> to a <see cref="T:Smartstore.Core.AI.AIChat" /> for the meta keywords generation.
            </summary>
            <param name="forPromptPart">The part where we tell the AI what to generate.</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated message will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddRoleMessage(Smartstore.Core.AI.AIRole,Smartstore.Core.AI.AIChat,System.String)">
            <summary>
            Adds a <see cref="T:Smartstore.Core.AI.AIChatMessage"/> containing an instruction for the AI to act in a specific role.
            </summary>
            <param name="role">The <see cref="T:Smartstore.Core.AI.AIRole"/></param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated message will be added.</param>
            <param name="entityName">The name of the entity. Currently only used to fill a placeholder for the productname when the role is <see cref="F:Smartstore.Core.AI.AIRole.ProductExpert"/></param>
            <returns>AI Instruction: e.g.: Be a SEO expert.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddSuggestionMessages(Smartstore.Core.AI.Prompting.IAISuggestionModel,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds messages of type <see cref="T:Smartstore.Core.AI.AIChatMessage"/> to a <see cref="T:Smartstore.Core.AI.AIChat" /> for general instructions for AI suggestions.
            </summary>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated messages will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddSimpleTextMessagesAsync(Smartstore.Core.AI.Prompting.IAITextModel,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds <see cref="T:System.Collections.Generic.List`1"/> with general instructions for simple text creation, e.g. not do use markdown. 
            Wordlimit, Tone and Style are properties of <paramref name="model"/> which are also considered.
            </summary>
            <param name="model">The <see cref="T:Smartstore.Core.AI.Prompting.IAITextModel"/> model</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated messages will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddRichTextMessagesAsync(Smartstore.Core.AI.Prompting.IAITextModel,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds <see cref="T:System.Collections.Generic.List`1"/> with general instructions for rich text creation. 
            </summary>
            <param name="model">The <see cref="T:Smartstore.Core.AI.Prompting.IAITextModel"/> model</param>
            <param name="chat">The <see cref="T:Smartstore.Core.AI.AIChat" /> containing a <see cref="T:System.Collections.Generic.List`1"/> to which the generated messages will be added.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddLanguageMessagesAsync(Smartstore.Core.AI.Prompting.IAITextModel,Smartstore.Core.AI.AIChat)">
            <summary>
            Adds <see cref="T:System.Collections.Generic.List`1"/> for language name, tone and style.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageBuilder.AddHtmlMessages(Smartstore.Core.AI.AIChat)">
            <summary>
            Adds messages of type <see cref="T:Smartstore.Core.AI.AIChatMessage"/> to a <see cref="T:Smartstore.Core.AI.AIChat" /> for HTML creation.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.AIMessageResources">
            <summary>
            Contains methods to obtain string resources for AI prompts.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.#ctor(Smartstore.Core.Localization.ILocalizationService)">
            <summary>
            Contains methods to obtain string resources for AI prompts.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.DontUseQuotes">
            <summary>
            Prevents the AI from generating quotation marks.
            </summary>
            <returns>
            AI instruction: Do not enclose the text in quotation marks.
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.DontUseMarkdown">
            <summary>
            Prevents the AI from generating markdown.
            </summary>
            <returns>
            AI instruction: Do not use markdown formatting.
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.DontUseLineBreaks">
            <summary>
            Prevents the AI from generating line breaks.
            </summary>
            <returns>
            AI instruction: Do not use line breaks.
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.PreserveHtmlStructure">
            <summary>
            Instruction to preserver HTML structure.
            </summary>
            <returns>
            AI instruction: Be sure to preserve the HTML structure.
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.ProcessHtmlElementsIndividually">
            <summary>
            Instruction to process HTML elements individually.
            </summary>
            <returns>
            AI instruction: Process each HTML element individually.
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.WordLimit(System.Int32)">
            <summary>
            Instructs the AI to write text that does not exceed a defined number of words.
            </summary>
            <returns>
            AI instruction: The text may contain a maximum of <paramref name="wordLimit"/> words.
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.CharLimit(System.Int32)">
            <summary>
            Instructs the AI to write text that does not exceed a defined number of characters.
            </summary>
            <returns>
            AI instruction: Limit your answer to <paramref name="charLimit"/> characters!
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.LanguageTone(System.String)">
            <summary>
            Instructs the AI to write in a specific tone.
            </summary>
            <returns>
            AI instruction: The tone should be <paramref name="tone"/>.
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.LanguageStyle(System.String)">
            <summary>
            Instructs the AI to write in a specific style.
            </summary>
            <returns>
            AI instruction: The language style should be <paramref name="style"/>.
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.CreateHtml">
            <summary>
            Necessary for the AI to create the generated text as HTML.
            </summary>
            <returns>
            AI instruction: Create HTML text.
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.JustHtml">
            <summary>
            No introductions or explanations please.
            </summary>
            <returns>
            AI instruction: Just return the HTML you have created so that it can be integrated directly into a website. 
            Don't give explanations about what you have created or introductions like: 'Gladly, here is your HTML'. 
            Do not include the generated HTML in any delimiters like: '```html' 
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.StartWithDivTag">
            <summary>
            Necessary so that the AI does not create an entire HTML document.
            </summary>
            <returns>AI instruction: Start with a div tag.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.DontCreateTitle(System.String)">
            <summary>
            The title is rendered by the respective entity itself on the page.
            </summary>
            <param name="entityName">The name of the entity.</param>
            <returns>AI instruction: Do not create the title: '<paramref name="entityName"/>'.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.Language(System.String)">
            <summary>
            Instruction to write in a specific language.
            </summary>
            <param name="languageName">The name of the language.</param>
            <returns>AI instruction: Write in <paramref name="languageName"/>.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.SeparateListWithComma">
            <summary>
            Instruction to separate the generated list with commas.
            </summary>
            <returns>AI instruction: The list should be comma-separated so that it can be inserted directly as a meta tag.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.ReserveSpaceForShopName">
            <summary>
            Instruction to reserve space for the name of the website.
            </summary>
            <returns>AI instruction: Do not use the name of the website as this will be added later. Reserve 5 words for this..</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.IncludeIntro">
            <summary>
            Instruction to include an intro for the HTML about to be generated.
            </summary>
            <returns>AI instruction: Start with an introduction.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.MainHeadingTag(System.String)">
            <summary>
            Instruction to use a specific tag for the main heading.
            </summary>
            <param name="tag">The type of the HTML tag.</param>
            <returns>AI instruction: The main heading is given a <paramref name="tag"/> tag.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.ParagraphCount(System.Int32)">
            <summary>
            Defines the number of paragraphs the text should be divided into.
            </summary>
            <param name="paragraphCount">The count of paragraphs.</param>
            <returns>AI instruction: The text should be divided into <paramref name="paragraphCount"/> paragraphs, which are enclosed with p tags.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.ParagraphWordCount(System.Int32)">
            <summary>
            Defines the number of words for each paragraph.
            </summary>
            <param name="paragraphWordCount">The count of words per paragraph.</param>
            <returns>AI instruction: Each section should contain a maximum of <paramref name="paragraphWordCount"/> words.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.WriteCompleteParagraphs">
            <summary>
            Necessary so that the AI does not take any shortcuts. Sometimes, for example, it simply writes TBD or ... (More text).
            </summary>
            <returns>AI instruction: Write complete texts for each section.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.ParagraphHeadingTag(System.String)">
            <summary>
            Instruction to use a specific tag for the paragraph headings.
            </summary>
            <param name="tag">The type of the HTML tag.</param>
            <returns>AI instruction: The headings of the individual sections are given <paramref name="tag"/> tags.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.IncludeConclusion">
            <summary>
            Instruction to include an conclusion for the HTML about to be generated.
            </summary>
            <returns>AI instruction: End the text with a conclusion.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.UseKeywords(System.String)">
            <summary>
            Instruction to include specific keywords in the text.
            </summary>
            <param name="keywords">The keywords to use.</param>
            <returns>AI instruction: Use the following keywords: '<paramref name="keywords"/>'.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.MakeKeywordsBold">
            <summary>
            Instruction to make keywords bold in the text.
            </summary>
            <returns>AI instruction: Include the keywords in b-tags.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.KeywordsToAvoid(System.String)">
            <summary>
            Instruction to avoid specific keywords in the text.
            </summary>
            <param name="keywordsToAvoid">The keywords to avoid.</param>
            <returns>AI instruction: Do not use the following keywords under any circumstances: '<paramref name="keywordsToAvoid"/>'.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.IncludeImages">
            <summary>
            Instruction to include image placeholders in the text.
            </summary>
            <returns>AI instruction: After each paragraph, add another div-tag with the CSS class 'mb-3', 
            which contains an i-tag with the classes 'far fa-xl fa-file-image ai-preview-file'.
            The title attribute of the i-tag should be the heading of the respective paragraph.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.NoIntroImage">
            <summary>
            Instruction to include no image for the intro text.
            </summary>
            <returns>AI instruction: The intro does not receive a picture.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.NoConclusionImage">
            <summary>
            Instruction to include no image for the conclusion text.
            </summary>
            <returns>AI instruction: The conclusion does not receive a picture.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.DontUseTextInImages">
            <summary>
            Should prevent the AI from using text when creating images. (Doesn't not work with dall-e-3. But it must work sooner or later)
            </summary>
            <returns>
            AI instruction: Do not use any text or characters in the images to be created. The image should be purely visual, without any writing or labelling.
            </returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.AddTableOfContents(System.String,System.String)">
            <summary>
            Instruction to add a table of contents to the text.
            </summary>
            <param name="tableOfContentsTitle">The title of the table of contents.</param>
            <param name="tableOfContentsTitleTag">The tag of title of the table of contents.</param>
            <returns>AI instruction: Insert a table of contents with the title '<paramref name="tableOfContentsTitle"/>'.
            The title receives a <paramref name="tableOfContentsTitleTag"/> tag.
            Link the individual points of the table of contents to the respective headings of the paragraphs.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.AddNamedLink(System.String,System.String)">
            <summary>
            Instruction to include a link to the text.
            </summary>
            <param name="anchorText">The title of link.</param>
            <param name="link">The URL.</param>
            <returns>AI instruction: Insert a link with the text '<paramref name="anchorText"/>' that refers to '<paramref name="link"/>'.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.AddLink(System.String)">
            <summary>
            Instruction to include a link to the text.
            </summary>
            <param name="link">The URL.</param>
            <returns>AI instruction: Insert a link that refers to '<paramref name="link"/>'.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.AddCallToAction(System.String,System.String)">
            <summary>
            Instruction to include a call to action button after the text.
            </summary>
            <param name="callToActionText">The title of link (or button).</param>
            <param name="link">The URL.</param>
            <returns>AI instruction: Insert a link with the text '<paramref name="callToActionText"/>' that refers to '<paramref name="link"/>'.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.Role(Smartstore.Core.AI.AIRole,System.String)">
            <summary>
            Adds an instruction for the AI to act in a specific role.
            </summary>
            <param name="role">The <see cref="T:Smartstore.Core.AI.AIRole"/></param>
            <param name="entityName">
            The name of the entity. Currently only used to fill a placeholder for the product name 
            when the role is <see cref="F:Smartstore.Core.AI.AIRole.ProductExpert"/>.</param>
            <returns>AI Instruction: e.g.: Be a SEO expert.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.GetResource(System.String,System.Object[])">
            <summary>
            Gets a resource string value for the given <paramref name="key"/>.
            </summary>
            <param name="key">The key of the string resource.</param>
            <param name="args">The arguments to format the resource string.</param>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.AIMessageResources.P(System.String,System.Object[])">
            <summary>
            Shortcut to get a resource string value of a prompt.
            The key will be "Smartstore.AI.Prompts.&lt;<paramref name="keyPart"/>&gt;".
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.AIPromptGeneratorBase.Type">
            <summary>
            Defines the type for which the prompt generator is responsible.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IAIImageContainerModel">
            <summary>
            Represents a text generation model with the possibility to include images.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageContainerModel.IncludeImages">
            <summary>
            Gets or sets a value defining whether images should be included in the generation.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IAIImageModel">
            <summary>
            Represents a model for AI image generation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageModel.EntityName">
            <summary>
            Defines the name of the entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageModel.ModelName">
            <summary>
            The name of the AI model.
            </summary>
            <example>dall-e-3</example>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageModel.Medium">
            <summary>
            e.g. photo, painting, illustration
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageModel.Environment">
            <summary>
            e.g. shop, indoors, outdoors, living room, kitchen, city, forest, beach, pedestal, etc
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageModel.Lighting">
            <summary>
            soft, ambient, overcast, neon, studio lights, etc
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageModel.Color">
            <summary>
            vibrant, muted, bright, monochromatic, colorful, black and white, pastel
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageModel.Mood">
            <summary>
            Sedate, calm, raucous, energetic
            Gemütlich, hektisch, entspannend, geheimnisvoll, nostalgisch, futuristisch.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageModel.Composition">
            <summary>
            Portrait, headshot, closeup, birds-eye view ???
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageModel.Format">
            <summary>
            Defines the image creation format.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIImageModel.Style">
            <summary>
            Defines the image creation style directly passed to ChatGPT.
            </summary>
            <remarks>Currently only used by ChatGPT.</remarks>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IAIKeywordModel">
            <summary>
            Represents a model for text generation with keyword properties.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIKeywordModel.Keywords">
            <summary>
            Gets or sets a value defining the keywords to use while generating the text.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIKeywordModel.KeywordsToAvoid">
            <summary>
            Gets or sets a value defining the keywords to avoid while generating the text.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIKeywordModel.MakeKeywordsBold">
            <summary>
            Gets or sets a value defining whether to make the keywords bold in the generated text.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IAILanguageModel">
            <summary>
            Represents a model for text generation with language properties.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAILanguageModel.LanguageId">
            <summary>
            Gets or sets a value defining the id of the choosen language.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IAILinkModel">
            <summary>
            Represents a text generation model with link properties.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAILinkModel.AnchorText">
            <summary>
            Gets or sets a value defining the id of the choosen language.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAILinkModel.AnchorLink">
            <summary>
            Gets or sets a value defining the id of the choosen language.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAILinkModel.AddCallToAction">
            <summary>
            Gets or sets a value defining the id of the choosen language.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAILinkModel.CallToActionText">
            <summary>
            Gets or sets a value defining the id of the choosen language.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IAIPromptGenerator">
            <summary>
            Contract to generate <see cref="T:Smartstore.Core.AI.AIChat"/> based on entity type and underlying model.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAIPromptGenerator.Priority">
            <summary>
            Gets or sets the priority of the prompt generator.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.IAIPromptGenerator.CanHandle(System.String)">
            <summary>
            Should return <see langword="true"/> if the implementation handles 
            prompt generation for given <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.IAIPromptGenerator.GenerateTextChatAsync(Smartstore.Core.AI.Prompting.IAITextModel)">
            <summary>
            Generates the <see cref="T:Smartstore.Core.AI.AIChat"/> for given <see cref="T:Smartstore.Core.AI.Prompting.IAITextModel"/> model.
            </summary>
            <returns>The <see cref="T:Smartstore.Core.AI.AIChat"/></returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.IAIPromptGenerator.GenerateImageChatAsync(Smartstore.Core.AI.Prompting.IAIImageModel)">
            <summary>
            Generates the <see cref="T:Smartstore.Core.AI.AIChat"/> for given <see cref="T:Smartstore.Core.AI.Prompting.IAIImageModel"/> model.
            </summary>
            <returns>The <see cref="T:Smartstore.Core.AI.AIChat"/></returns>
        </member>
        <member name="M:Smartstore.Core.AI.Prompting.IAIPromptGenerator.GenerateSuggestionChatAsync(Smartstore.Core.AI.Prompting.IAISuggestionModel)">
            <summary>
            Generates the <see cref="T:Smartstore.Core.AI.AIChat"/> for given <see cref="T:Smartstore.Core.AI.Prompting.IAISuggestionModel"/> model.
            </summary>
            <returns>The <see cref="T:Smartstore.Core.AI.AIChat"/></returns>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IAISuggestionModel">
            <summary>
            Represents a text suggestion model.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IAITextLayoutModel">
            <summary>
            Represents a text generation model with structure/layout properties.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAITextLayoutModel.IncludeIntro">
            <summary>
            Gets or sets a value defining whether to include an intro.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAITextLayoutModel.MainHeadingTag">
            <summary>
            Gets or sets a value defining the main heading tag.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAITextLayoutModel.ParagraphCount">
            <summary>
            Gets or sets a value defining the paragraph count.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAITextLayoutModel.ParagraphHeadingTag">
            <summary>
            Gets or sets a value defining the paragraph heading tag.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAITextLayoutModel.ParagraphWordCount">
            <summary>
            Gets or sets a value defining the paragraph word count.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAITextLayoutModel.IncludeConclusion">
            <summary>
            Gets or sets a value defining whether to include a conclusion.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IAITextModel">
            <summary>
            Represents a simple text generation model.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IAITocModel">
            <summary>
            Represents a text generation model with table of content (TOC) properties.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAITocModel.AddToc">
            <summary>
            Gets or sets a value defining whether a table of contents should be added to the generated text.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAITocModel.TocTitle">
            <summary>
            Gets or sets a value defining the title of the table of contents.
            </summary>
        </member>
        <member name="P:Smartstore.Core.AI.Prompting.IAITocModel.TocTitleTag">
            <summary>
            Gets or sets a value defining the tag that should be used for the title of the table of contents.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.IPromptContainer">
            <summary>
            Model interface for prompt UI.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.ITextPromptContainer">
            <summary>
            Model interface for the text generation prompt UI.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.Prompting.ISuggestionPromptContainer">
            <summary>
            Model interface for the suggestion generation prompt UI.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.AIProviderBase">
            <summary>
            A base class to implement <see cref="T:Smartstore.Core.AI.IAIProvider"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.AI.IAIChatCache">
            <summary>
            Interface for AI chat cache.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.IAIChatCache.GenerateSessionToken">
            <summary>
            Generates a new session token.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.IAIChatCache.GetAsync(System.String)">
            <summary>
            Gets the AI chat from cache.
            </summary>
            <param name="token">The token to get chat for.</param>
            <returns>The chat instance.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.IAIChatCache.PutAsync(System.String,Smartstore.Core.AI.AIChat,System.Nullable{System.TimeSpan})">
            <summary>
            Put the AI chat into cache.
            </summary>
            <param name="slidingExpiration">The sliding expiration time. Default is 20 minutes.</param>
        </member>
        <member name="M:Smartstore.Core.AI.IAIChatCache.RemoveAsync(System.String)">
            <summary>
            Removes the AI chat from cache.
            </summary>
            <param name="token"></param>
        </member>
        <member name="T:Smartstore.Core.AI.IAIProvider">
            <summary>
            Represents an AI provider like ChatGPT.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProvider.IsActive">
            <summary>
            Gets a value indicating whether the provider is active.
            </summary>
            <returns>True if the provider is active; otherwise, false.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProvider.Supports(Smartstore.Core.AI.AIProviderFeatures)">
            <summary>
            Gets a value indicating whether the provider supports the given feature.
            </summary>
            <param name="feature">The AI provider feature.</param>
            <returns>True if the provider supports the feature; otherwise, false.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProvider.GetPreferredModelNames(Smartstore.Core.AI.AIChatTopic)">
            <summary>
            Gets the names of the preferred AI models for the given topic.
            </summary>
            <param name="topic">The AI chat topic.</param>
            <returns>An array of preferred AI model names.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProvider.GetDefaultModelNames">
            <summary>
            Gets the default AI model names.
            To be used when GetPreferredModelNames returns null.
            </summary>
            <returns>An array of default AI model names.</returns>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProvider.ChatAsync(Smartstore.Core.AI.AIChat,System.Threading.CancellationToken)">
            <summary>
            Starts or continues an AI conversation.
            Adds the latest answer to the chat.
            </summary>
            <param name="chat">The AI chat.</param>
            <param name="cancelToken">The cancellation token.</param>
            <returns>The latest answer.</returns>
            <exception cref="T:Smartstore.Core.AI.AIException">Thrown when an error occurs during the AI conversation.</exception>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProvider.ChatAsStreamAsync(Smartstore.Core.AI.AIChat,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Starts or continues an AI conversation.
            Adds the latest answer to the chat.
            </summary>
            <param name="chat">The AI chat.</param>
            <param name="numAnswers">The number of AI answers to return. 1 by default.</param>
            <param name="cancelToken">The cancellation token.</param>
            <returns>The answer and its index. The index is greater than or equal to 0 and less than numAnswers.</returns>
            <exception cref="T:Smartstore.Core.AI.AIException">Thrown when an error occurs during the AI conversation.</exception>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProvider.CreateImagesAsync(Smartstore.Core.AI.Prompting.IAIImageModel,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the URL(s) of AI generated image(s).
            </summary>
            <param name="model">The AI image model.</param>
            <param name="numImages">The number of images to be generated. 1 by default.</param>
            <param name="cancelToken">The cancellation token.</param>
            <returns>An array of URL(s) of the generated image(s).</returns>
            <exception cref="T:Smartstore.Core.AI.AIException">Thrown when an error occurs during image generation.</exception>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProvider.AnalyzeImageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Analyzes an image based on an AI prompt.
            </summary>
            <param name="url">The image URL.</param>
            <param name="prompt">The AI prompt.</param>
            <param name="cancelToken">The cancellation token.</param>
            <returns>The analysis result.</returns>
            <exception cref="T:Smartstore.Core.AI.AIException">Thrown when an error occurs during image analysis.</exception>
        </member>
        <member name="T:Smartstore.Core.AI.IAIProviderFactory">
            <summary>
            Responsible for resolving <see cref="T:Smartstore.Core.AI.IAIProvider"/> instances.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProviderFactory.GetAllProviders">
            <summary>
            Gets a list of all registered <see cref="T:Smartstore.Core.AI.IAIProvider"/> implementations.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProviderFactory.GetProviders(Smartstore.Core.AI.AIProviderFeatures)">
            <summary>
            Gets a list of <see cref="T:Smartstore.Core.AI.IAIProvider"/> implementations that support the given <paramref name="feature"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProviderFactory.GetFirstProvider(Smartstore.Core.AI.AIProviderFeatures)">
            <summary>
            Gets the first <see cref="T:Smartstore.Core.AI.IAIProvider"/> that supports <paramref name="feature"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.AI.IAIProviderFactory.GetProviderBySystemName(System.String)">
            <summary>
            Gets <see cref="T:Smartstore.Core.AI.IAIProvider"/> by its system name.
            </summary>
        </member>
        <member name="F:Smartstore.Core.DefaultWorkContextSource.CUSTOMERROLES_TAX_DISPLAY_TYPES_KEY">
            <summary>
            Key for tax display type caching
            </summary>
            <remarks>
            {0} : customer role ids
            {1} : store identifier
            </remarks>
        </member>
        <member name="T:Smartstore.Core.IWorkContext">
            <summary>
            Work context
            </summary>
        </member>
        <member name="M:Smartstore.Core.IWorkContext.InitializeAsync">
            <summary>
            Initializes the work context by pre-resolving current customer
            working language and working currency asynchronously.
            </summary>
        </member>
        <member name="P:Smartstore.Core.IWorkContext.IsInitialized">
            <summary>
            Gets a value indicating whether the work context was initialized.
            </summary>
        </member>
        <member name="P:Smartstore.Core.IWorkContext.CurrentCustomer">
            <summary>
            Gets or sets the current customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.IWorkContext.CurrentImpersonator">
            <summary>
            Gets the original customer (in case the current in <see cref="P:Smartstore.Core.IWorkContext.CurrentCustomer"/> is impersonated)
            </summary>
        </member>
        <member name="P:Smartstore.Core.IWorkContext.WorkingLanguage">
            <summary>
            Get or set current user working language
            </summary>
        </member>
        <member name="P:Smartstore.Core.IWorkContext.WorkingCurrency">
            <summary>
            Get or set current user working currency
            </summary>
        </member>
        <member name="P:Smartstore.Core.IWorkContext.TaxDisplayType">
            <summary>
            Get or set current tax display type
            </summary>
        </member>
        <member name="M:Smartstore.Core.IWorkContext.GetTaxDisplayTypeAsync(Smartstore.Core.Identity.Customer,System.Int32)">
            <summary>
            Gets the tax display type for a given customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.IWorkContext.IsAdminArea">
            <summary>
            Gets or sets a value indicating whether we're in admin area
            </summary>
        </member>
        <member name="T:Smartstore.Core.IWorkContextSource">
            <summary>
            Work context source interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.IWorkContextSource.ResolveCurrentCustomerAsync">
            <summary>
            Resolves the current customer (uncached).
            </summary>
            <returns>
            A value tuple where first item is the resolved current or impersonated customer and 
            second item is the impersonator (if any) or null.
            </returns>
        </member>
        <member name="M:Smartstore.Core.IWorkContextSource.ResolveWorkingLanguageAsync(Smartstore.Core.Identity.Customer)">
            <summary>
            Resolves the working language for the given customer (uncached).
            </summary>
        </member>
        <member name="M:Smartstore.Core.IWorkContextSource.ResolveWorkingCurrencyAsync(Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Resolves the working currency for the given customer (uncached).
            </summary>
        </member>
        <member name="M:Smartstore.Core.IWorkContextSource.ResolveTaxDisplayTypeAsync(Smartstore.Core.Identity.Customer,System.Int32)">
            <summary>
            Resolves the tax display type for the given customer and store id (uncached).
            </summary>
        </member>
        <member name="M:Smartstore.Core.IWorkContextSource.SaveCustomerAttribute(Smartstore.Core.Identity.Customer,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Saves given customer attribute to database.
            </summary>
            <param name="customer">The customer to save an attribute for.</param>
            <param name="name">The name of a generic attribute, e.g.: CurrencyId, Language Id etc.</param>
            <param name="value">The value of the generic attribute.</param>
            <param name="async">Whether to perform the save operation asynchronously.</param>
        </member>
        <member name="T:Smartstore.Core.Configuration.ISettings">
            <summary>
            Marker interface for setting classes.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettings.Smartstore#ICloneable{Smartstore#Core#Configuration#ISettings}#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettings.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Configuration.Setting">
            <summary>
            Represents a setting entry
            </summary>
        </member>
        <member name="P:Smartstore.Core.Configuration.Setting.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Configuration.Setting.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:Smartstore.Core.Configuration.Setting.StoreId">
            <summary>
            Gets or sets the store for which this setting is valid. 0 is set when the setting is for all stores
            </summary>
        </member>
        <member name="M:Smartstore.Core.Configuration.IOutputCacheInvalidationObserverSettingExtensions.ObserveSettings``1(Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver)">
            <summary>
            Registers a concrete setting class to be observed by the framework. If any setting property
            of <typeparamref name="TSetting"/> changes, the framework will purge the cache.
            </summary>
            <typeparam name="TSetting">The type of the concrete setting class to observe</typeparam>
            <remarks>
            A property observer precedes a class observer.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Configuration.IOutputCacheInvalidationObserverSettingExtensions.ObserveSettings``1(Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver,System.Func{Smartstore.Core.OutputCache.IOutputCacheProvider,System.Threading.Tasks.Task})">
            <summary>
            Registers a concrete setting class to be observed by the framework. If any setting property
            of <typeparamref name="TSetting"/> changes, the framework will call the <paramref name="invalidationAction"/> handler.
            </summary>
            <typeparam name="TSetting">The type of the concrete setting class to observe</typeparam>
            <param name="invalidationAction">
            The invalidation action handler. If <c>null</c> is passed, the framework
            uses the default invalidator, which is <see cref="M:Smartstore.Core.OutputCache.IOutputCacheProvider.RemoveAllAsync"/>.
            </param>
            <remarks>
            A property observer precedes a class observer.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Configuration.IOutputCacheInvalidationObserverSettingExtensions.ObserveSettingProperty``1(Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Registers a setting property to be observed by the framework. If the value for the passed
            property changes, the framework will purge the cache.
            </summary>
            <typeparam name="TSetting">The type of the concrete setting class which contains the property</typeparam>
            <param name="propertyAccessor">The property lambda</param>
        </member>
        <member name="M:Smartstore.Core.Configuration.IOutputCacheInvalidationObserverSettingExtensions.ObserveSettingProperty``1(Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Func{Smartstore.Core.OutputCache.IOutputCacheProvider,System.Threading.Tasks.Task})">
            <summary>
            Registers a setting property to be observed by the framework. If the value for the passed
            property changes, the framework will call the <paramref name="invalidationAction"/> handler.
            </summary>
            <typeparam name="TSetting">The type of the concrete setting class which contains the property</typeparam>
            <param name="propertyAccessor">The property lambda</param>
            <param name="invalidationAction">
            The invalidation action handler. If <c>null</c> is passed, the framework
            uses the default invalidator, which is <see cref="M:Smartstore.Core.OutputCache.IOutputCacheProvider.RemoveAllAsync"/>.
            </param>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingQueryExtensions.ApplySorting(System.Linq.IQueryable{Smartstore.Core.Configuration.Setting})">
            <summary>
            Applies order by <see cref="P:Smartstore.Core.Configuration.Setting.Name"/>, then by <see cref="P:Smartstore.Core.Configuration.Setting.StoreId"/>
            </summary>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingQueryExtensions.ApplyClassFilter(System.Linq.IQueryable{Smartstore.Core.Configuration.Setting},System.Type,System.Int32,System.Boolean)">
            <summary>
            Gets all settings for given type <paramref name="settingsType"/> and <paramref name="storeId"/>.
            Type must implement <see cref="T:Smartstore.Core.Configuration.ISettings"/>.
            </summary>
            <param name="doFallback">
            Whether any store-neutral settings (Setting.StoreId = 0) should be fetched if store-specific entry does not exist.
            </param>
        </member>
        <member name="T:Smartstore.Core.Configuration.ISettingFactory">
            <summary>
            Responsible for activating and populating setting class instances that implement <see cref="T:Smartstore.Core.Configuration.ISettings"/>.
            Instances are cached as singleton objects: CacheKey is composed of class name and StoreId.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingFactory.LoadSettings``1(System.Int32)">
            <summary>
            Loads settings.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="storeId">Store identifier for which settings should be loaded</param>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingFactory.LoadSettingsAsync``1(System.Int32)">
            <summary>
            Loads settings.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="storeId">Store identifier for which settings should be loaded</param>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingFactory.LoadSettings(System.Type,System.Int32)">
            <summary>
            Loads settings.
            </summary>
            <param name="settingType">Setting class type</param>
            <param name="storeId">Store identifier for which settings should be loaded</param>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingFactory.LoadSettingsAsync(System.Type,System.Int32)">
            <summary>
            Loads settings.
            </summary>
            <param name="settingType">Setting class type</param>
            <param name="storeId">Store identifier for which settings should be loaded</param>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingFactory.SaveSettingsAsync``1(``0,System.Int32)">
            <summary>
            Save settings object. This methods commits changes to database.
            </summary>
            <typeparam name="T">Settings type</typeparam>
            <param name="settings">Setting instance</param>
            <param name="storeId">Store identifier</param>
            <returns>The number of setting entities committed to database.</returns>
        </member>
        <member name="T:Smartstore.Core.Configuration.ISettingService">
            <summary>
            Reads and writes setting entities.
            None of the write methods should actually commit changes to database. It's the callers'
            reponsibility to call 'DbContext.SaveChanges()'.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingService.SettingExistsAsync(System.String,System.Int32)">
            <summary>
            Checks whether a setting for the given store exists.
            </summary>
            <param name="key">Key</param>
            <param name="storeId">Store identifier</param>
            <returns><c>true</c> if setting exists in database.</returns>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingService.GetSettingByKey``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            Get setting value by key
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">Key</param>
            <param name="defaultValue">Default value</param>
            <param name="storeId">Store identifier</param>
            <param name="doFallback">A value indicating whether a shared (for all stores) value should be loaded if a value specific for a certain store is not found</param>
            <returns>Setting value</returns>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingService.GetSettingByKeyAsync``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            Get setting value by key
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">Key</param>
            <param name="defaultValue">Default value</param>
            <param name="storeId">Store identifier</param>
            <param name="doFallback">A value indicating whether a shared (for all stores) value should be loaded if a value specific for a certain store is not found</param>
            <returns>Setting value</returns>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingService.GetSettingEntityByKeyAsync(System.String,System.Int32)">
            <summary>
            Gets a setting by key
            </summary>
            <param name="key">Unique setting key</param>
            <param name="storeId">Store identifier</param>
            <returns>Setting</returns>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingService.ApplySettingAsync``1(System.String,``0,System.Int32)">
            <summary>
            Applies a setting value. The caller is responsible for database commit.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="storeId">Store identifier</param>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingService.RemoveSettingsAsync(System.String)">
            <summary>
            Removes all settings with its key beginning with rootKey. The caller is responsible for database commit.
            </summary>
            <returns>Number of deleted settings</returns>
        </member>
        <member name="M:Smartstore.Core.Configuration.ISettingService.RemoveSettingAsync(System.String,System.Int32)">
            <summary>
            Removes a setting. The caller is responsible for database commit.
            </summary>
            <returns><c>true</c> when the setting exists in the database.</returns>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingFactory.LoadSettings``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingFactory.LoadSettingsAsync``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingFactory.LoadSettings(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingFactory.LoadSettingsAsync(System.Type,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingFactory.SaveSettingsAsync``1(``0,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingFactory.SaveSettingsAsync(Smartstore.Core.Data.SmartDbContext,Smartstore.Core.Configuration.ISettings,System.Boolean,System.Int32)">
            <summary>
            Internal API.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingService.SettingExistsAsync(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingService.GetSettingByKey``1(System.String,``0,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingService.GetSettingByKeyAsync``1(System.String,``0,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingService.GetSettingEntityByKeyAsync(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingService.ApplySettingAsync``1(System.String,``0,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingService.RemoveSettingsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Configuration.SettingService.RemoveSettingAsync(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CustomerLoginType">
            <summary>
            Gets or sets a value indicating the customer login type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CustomerNumberMethod">
            <summary>
            Gets or sets the customer number method.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CustomerNumberVisibility">
            <summary>
            Gets or sets the customer number visibility.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CheckUsernameAvailabilityEnabled">
            <summary>
            Gets or sets a value indicating whether users can check the availability of usernames (when registering or changing in 'My Account').
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.AllowUsersToChangeUsernames">
            <summary>
            Gets or sets a value indicating whether users are allowed to change their usernames.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.DefaultPasswordFormat">
            <summary>
            Default password format for customers
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.HashedPasswordFormat">
            <summary>
            Gets or sets a customer password format (SHA1, MD5) when passwords are hashed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.PasswordMinLength">
            <summary>
            Gets or sets the minimum password length.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.PasswordRequireDigit">
            <summary>
            Gets or sets a value indicating whether password requires digits.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.PasswordRequireUppercase">
            <summary>
            Gets or sets a value indicating whether password requires uppercase chars.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.PasswordRequireLowercase">
            <summary>
            Gets or sets a value indicating whether password requires lowercase chars.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.PasswordRequiredUniqueChars">
            <summary>
            Gets or sets the number of required unique chars in passwords.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.PasswordRequireNonAlphanumeric">
            <summary>
            Gets or sets a value indicating whether password requires non alphanumeric chars.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.UserRegistrationType">
            <summary>
            User registration type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.AllowCustomersToUploadAvatars">
            <summary>
            Gets or sets a value indicating whether customers are allowed to upload avatars.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.MaxAvatarFileSize">
            <summary>
            Gets or sets the maximum file size of an avatar (in KB). The default is 10,240 (10 MB).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.ShowCustomersLocation">
            <summary>
            Gets or sets a value indicating whether customers location is shown.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.ShowCustomersJoinDate">
            <summary>
            Gets or sets a value indicating whether to show customers join date.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.AllowViewingProfiles">
            <summary>
            Gets or sets a value indicating whether customers are allowed to view profiles of other customers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.NotifyNewCustomerRegistration">
            <summary>
            Gets or sets a value indicating whether 'New customer' notification message should be sent to a store owner.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.HideDownloadableProductsTab">
            <summary>
            Gets or sets a value indicating whether to hide 'Downloable products' tab on 'My account' page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.HideBackInStockSubscriptionsTab">
            <summary>
            Gets or sets a value indicating whether to hide 'Back in stock subscriptions' tab on 'My account' page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.DownloadableProductsValidateUser">
            <summary>
            Gets or sets a value indicating whether to validate user when downloading products.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CustomerNameFormat">
            <summary>
            Customer name formatting.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CustomerNameFormatMaxLength">
            <summary>
            Gets or sets a value indicating the maximum length of a formatted customer name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CustomerNameAllowedCharacters">
            <summary>
            Gets or sets a value to be concated with <see cref="P:Microsoft.AspNetCore.Identity.UserOptions.AllowedUserNameCharacters"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.NewsletterEnabled">
            <summary>
            Gets or sets a value indicating whether 'Newsletter' form field is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.HideNewsletterBlock">
            <summary>
            Gets or sets a value indicating whether to hide newsletter box.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.OnlineCustomerMinutes">
            <summary>
            Gets or sets a value indicating the number of minutes for 'online customers' module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.StoreLastVisitedPage">
            <summary>
            Gets or sets a value indicating we should store last visited page URL for each customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.StoreLastUserAgent">
            <summary>
            Gets or sets a value indicating we should store last user agent for each customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.StoreLastDeviceFamily">
            <summary>
            Gets or sets a value indicating we should store last device family for each customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.GenderEnabled">
            <summary>
            Gets or sets a value indicating whether 'Gender' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.TitleEnabled">
            <summary>
            Gets or sets a value indicating whether 'Title' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.FirstNameRequired">
            <summary>
            Gets or sets a value indicating whether 'FirstName' is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.LastNameRequired">
            <summary>
            Gets or sets a value indicating whether 'LastName' is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.DateOfBirthEnabled">
            <summary>
            Gets or sets a value indicating whether 'Date of Birth' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CompanyEnabled">
            <summary>
            Gets or sets a value indicating whether 'Company' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CompanyRequired">
            <summary>
            Gets or sets a value indicating whether 'Company' is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.StreetAddressEnabled">
            <summary>
            Gets or sets a value indicating whether 'Street address' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.StreetAddressRequired">
            <summary>
            Gets or sets a value indicating whether 'Street address' is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.StreetAddress2Enabled">
            <summary>
            Gets or sets a value indicating whether 'Street address 2' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.StreetAddress2Required">
            <summary>
            Gets or sets a value indicating whether 'Street address 2' is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.ZipPostalCodeEnabled">
            <summary>
            Gets or sets a value indicating whether 'Zip / postal code' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.ZipPostalCodeRequired">
            <summary>
            Gets or sets a value indicating whether 'Zip / postal code' is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CityEnabled">
            <summary>
            Gets or sets a value indicating whether 'City' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CityRequired">
            <summary>
            Gets or sets a value indicating whether 'City' is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.CountryEnabled">
            <summary>
            Gets or sets a value indicating whether 'Country' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.StateProvinceEnabled">
            <summary>
            Gets or sets a value indicating whether 'State / province' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.StateProvinceRequired">
            <summary>
            Gets or sets a value indicating whether 'StateProvince' is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.PhoneEnabled">
            <summary>
            Gets or sets a value indicating whether 'Phone number' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.PhoneRequired">
            <summary>
            Gets or sets a value indicating whether 'Phone number' is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.FaxEnabled">
            <summary>
            Gets or sets a value indicating whether 'Fax number' is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.FaxRequired">
            <summary>
            Gets or sets a value indicating whether 'Fax number' is required.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerSettings.RegisterCustomerRoleId">
            <summary>
            Identifier of a customer role that new registered customers will be assigned to.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ExternalAuthenticationSettings.ActiveAuthenticationMethodSystemNames">
            <summary>
            Gets or sets an system names of active external authentication methods
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CookieConsentRequirement">
            <summary>
            Represents the cookie consent requirements.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CookieConsentRequirement.NeverRequired">
            <summary>
            Cookie consent is never required.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CookieConsentRequirement.RequiredInEUCountriesOnly">
            <summary>
            Cookie consent is required if the visitor's resolved GEO location points to an EU country.
            For all other countries, cookie consent is disabled.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CookieConsentRequirement.DependsOnCountry">
            <summary>
            Cookie consent is required if the visitor's resolved country 
            is configured to require consent (see <see cref="P:Smartstore.Core.Common.Country.DisplayCookieManager"/>).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.PrivacySettings.CookieConsentRequirement">
            <summary>
            Gets or sets the cookie consent requirement.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.PrivacySettings.ModalCookieConsent">
            <summary>
            Gets or sets a value indicating whether the cookie dialog will be display in a modal dialog.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.PrivacySettings.SameSiteMode">
            <summary>
            Gets or sets the global SameSiteMode for cookies.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.PrivacySettings.VisitorCookieExpirationDays">
            <summary>
            Gets or sets the number of days after which visitor cookies of guests expire.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.PrivacySettings.StoreLastIpAddress">
            <summary>
            Gets or sets a value indicating whether to store last IP address for each customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.PrivacySettings.DisplayGdprConsentOnForms">
            <summary>
            Gets or sets a value indicating whether to display a checkbox to the customer where he can agree to privacy terms.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.PrivacySettings.FullNameOnContactUsRequired">
            <summary>
            Gets or sets a value indicating whether the full name field is required on contact-us requests.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.PrivacySettings.FullNameOnProductRequestRequired">
            <summary>
            Gets or sets a value indicating whether the full name field is required on product requests.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.PrivacySettings.CookieInfos">
            <summary>
            Gets or sets cookie infos (JSON serialized).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether Reward Points Program is enabled.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.ExchangeRate">
            <summary>
            Gets or sets a value of Reward Points exchange rate.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.RoundDownRewardPoints">
            <summary>
            Gets or sets a value whether to round down reward points.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.PointsForRegistration">
            <summary>
            Gets or sets a number of points awarded for registration.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.PointsForProductReview">
            <summary>
            Gets or sets a number of points awarded for a product review.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.ShowPointsForProductReview">
            <summary>
            Gets or sets a value indicating whether to show reward points (including amount) to receive for a product review on product detail page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.PointsForPurchases_Amount">
            <summary>
            Gets or sets a number of points awarded for purchases (amount in primary store currency).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.PointsForPurchases_Points">
            <summary>
            Gets or sets a number of points awarded for purchases.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.RoundDownPointsForPurchasedAmount">
            <summary>
            Gets or sets a value indicating whether to truncate the decimal places of the amount calculated for reward points awarded for a purchase.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.ShowPointsForProductPurchase">
            <summary>
            Gets or sets a value indicating whether to show reward points (including amount) to receive for purchasing a product on product detail page.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.PointsForPurchases_Awarded">
            <summary>
            Points are awarded when the order status is.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsSettings.PointsForPurchases_Canceled">
            <summary>
            Points are canceled when the order is.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.Customer">
            <summary>
            Represents a customer
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.CustomerGuid">
            <summary>
            Gets or sets the customer Guid
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.Username">
            <summary>
            Gets or sets the username
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.Email">
            <summary>
            Gets or sets the email
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.Password">
            <summary>
            Gets or sets the password
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.PasswordFormatId">
            <summary>
            Gets or sets the password format
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.PasswordFormat">
            <summary>
            Gets or sets the password format
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.ClientIdent">
            <summary>
            Gets or sets the client identification hash (IP + UserAgent).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.DetectedByClientIdent">
            <summary>
            Gets or sets a value indicating whether the customer was detected
            cookie-less by evaluating the ClientIdent (IP+UserAgent).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.PasswordSalt">
            <summary>
            Gets or sets the password salt
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.AdminComment">
            <summary>
            Gets or sets the admin comment
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.IsTaxExempt">
            <summary>
            Gets or sets a value indicating whether the customer is tax exempt
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.AffiliateId">
            <summary>
            Gets or sets the affiliate identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.Active">
            <summary>
            Gets or sets a value indicating whether the customer is active
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.Deleted">
            <summary>
            Gets or sets a value indicating whether the customer has been deleted
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.IsSystemAccount">
            <summary>
            Gets or sets a value indicating whether the customer account is system
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.SystemName">
            <summary>
            Gets or sets the customer system name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.LastIpAddress">
            <summary>
            Gets or sets the last IP address
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of entity creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.LastLoginDateUtc">
            <summary>
            Gets or sets the date and time of last login
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.LastActivityDateUtc">
            <summary>
            Gets or sets the date and time of last activity
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.LastVisitedPage">
            <summary>
            Gets or sets the URL of the last page visited.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.Salutation">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.LimitedToStores">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.BillingAddress">
            <summary>
            Default billing address
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.ShippingAddress">
            <summary>
            Default shipping address
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.Addresses">
            <summary>
            Gets or sets customer addresses
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.ExternalAuthenticationRecords">
            <summary>
            Gets or sets external authentication records.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.CustomerContent">
            <summary>
            Gets or sets customer generated content.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.CustomerRoleMappings">
            <summary>
            Gets or sets the customer role mappings.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.ShoppingCartItems">
            <summary>
            Gets or sets shopping cart items
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.Orders">
            <summary>
            Gets or sets orders
            </summary>        
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.RewardPointsHistory">
            <summary>
            Gets or sets the reward points history.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.WalletHistory">
            <summary>
            Gets or sets the wallet history.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.Customer.ReturnRequests">
            <summary>
            Gets or sets the return requests.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.Customer.GetRolesIdent(System.Boolean)">
            <summary>
            Gets a string identifier for the customer's roles by joining all role ids
            </summary>
            <param name="onlyActiveCustomerRoles"><c>true</c> ignores all inactive roles</param>
            <returns>The identifier</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.Customer.GetRoleIds(System.Boolean)">
            <summary>
            Get identifiers of assigned customer roles.
            </summary>
            <param name="onlyActiveCustomerRoles"><c>true</c> ignores all inactive roles</param>
            <returns>Customer role identifiers.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.Customer.RemoveAddress(Smartstore.Core.Common.Address)">
            <summary>
            Removes an address from the addresses assigned to this customer.
            </summary>
            <param name="address">Address to remove.</param>
        </member>
        <member name="M:Smartstore.Core.Identity.Customer.AddRewardPointsHistoryEntry(System.Int32,System.String,Smartstore.Core.Checkout.Orders.Order,System.Decimal)">
            <summary>
            Adds a reward points history entry.
            </summary>
            <param name="points">Points to add.</param>
            <param name="message">Optional message.</param>
            <param name="usedWithOrder">Order for which the points were used.</param>
            <param name="usedAmount">Used amount.</param>
        </member>
        <member name="M:Smartstore.Core.Identity.Customer.GetRewardPointsBalance">
            <summary>
            Gets the reward points balance.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerAttributeCollection.PreferredPaymentMethod">
            <summary>
            Gets or sets the customer's preferred payment method. It is preselected in the checkout if Quick Checkout is activated.
            </summary>
            <remarks>
            Only payment methods for which <see cref="P:Smartstore.Core.Checkout.Payment.IPaymentMethod.RequiresPaymentSelection"/> 
            is <c>false</c> are permitted as preferred payment method.
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Identity.CustomerContent">
            <summary>
            Represents content entered by a customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerContent.CustomerId">
            <summary>
            Gets or sets the customer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerContent.Customer">
            <summary>
            Gets or sets the customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerContent.IpAddress">
            <summary>
            Gets or sets the IP address.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerContent.IsApproved">
            <summary>
            Gets or sets a value indicating whether the content is approved.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerContent.CreatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerContent.UpdatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="T:Smartstore.Core.Identity.CustomerLoginType">
            <summary>
            Represents the customer login type.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerLoginType.Username">
            <summary>
            The username will be used to login.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerLoginType.Email">
            <summary>
            The email will be used to login.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerLoginType.UsernameOrEmail">
            <summary>
            The username or the email address can be used to login.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CustomerNameFormat">
            <summary>
            Represents the customer name fortatting enumeration.
            </summary>
            <remarks>
            Backward compat: don't singularize enum values.
            </remarks>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNameFormat.ShowEmails">
            <summary>
            Show emails
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNameFormat.ShowUsernames">
            <summary>
            Show usernames
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNameFormat.ShowFullNames">
            <summary>
            Show full names
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNameFormat.ShowFirstName">
            <summary>
            Show first name
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNameFormat.ShowNameAndCity">
            <summary>
            Show shorted name and city
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CustomerNumberMethod">
            <summary>
            Represents the customer number method.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNumberMethod.Disabled">
            <summary>
            No customer number will be saved.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNumberMethod.Enabled">
            <summary>
            Customer numbers can be saved.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNumberMethod.AutomaticallySet">
            <summary>
            Customer numbers will automatically be set when new customers are created.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CustomerNumberVisibility">
            <summary>
            Represents the customer visibility in the frontend.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNumberVisibility.None">
            <summary>
            Customer number won't be displayed in the frontend.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNumberVisibility.Display">
            <summary>
            Customer number will be displayed in the frontend.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNumberVisibility.EditableIfEmpty">
            <summary>
            A customer can enter his own number if customer number wasn't saved yet.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CustomerNumberVisibility.Editable">
            <summary>
            A customer can enter his own number and alter it.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.UserRegistrationType">
            <summary>
            Represents the customer registration type fortatting enumeration.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.UserRegistrationType.Standard">
            <summary>
            Standard account creation.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.UserRegistrationType.EmailValidation">
            <summary>
            Email validation is required after registration.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.UserRegistrationType.AdminApproval">
            <summary>
            A customer should be approved by administrator.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.UserRegistrationType.Disabled">
            <summary>
            Registration is disabled.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.WalletPostingReason">
            <summary>
            Represents the reason for creating a wallet history entry.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.WalletPostingReason.Admin">
            <summary>
            Any administration reason.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.WalletPostingReason.Purchase">
            <summary>
            The customer has purchased goods which have been paid in part or in full by wallet.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.WalletPostingReason.Refill">
            <summary>
            The customer has bought wallet credits.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.WalletPostingReason.Refund">
            <summary>
            The admin has refunded the used credit balance.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.WalletPostingReason.PartialRefund">
            <summary>
            The admin has refunded a part of the used credit balance.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.WalletPostingReason.Debit">
            <summary>
            The admin has debited the wallet, e.g. because the purchase of credit was cancelled.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CustomerRole">
            <summary>
            Represents a customer role.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.Name">
            <summary>
            Gets or sets the customer role name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.FreeShipping">
            <summary>
            Gets or sets a value indicating whether the customer role is marked as free shiping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.TaxExempt">
            <summary>
            Gets or sets a value indicating whether the customer role is marked as tax exempt.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.TaxDisplayType">
            <summary>
            Gets or sets the tax display type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.Active">
            <summary>
            Gets or sets a value indicating whether the customer role is active.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.IsSystemRole">
            <summary>
            Gets or sets a value indicating whether the customer role is system.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.SystemName">
            <summary>
            Gets or sets the customer role system name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.OrderTotalMinimum">
            <summary>
            Gets or sets a minimum order amount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.OrderTotalMaximum">
            <summary>
            Gets or sets a maximum order amount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.PermissionRoleMappings">
            <summary>
            Gets or sets permission role mappings.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRole.RuleSets">
            <summary>
            Gets or sets assigned rule sets.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CustomerRoleMapping">
            <summary>
            Represents a customer to customer role mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRoleMapping.CustomerId">
            <summary>
            Gets or sets the customer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRoleMapping.Customer">
            <summary>
            Gets or sets the customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRoleMapping.CustomerRoleId">
            <summary>
            Gets or sets the customer role identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRoleMapping.CustomerRole">
            <summary>
            Gets or sets the customer role.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CustomerRoleMapping.IsSystemMapping">
            <summary>
            Gets or sets a value indicating whether the mapping is created by the user or by the system.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.ExternalAuthenticationRecord">
            <summary>
            Represents an external authentication record.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ExternalAuthenticationRecord.CustomerId">
            <summary>
            Gets or sets the customer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ExternalAuthenticationRecord.Customer">
            <summary>
            Gets or sets the customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ExternalAuthenticationRecord.Email">
            <summary>
            Gets or sets the external email.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ExternalAuthenticationRecord.ExternalIdentifier">
            <summary>
            Gets or sets the external identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ExternalAuthenticationRecord.ExternalDisplayIdentifier">
            <summary>
            Gets or sets the external display identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ExternalAuthenticationRecord.OAuthToken">
            <summary>
            Gets or sets the OAuthToken.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ExternalAuthenticationRecord.OAuthAccessToken">
            <summary>
            Gets or sets the OAuthAccessToken.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ExternalAuthenticationRecord.ProviderSystemName">
            <summary>
            Gets or sets the provider system name.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.RewardPointsHistory">
            <summary>
            Represents a reward points history entry.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsHistory.CustomerId">
            <summary>
            Gets or sets the customer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsHistory.Customer">
            <summary>
            Gets or sets the customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsHistory.Points">
            <summary>
            Gets or sets the redeemed/added points.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsHistory.PointsBalance">
            <summary>
            Gets or sets the points balance.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsHistory.UsedAmount">
            <summary>
            Gets or sets the used amount.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsHistory.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsHistory.CreatedOnUtc">
            <summary>
            Gets or sets the date of instance creation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.RewardPointsHistory.UsedWithOrder">
            <summary>
            Gets or sets the order for which points were redeemed as a payment.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.WalletHistory">
            <summary>
            Represents a digital wallet history entry.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.StoreId">
            <summary>
            Gets or sets the store identifier. Should not be zero.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.CustomerId">
            <summary>
            Gets or sets the customer identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.Customer">
            <summary>
            Gets or sets the customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.OrderId">
            <summary>
            Gets or sets the order identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.Order">
            <summary>
            Gets or sets the order.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.Amount">
            <summary>
            Gets or sets the amount of the entry.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.AmountBalance">
            <summary>
            Gets or sets the amount balance when the entry was created.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.AmountBalancePerStore">
            <summary>
            Gets or sets the amount balance per store when the entry was created.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.CreatedOnUtc">
            <summary>
            Gets or sets the date when the entry was created (in UTC).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.Reason">
            <summary>
            Gets or sets the reason for posting this entry.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.WalletHistory.AdminComment">
            <summary>
            Gets or sets the admin comment.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.WebhookEndpointAttribute">
            <summary>
            A marker filter indicating that the endpoint is solely called by webhook clients/callers.
            The purpose is to suppress customer resolution for such endpoints.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CustomerAnonymizedEvent">
            <summary>
            An event message, which will be published after customer has been anonymized by GDPR tool.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CustomerRegisteredEvent">
            <summary>
            An event message, which will be published after customer has registered
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CustomerSignedInEvent">
            <summary>
            An event message, which will be published after customer has logged in.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.GdprCustomerDataExportedEvent">
            <summary>
            An event message that will be published after customer has been exported by GDPR tool.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.GuestCustomerDeletingEvent">
            <summary>
            An event message that will be published before guest customers are deleted.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.GuestCustomerDeletingEvent.RegistrationFrom">
            <summary>
            Customer registration from. <c>null</c> to ignore.
            Already included in <see cref="P:Smartstore.Core.Identity.GuestCustomerDeletingEvent.Query"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.GuestCustomerDeletingEvent.RegistrationTo">
            <summary>
            Customer registration to. <c>null</c> to ignore.
            Already included in <see cref="P:Smartstore.Core.Identity.GuestCustomerDeletingEvent.Query"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.GuestCustomerDeletingEvent.OnlyWithoutShoppingCart">
            <summary>
            A value indicating whether to delete only customers without shopping cart.
            Already included in <see cref="P:Smartstore.Core.Identity.GuestCustomerDeletingEvent.Query"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.GuestCustomerDeletingEvent.Query">
            <summary>
            Gets or sets the query used for deleting guest customers.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerContentQueryExtensions.ApplyCustomerFilter(System.Linq.IQueryable{Smartstore.Core.Identity.CustomerContent},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Applies a customer filter.
            </summary>
            <param name="query">Customer content query.</param>
            <param name="customerId">Customer identifier.</param>
            <param name="approved">A value indicating whether to filter approved content.</param>
            <returns>Customer content query.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerMessageFactoryExtensions.SendCustomerRegisteredNotificationMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Identity.Customer,System.Int32)">
            <summary>
            Sends 'New customer' notification message to a store owner.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerMessageFactoryExtensions.SendCustomerWelcomeMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Identity.Customer,System.Int32)">
            <summary>
            Sends a welcome message to a customer.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerMessageFactoryExtensions.SendCustomerEmailValidationMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Identity.Customer,System.Int32)">
            <summary>
            Sends an email validation message to a customer.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerMessageFactoryExtensions.SendCustomerPasswordRecoveryMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Identity.Customer,System.Int32)">
            <summary>
            Sends password recovery message to a customer.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerMessageFactoryExtensions.SendShareWishlistMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Identity.Customer,System.String,System.String,System.String,System.Int32)">
            <summary>
            Sends wishlist "email a friend" message.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerMessageFactoryExtensions.SendNewVatSubmittedStoreOwnerNotificationAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Identity.Customer,System.String,System.String,System.Int32)">
            <summary>
            Sends a "new VAT sumitted" notification to a store owner.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.IncludeCustomerRoles(System.Linq.IQueryable{Smartstore.Core.Identity.Customer})">
            <summary>
            Includes the the customer roles graph for eager loading.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.IncludeShoppingCart(System.Linq.IQueryable{Smartstore.Core.Identity.Customer})">
            <summary>
            Includes the complete cart graph for eager loading (including bundle items, applied discounts and rule sets).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.ApplyIdentFilter(System.Linq.IQueryable{Smartstore.Core.Identity.Customer},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Selects a customer by <see cref="P:Smartstore.Core.Identity.Customer.Email"/>, <see cref="P:Smartstore.Core.Identity.Customer.Username"/> or <see cref="P:Smartstore.Core.Identity.Customer.CustomerNumber"/> (in that particular order).
            </summary>
            <param name="exactMatch">Whether to perform an exact or partial field match.</param>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.ApplySearchTermFilter(System.Linq.IQueryable{Smartstore.Core.Identity.Customer},System.String,System.Boolean)">
            <summary>
            Selects customers by <see cref="P:Smartstore.Core.Identity.Customer.FullName"/> or <see cref="P:Smartstore.Core.Identity.Customer.Company"/>.
            </summary>
            <param name="exactMatch">Whether to perform an exact or partial field match.</param>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.ApplyBirthDateFilter(System.Linq.IQueryable{Smartstore.Core.Identity.Customer},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Selects customers by birthdate comparing the date parts for year, month and day of month.
            </summary>
            <param name="year">Year of birth. Pass <c>null</c> for any year.</param>
            <param name="month">Month of year part (1-12). Pass <c>null</c> for any month.</param>
            <param name="day">Day of month part (1-31). Pass <c>null</c> for any day.</param>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.ApplyRegistrationFilter(System.Linq.IQueryable{Smartstore.Core.Identity.Customer},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Selects customers who have registered within a given time period and orders by <see cref="P:Smartstore.Core.Identity.Customer.CreatedOnUtc"/> descending.
            </summary>
            <param name="fromUtc">Earliest (inclusive)</param>
            <param name="toUtc">Latest (inclusive)</param>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.ApplyLastActivityFilter(System.Linq.IQueryable{Smartstore.Core.Identity.Customer},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Selects customers who have been active within a given time period and orders by <see cref="P:Smartstore.Core.Identity.Customer.LastActivityDateUtc"/> descending.
            </summary>
            <param name="fromUtc">Earliest (inclusive)</param>
            <param name="toUtc">Latest (inclusive)</param>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.ApplyRolesFilter(System.Linq.IQueryable{Smartstore.Core.Identity.Customer},System.Int32[])">
            <summary>
            Selects customers who are assigned to given customer roles.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.ApplyOnlineCustomersFilter(System.Linq.IQueryable{Smartstore.Core.Identity.Customer},System.Int32)">
            <summary>
            Selects customers who are currently online since <paramref name="minutes"/> and orders by <see cref="P:Smartstore.Core.Identity.Customer.LastActivityDateUtc"/> descending.
            </summary>
            <param name="minutes"></param>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.ApplyPasswordFormatFilter(System.Linq.IQueryable{Smartstore.Core.Identity.Customer},Smartstore.Core.Identity.PasswordFormat)">
            <summary>
            Selects customers who use given password <paramref name="format"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.ApplyPhoneFilter(System.Linq.IQueryable{Smartstore.Core.Identity.Customer},System.String)">
            <summary>
            Selects customers by telephone number (partial match)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerQueryExtensions.ApplyZipPostalCodeFilter(System.Linq.IQueryable{Smartstore.Core.Identity.Customer},System.String)">
            <summary>
            Selects customers by ZIP postal code (partial match)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerRoleMappingQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Identity.CustomerRoleMapping},System.Int32[],System.Nullable{System.Boolean})">
            <summary>
            Applies standard filters and sorts by <see cref="P:Smartstore.Core.Identity.CustomerRoleMapping.IsSystemMapping"/>.
            </summary>
            <param name="query">Customer role mapping query.</param>
            <param name="customerRoleIds">Applies a filter by <see cref="P:Smartstore.Core.Identity.CustomerRoleMapping.CustomerRoleId"/>.</param>
            <param name="isSystemMapping">Applies a filter by <see cref="P:Smartstore.Core.Identity.CustomerRoleMapping.IsSystemMapping"/>.</param>
            <returns>Customer role mapping query.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerRoleQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Identity.CustomerRole},System.Boolean)">
            <summary>
            Applies standard filters and sorts by <see cref="P:Smartstore.Core.Identity.CustomerRole.Name"/>.
            </summary>
            <param name="query">Customer role query.</param>
            <param name="includeHidden">Applies a filter by <see cref="P:Smartstore.Core.Identity.CustomerRole.Active"/>.</param>
            <returns>Customer role query.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICookieConsentManagerExtensions.GenerateScriptAsync(Smartstore.Core.Identity.ICookieConsentManager,Smartstore.Core.Identity.CookieType,System.String)">
            <inheritdoc cref="M:Smartstore.Core.Identity.ICookieConsentManager.GenerateScript(System.Boolean,Smartstore.Core.Identity.CookieType,System.String)" />
        </member>
        <member name="M:Smartstore.Core.Identity.ICookieConsentManagerExtensions.GenerateInlineScriptAsync(Smartstore.Core.Identity.ICookieConsentManager,Smartstore.Core.Identity.CookieType,System.String)">
            <inheritdoc cref="M:Smartstore.Core.Identity.ICookieConsentManager.GenerateInlineScript(System.Boolean,Smartstore.Core.Identity.CookieType,System.String)" />
        </member>
        <member name="M:Smartstore.Core.Identity.Rules.ITargetGroupServiceExtensions.ProcessFilter(Smartstore.Core.Identity.Rules.ITargetGroupService,Smartstore.Core.Rules.Filters.FilterExpression,System.Int32,System.Int32)">
            <summary>
            Processes a target group filter.
            </summary>
            <param name="targetGroupService">Target group service.</param>
            <param name="filter">Filter expressions.</param>
            <param name="pageIndex">Page index.</param>
            <param name="pageSize">Page size.</param>
            <returns>List of customers.</returns>
        </member>
        <member name="T:Smartstore.Core.Identity.Rules.ITargetGroupService">
            <summary>
            Target group service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.Rules.ITargetGroupService.CreateExpressionGroupAsync(System.Int32)">
            <summary>
            Creates a filter expression group.
            </summary>
            <param name="ruleSetId">Rule set identifier.</param>
            <returns>Filter expression group.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.Rules.ITargetGroupService.ProcessFilterAsync(System.Int32[],Smartstore.Core.Rules.LogicalRuleOperator,System.Int32,System.Int32)">
            <summary>
            Processes target group filters.
            </summary>
            <param name="ruleSetIds">Ruleset identifiers.</param>
            <param name="logicalOperator">Rule operator.</param>
            <param name="pageIndex">Page index.</param>
            <param name="pageSize">Page size.</param>
            <returns>List of customers.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.Rules.ITargetGroupService.ProcessFilter(Smartstore.Core.Rules.Filters.FilterExpression[],Smartstore.Core.Rules.LogicalRuleOperator,System.Int32,System.Int32)">
            <summary>
            Processes target group filters.
            </summary>
            <param name="filters">Filter expressions.</param>
            <param name="logicalOperator">Rule operator.</param>
            <param name="pageIndex">Page index.</param>
            <param name="pageSize">Page size.</param>
            <returns>List of customers.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.RewardPointsHistoryQueryExtensions.ApplyCustomerFilter(System.Linq.IQueryable{Smartstore.Core.Identity.RewardPointsHistory},System.Int32[])">
            <summary>
            Applies a customer filter and sorts by <see cref="P:Smartstore.Core.Identity.RewardPointsHistory.CustomerId"/>, then by <see cref="P:Smartstore.Core.Identity.RewardPointsHistory.CreatedOnUtc"/> descending and 
            then by <see cref="P:Smartstore.Domain.BaseEntity.Id"/> descending.
            </summary>
            <param name="query">Rewardpoints history query.</param>
            <param name="customerIds">Customer identifiers.</param>
            <returns>Rewardpoints history query.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.RoleManagerExtensions.FindByIdAsync(Microsoft.AspNetCore.Identity.RoleManager{Smartstore.Core.Identity.CustomerRole},System.Int32)">
            <summary>
            Overload to pass roleId directly as int.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.TrackActivityAttribute">
            <summary>
            Saves current user activity information like date, IP address and visited page to database.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.TrackActivityAttribute.TrackDate">
            <summary>
            Whether to save the current UTC date in <see cref="P:Smartstore.Core.Identity.Customer.LastActivityDateUtc"/>. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.TrackActivityAttribute.TrackIpAddress">
            <summary>
            Whether to save the current customer's IP address in <see cref="P:Smartstore.Core.Identity.Customer.LastIpAddress"/>. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.TrackActivityAttribute.TrackPage">
            <summary>
            Whether to save current visited page's URL in <see cref="P:Smartstore.Core.Identity.Customer.GenericAttributes"/>. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.TrackActivityAttribute.TrackUserAgent">
            <summary>
            Whether to save current customer's user agent string in <see cref="P:Smartstore.Core.Identity.Customer.LastUserAgent"/>. Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.TrackActivityAttribute.TrackDeviceFamily">
            <summary>
            Whether to save current customer's device family name in <see cref="P:Smartstore.Core.Identity.Customer.LastUserDeviceType"/>. Default is <c>true</c>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.ConsentCookie">
            <summary>
            Infos that will be serialized and stored as string in a cookie.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ConsentCookie.AllowRequired">
            <summary>
            A value indicating whether required cookies are allowed to be set.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ConsentCookie.AllowAnalytics">
            <summary>
            A value indicating whether analytical cookies are allowed to be set.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ConsentCookie.AllowThirdParty">
            <summary>
            A value indicating whether third party cookies are allowed to be set.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ConsentCookie.AdUserDataConsent">
            <summary>
            A value indicating whether sending of user data is allowed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ConsentCookie.AdPersonalizationConsent">
            <summary>
            A value indicating whether personalization is allowed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.ConsentCookie.ConsentedOn">
            <summary>
            A value indicating when the consent was given.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.CustomerService.EnsureAuthentication(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Ensures that the authentication handler runs (even before the authentication middleware)
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Smartstore.Core.Identity.GdprTool.AnonymizeIpAddress(System.String)">
            <summary>
            Returns an anonymized IPv4 or IPv6 address.
            </summary>
            <param name="ipAddress">The IPv4 or IPv6 address to be anonymized.</param>
            <returns>The anonymized IP address.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICookieConsentManager.IsCookieConsentRequiredAsync">
            <summary>
            Gets A value indicating whether cookie consent is required for current user.
            </summary>
            <returns>A value indicating whether cookie consent is required for current user.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICookieConsentManager.GetCookieInfosAsync(System.Boolean)">
            <summary>
            Gets cookie infos from all modules that are publishing cookies to be displayed in the cookie manager dialog.
            </summary>
            <param name="withUserCookies"><c>true</c> to append user-defined cookie infos from <see cref="M:Smartstore.Core.Identity.ICookieConsentManager.GetUserCookieInfos(System.Boolean)"/> call to the result list.</param>
            <returns>Cookie infos.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICookieConsentManager.GetUserCookieInfos(System.Boolean)">
            <summary>
            Loads and deserializes user-defined cookie infos from <see cref="P:Smartstore.Core.Identity.PrivacySettings.CookieInfos"/> setting.
            </summary>
            <param name="translated">A value indicating whether to translate cookie display names and descriptions.</param>
            <returns>List of user-defined cookie infos.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICookieConsentManager.IsCookieAllowedAsync(Smartstore.Core.Identity.CookieType)">
            <summary>
            Gets a value indicating whether it is allowed to set a cookie of a certain type.
            </summary>
            <param name="cookieType">Type of the cookie.</param>
            <returns>A value indicating whether it is allowed to set a cookie of a certain type.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICookieConsentManager.GenerateScript(System.Boolean,Smartstore.Core.Identity.CookieType,System.String)">
            <summary>
            Generates a script tag with the given src attribute. If the user has not consented to the given consent type, 
            the src attribute is moved to a data-src attribute and a data-consent attribute is added.
            </summary>
            <param name="consented">True if the user has consented to the given consent type, false otherwise.</param>
            <param name="consentType">The type of consent required to load the script.</param>
            <param name="src">The URL of the script to load.</param>
            <returns>The generated script tag.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICookieConsentManager.GenerateInlineScript(System.Boolean,Smartstore.Core.Identity.CookieType,System.String)">
            <summary>
            Generates an inline script tag with the given code. If the user has not consented to the given consent type,
            the script's type will be <c>text/plain</c>.
            </summary>
            <param name="consented">True if the user has consented to the given consent type, false otherwise.</param>
            <param name="consentType">The type of consent required to load the script.</param>
            <param name="code">The code to be executed by the script. This should be a valid JavaScript code block.</param>
            <returns>The generated script tag.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICookieConsentManager.GetCookieData">
            <summary>
            Gets cookie consent data.
            </summary>
            <returns>Cookie consent data.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICookieConsentManager.SetConsentCookie(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the consent cookie.
            </summary>
            <param name="allowRequired">A value indicating whether required cookies are allowed to be set.</param>
            <param name="allowAnalytics">A value indicating whether analytical cookies are allowed to be set.</param>
            <param name="allowThirdParty">A value indicating whether third party cookies are allowed to be set.</param>
            <param name="adUserDataConsent">A value indicating whether sending of user data is allowed.</param>
            <param name="adPersonalizationConsent">A value indicating whether personalization is allowed.</param>
        </member>
        <member name="T:Smartstore.Core.Identity.ICookiePublisher">
            <summary>
            Marks a module as a cookie publisher. 
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.ICookiePublisher.GetCookieInfosAsync">
            <summary>
            Gets the cookie info of the cookie publisher (e.g. a module).
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CookieInfo">
            <summary>
            Module cookie infos.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CookieInfo.Name">
            <summary>
            Name of the module.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CookieInfo.Description">
            <summary>
            Description of the cookie (e.g. purpose of using the cookie).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CookieInfo.SelectedStoreIds">
            <summary>
            Selected store identifiers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Identity.CookieInfo.CookieType">
            <summary>
            Type of the cookie.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.CookieType">
            <summary>
            Type of the cookie or consent.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CookieType.None">
            <summary>
            Specifies that required cookies can be set.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CookieType.Required">
            <summary>
            Specifies that required cookies can be set.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CookieType.Analytics">
            <summary>
            Specifies that analytical cookies can be set.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CookieType.ThirdParty">
            <summary>
            Specifies that third party cookies can be set.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CookieType.ConsentAdUserData">
            <summary>
            Specifies that ad user data can be sent to third parties.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Identity.CookieType.ConsentAdPersonalization">
            <summary>
            Specifies that ad personalization is desired by the user.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Identity.ICustomerService">
            <summary>
            Customer service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.ICustomerService.CreateGuestCustomerAsync(System.String,System.Action{Smartstore.Core.Identity.Customer})">
            <summary>
            Creates and inserts a guest customer account.
            </summary>
            <param name="clientIdent">
            The client ident string, which usually is a hashed combination of client IP address and user agent. 
            Call <see cref="M:Smartstore.Core.Web.IWebHelper.GetClientIdent"/> to obtain an ident string. 
            The string should be unique for each client and must be at least 8 chars long.
            </param>
            <param name="customAction">
            An optional entity modifier action that is invoked right before the entity is saved to database.
            </param>
            <returns>Customer entity</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICustomerService.FindCustomerByClientIdentAsync(System.String,System.Int32)">
            <summary>
            Tries to find a customer record by client ident. This method should be called when an
            anonymous visitor rejects cookies and therefore cannot be identified automatically.
            </summary>
            <param name="clientIdent">
            The client ident string, which usually is a hashed combination of client IP address and user agent. 
            Call <see cref="M:Smartstore.Core.Web.IWebHelper.GetClientIdent"/> to obtain an ident string, or pass <c>null</c> to let this method obtain it automatically.
            </param>
            <param name="maxAgeSeconds">The max age of the newly created guest customer record. The shorter, the better (default is 1 min.)</param>
            <returns>The identified customer or <c>null</c></returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICustomerService.DeleteGuestCustomersAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Deletes guest customer records including generic attributes.
            </summary>
            <param name="registrationFrom">Customer registration from. <c>null</c> to ignore.</param>
            <param name="registrationTo">Customer registration to. <c>null</c> to ignore.</param>
            <param name="onlyWithoutShoppingCart">A value indicating whether to delete only customers without shopping cart.</param>
            <returns>Number of deleted guest customers.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICustomerService.AppendVisitorCookie(Smartstore.Core.Identity.Customer)">
            <summary>
            Tries to append a cookie to the HTTP response that makes it possible 
            to identify the (anonymous guest) customer in subsequent requests.
            </summary>
            <param name="customer">The customer to append cookie for.</param>
        </member>
        <member name="M:Smartstore.Core.Identity.ICustomerService.GetCustomerBySystemName(System.String,System.Boolean)">
            <summary>
            Gets customer by system name.
            </summary>
            <param name="systemName">System name</param>
            <param name="tracked">Whether to load entity tracked. Non-tracking load will be cached.</param>
            <returns>Found customer</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICustomerService.GetCustomerBySystemNameAsync(System.String,System.Boolean)">
            <summary>
            Gets customer by system name.
            </summary>
            <param name="systemName">System name</param>
            <param name="tracked">Whether to load entity tracked. Non-tracking load will be cached.</param>
            <returns>Found customer</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICustomerService.GetAuthenticatedCustomerAsync">
            <summary>
            Gets the currently authenticated customer.
            </summary>
            <returns>Authenticated customer.</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICustomerService.GetRoleBySystemName(System.String,System.Boolean)">
            <summary>
            Gets a customer role by system name.
            </summary>
            <param name="systemName">System name</param>
            <param name="tracked">Whether to load entity tracked. Non-tracking load will be cached.</param>
            <returns>Found customer</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICustomerService.GetRoleBySystemNameAsync(System.String,System.Boolean)">
            <summary>
            Gets a customer role by system name.
            </summary>
            <param name="systemName">System name</param>
            <param name="tracked">Whether to load entity tracked. Non-tracking load will be cached.</param>
            <returns>Found customer</returns>
        </member>
        <member name="M:Smartstore.Core.Identity.ICustomerService.ApplyRewardPointsForProductReview(Smartstore.Core.Identity.Customer,Smartstore.Core.Catalog.Products.Product,System.Boolean)">
            <summary>
            Applies reward points for a product review. The caller is responsible for database commit.
            </summary>
            <param name="customer">Customer.</param>
            <param name="product">Product.</param>
            <param name="add"><c>True</c> to add reward points. <c>False</c> to remove reward points.</param>
        </member>
        <member name="M:Smartstore.Core.Identity.IExternalAuthenticationMethod.GetDisplayWidget(System.Int32)">
            <summary>
            Gets an invoker for displaying a widget.
            </summary>
            <param name="storeId">The id of the current store.</param>
        </member>
        <member name="T:Smartstore.Core.Identity.IGdprTool">
            <summary>
            Contract for General Data Protection Regulation (GDPR) compliancy.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Identity.IGdprTool.ExportCustomerAsync(Smartstore.Core.Identity.Customer)">
            <summary>
            Exports all data stored for a customer into a dictionary. Exported data contains all
            personal data, addresses, order history, reviews, forum posts, private messages etc.
            </summary>
            <param name="customer">The customer to export data for.</param>
            <returns>The exported data</returns>
            <remarks>This method fulfills the "GDPR Data Portability" requirement.</remarks>
        </member>
        <member name="M:Smartstore.Core.Identity.IGdprTool.AnonymizeCustomerAsync(Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Anonymizes a customer's (personal) data and saves the result.
            </summary>
            <param name="customer">The customer to anonymize.</param>
            <param name="pseudomyzeContent"></param>
            <remarks>This method fulfills the "GDPR Right to be forgotten" requirement.</remarks>
        </member>
        <member name="M:Smartstore.Core.Identity.IGdprTool.AnonymizeData``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},Smartstore.Core.Identity.IdentifierDataType,Smartstore.Core.Localization.Language)">
            <summary>
            Anonymizes a data piece. The caller is responsible for database commit.
            </summary>
            <param name="entity">The entity instance that contains the data.</param>
            <param name="expression">The expression to the property that holds the data.</param>
            <param name="type">The value kind.</param>
            <param name="language">Language for data masking</param>
        </member>
        <member name="P:Smartstore.Core.Identity.IRoleStore.AutoSaveChanges">
            <summary>
            Gets or sets a flag indicating if changes should be persisted after CreateAsync, UpdateAsync and DeleteAsync are called.
            </summary>
            <value>
            True if changes should be automatically persisted, otherwise false.
            </value>
        </member>
        <member name="M:Smartstore.Core.Identity.SmartSignInManager.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Identity.SmartSignInManager.PasswordSignInAsync(Smartstore.Core.Identity.Customer,System.String,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Identity.IUserStore.AutoSaveChanges">
            <summary>
            Gets or sets a flag indicating if changes should be persisted after CreateAsync, UpdateAsync and DeleteAsync are called.
            </summary>
            <value>
            True if changes should be automatically persisted, otherwise false.
            </value>
        </member>
        <member name="T:Smartstore.Core.Identity.Tasks.DeleteGuestsTask">
            <summary>
            A task that periodically deletes guest customers.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Installation.InstallationException">
            <summary>
            Thrown when application is installed already or is currently running (hast started but not completed yet).
            </summary>
        </member>
        <member name="T:Smartstore.Core.Installation.IInstallationService">
            <summary>
            Responsible for installing the application
            </summary>
        </member>
        <member name="T:Smartstore.Core.Installation.InstallationLanguage">
            <summary>
            Language class for installation process.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Installation.InstallationLanguage.Name">
            <summary>
            Language name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Installation.InstallationLanguage.Code">
            <summary>
            Language code.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Installation.InstallationLanguage.IsDefault">
            <summary>
            A value indicating whether the language is the default language.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Installation.InstallationLanguage.IsRightToLeft">
            <summary>
            A value indicating whether the language is written from right to left.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Installation.InstallationLanguage.Resources">
            <summary>
            List of all language resources for the installation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Installation.InstallationLocaleResource.Name">
            <summary>
            Local language resource name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Installation.InstallationLocaleResource.Value">
            <summary>
            Local language resource value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Installation.InstallationModel.CallbackUrl">
            <summary>
            For auto-install
            </summary>
        </member>
        <member name="P:Smartstore.Core.Installation.InstallationModel.TenantId">
            <summary>
            For auto-install. Passed to <see cref="P:Smartstore.Core.Installation.InstallationModel.CallbackUrl"/> to identify client.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizationSettings.DefaultAdminLanguageId">
            <summary>
            Default admin area language identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizationSettings.UseImagesForLanguageSelection">
            <summary>
            Use images for language selection
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizationSettings.DetectBrowserUserLanguage">
            <summary>
            A value indicating whether the browser user language should be detected
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizationSettings.SeoFriendlyUrlsForLanguagesEnabled">
            <summary>
            A value indicating whether SEO friendly URLs with multiple languages are enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizationSettings.DefaultLanguageRedirectBehaviour">
            <summary>
            A value specifying if and how default language redirection should be handled.
            </summary>
            <remarks>This setting is ignored when <c>SeoFriendlyUrlsForLanguagesEnabled</c> is <c>false</c></remarks>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizationSettings.InvalidLanguageRedirectBehaviour">
            <summary>
            A value specifying how requests for invalid or unpublished languages should be handled
            </summary>
            <remarks>This setting is ignored when <c>SeoFriendlyUrlsForLanguagesEnabled</c> is <c>false</c></remarks>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizationSettings.DisplayRegionInLanguageSelector">
            <summary>
            Whether to display region/country name in language selector (e.g. "Deutsch (Deutschland)" instead of "Deutsch")
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizationSettings.UseNativeNameInLanguageSelector">
            <summary>
            A value indicating whether to use the language native name in language selector.
            If <c>false</c>, the language name maintained in backend is used.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.EnumAliasNameAttribute">
            <summary>
            Specifies the alias name of an <see cref="T:System.Enum"/> type
            to be used in translation resource keys instead of the enum's type name.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.ILanguage">
            <summary>
            Represents a language entity
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.ILanguage.Id">
            <summary>
            Entity id.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.ILanguage.Name">
            <summary>
            Language display name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.ILanguage.LanguageCulture">
            <summary>
            Language culture (e.g. "en-US")
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.ILanguage.UniqueSeoCode">
            <summary>
            The unique SEO code (e.g. "en")
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.ILanguage.Rtl">
            <summary>
            Whether language is "Right-to-left"
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.LanguageInfo">
            <summary>
            A minimum, cacheable language entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LanguageInfo.Id">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Localization.LanguageInfo.Name">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Localization.LanguageInfo.LanguageCulture">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Localization.LanguageInfo.UniqueSeoCode">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Localization.LanguageInfo.Rtl">
            <inheritdoc />
        </member>
        <member name="T:Smartstore.Core.Localization.ILocalizedEntity">
            <summary>
            Represents a localized entity
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.Language">
            <summary>
            Represents a language
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.Language.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.Language.LanguageCulture">
            <summary>
            Gets or sets the language culture (e.g. "en-US")
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.Language.UniqueSeoCode">
            <summary>
            Gets or sets the unique SEO code (e.g. "en")
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.Language.FlagImageFileName">
            <summary>
            Gets or sets the flag image file name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.Language.Rtl">
            <summary>
            Gets or sets a value indicating whether the language supports "Right-to-left"
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.Language.LimitedToStores">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.Language.Published">
            <summary>
            Gets or sets a value indicating whether the language is published
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.Language.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.Language.LocaleStringResources">
            <summary>
            Gets or sets locale string resources
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.LocaleStringResource">
            <summary>
            Represents a locale string resource
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.LanguageId">
            <summary>
            Gets or sets the language identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.ResourceName">
            <summary>
            Gets or sets the resource name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.ResourceValue">
            <summary>
            Gets or sets the resource value
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.IsFromPlugin">
            <summary>
            Gets or sets a value indicating whether this resource was installed by a plugin
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.IsTouched">
            <summary>
            Gets or sets a value indicating whether this resource was modified by the user
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of entity creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.UpdatedOnUtc">
            <summary>
            Gets or sets the date and time of entity update
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.CreatedBy">
            <summary>
            Gets or sets the name of the user who created the entity.
            Usually the login name, but may also be any external caller name
            (like a translation service for example).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.UpdatedBy">
            <summary>
            Gets or sets the name of the user who updated the entity.
            Usually the login name, but may also be any external caller name
            (like a translation service for example).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.MasterChecksum">
            <summary>
            For future use
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocaleStringResource.Language">
            <summary>
            Gets or sets the language
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.LocalizedEntityAttribute">
            <summary>
            Defines extra metadata for localizable entities. Use this attribute
            on types that implement <see cref="T:Smartstore.Core.Localization.ILocalizedEntity"/> only.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizedEntityAttribute.#ctor(System.String)">
            <param name="filterPredicate">
            An optional filter predicate as a dynamic LINQ expression
            </param>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedEntityAttribute.FilterPredicate">
            <summary>
            An optional filter predicate as a dynamic LINQ expression.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedEntityAttribute.KeyGroup">
            <summary>
            Key group name of entity.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.LocalizedPropertyAttribute">
            <summary>
            Marks a public property of a localizable entity as localizable. 
            Use this attribute on types that implement <see cref="T:Smartstore.Core.Localization.ILocalizedEntity"/> only.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.LocalizedEntityDescriptor">
            <summary>
            Contains metadata for localized entities.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedEntityDescriptor.EntityType">
            <summary>
            Type of localized entity that implements <see cref="T:Smartstore.Core.Localization.ILocalizedEntity"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedEntityDescriptor.Properties">
            <summary>
            All localizable properties that are defined in <see cref="P:Smartstore.Core.Localization.LocalizedEntityDescriptor.EntityType"/> class,
            that is, all properties decorated with the <see cref="T:Smartstore.Core.Localization.LocalizedEntityAttribute"/> attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedEntityDescriptor.FilterPredicate">
            <summary>
            An optional filter predicate as a dynamic LINQ expression.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.LocalizedProperty">
            <summary>
            Represents a localized property
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.EntityId">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.LanguageId">
            <summary>
            Gets or sets the language identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.LocaleKeyGroup">
            <summary>
            Gets or sets the locale key group
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.LocaleKey">
            <summary>
            Gets or sets the locale key
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.LocaleValue">
            <summary>
            Gets or sets the locale value
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.IsHidden">
            <summary>
            Hidden entities are treated like they did not exist.
            They neither appear in the UI nor are they cached.
            Hiding <see cref="T:Smartstore.Core.Localization.LocalizedProperty"/> entities can be
            very helpful for external services though (like translation services).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of entity creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.UpdatedOnUtc">
            <summary>
            Gets or sets the date and time of entity update
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.CreatedBy">
            <summary>
            Gets or sets the name of the user who created the entity.
            Usually the login name, but may also be any external caller name
            (like a translation service for example).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.UpdatedBy">
            <summary>
            Gets or sets the name of the user who updated the entity.
            Usually the login name, but may also be any external caller name
            (like a translation service for example).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.TranslatedOnUtc">
            <summary>
            Can be used by external translation services to
            save the date of last translation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.MasterChecksum">
            <summary>
            For future use.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedProperty.Language">
            <summary>
            Gets the language
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.HttpContextLocalizationExtensions.GetCultureCode(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Gets the unvalidated explicit culture code from request path.
            </summary>
            <returns>The culture / unique SEO code (e.g. 'en', 'de' etc.)</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.HttpContextLocalizationExtensions.GetCultureCode(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.Endpoint@)">
            <summary>
            Gets the unvalidated explicit culture code either from resolved request endpoint or from request path.
            </summary>
            <param name="localizedEndpoint">
            An instance of <see cref="T:Microsoft.AspNetCore.Http.Endpoint"/> if resolved endpoint was a localized route, <c>null</c> otherwise.
            This parameter being <c>null</c> indicates that routing was not performed yet OR the culture route constraint rejected
            the culture code as invalid.
            </param>
            <returns>The culture / unique SEO code (e.g. 'en', 'de' etc.)</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.IXmlResourceManagerExtensions.ImportResourcesFromXmlAsync(Smartstore.Core.Localization.IXmlResourceManager,Smartstore.Core.Localization.Language,System.String,System.String,System.Boolean,Smartstore.Core.DataExchange.ImportModeFlags,System.Boolean)">
            <summary>
            Imports language resources from XML file. This method commits to db.
            </summary>
            <param name="language">Language</param>
            <param name="xml">XML document</param>
            <param name="rootKey">Prefix for resource key name</param>
            <param name="mode">Specifies whether resources should be inserted or updated (or both)</param>
            <param name="updateTouchedResources">Specifies whether user touched resources should also be updated</param>
            <returns>The number of processed (added or updated) resource entries</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LanguageQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Localization.Language},System.Boolean,System.Int32)">
            <summary>
            Applies standard filter and sorts by <see cref="P:Smartstore.Domain.IDisplayOrder.DisplayOrder"/>.
            </summary>
            <param name="query">Language query.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Localization.Language.Published"/>.</param>
            <param name="storeId">Store identifier to apply filter by store restriction.</param>
            <returns>Language query.</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalized``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Boolean)">
            <summary>
            Get localized property of an entity
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="entity">Entity</param>
            <param name="keySelector">Key selector</param>
            <param name="detectEmptyHtml">When <c>true</c>, additionally checks whether the localized value contains empty HTML only and falls back to the default value if so.</param>
            <returns>Localized property</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalized``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get localized property of an entity
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="entity">Entity</param>
            <param name="keySelector">Key selector</param>
            <param name="languageId">Language identifier</param>
            <param name="returnDefaultValue">A value indicating whether to return default value (if localized is not found)</param>
            <param name="ensureTwoPublishedLanguages">A value indicating whether to ensure that we have at least two published languages; otherwise, load only default value</param>
            <param name="detectEmptyHtml">When <c>true</c>, additionally checks whether the localized value contains empty HTML only and falls back to the default value if so.</param>
            <returns>Localized property</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalized``2(``0,System.String,``1,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get localized property of an entity
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="entity">Entity</param>
            <param name="localeKey">Key selector</param>
            <param name="requestLanguageIdOrObj">Language identifier or object <see cref="T:Smartstore.Core.Localization.Language"/> entity instance.</param>
            <param name="returnDefaultValue">A value indicating whether to return default value (if localized is not found)</param>
            <param name="ensureTwoPublishedLanguages">A value indicating whether to ensure that we have at least two published languages; otherwise, load only default value</param>
            <param name="detectEmptyHtml">When <c>true</c>, additionally checks whether the localized value contains empty HTML only and falls back to the default value if so.</param>
            <returns>Localized property</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalized``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},Smartstore.Core.Localization.Language,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get localized property of an entity
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="entity">Entity</param>
            <param name="keySelector">Key selector</param>
            <param name="language">Language</param>
            <param name="returnDefaultValue">A value indicating whether to return default value (if localized is not found)</param>
            <param name="ensureTwoPublishedLanguages">A value indicating whether to ensure that we have at least two published languages; otherwise, load only default value</param>
            <param name="detectEmptyHtml">When <c>true</c>, additionally checks whether the localized value contains empty HTML only and falls back to the default value if so.</param>
            <returns>Localized property</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalized``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get localized property of an entity
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="entity">Entity</param>
            <param name="keySelector">Key selector</param>
            <param name="languageId">Language identifier</param>
            <param name="returnDefaultValue">A value indicating whether to return default value (if localized is not found)</param>
            <param name="ensureTwoPublishedLanguages">A value indicating whether to ensure that we have at least two published languages; otherwise, load only default value</param>
            <param name="detectEmptyHtml">When <c>true</c>, additionally checks whether the localized value contains empty HTML only and falls back to the default value if so.</param>
            <returns>Localized property</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalized``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},Smartstore.Core.Localization.Language,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get localized property of an entity
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <typeparam name="TProp">Property type</typeparam>
            <param name="entity">Entity</param>
            <param name="keySelector">Key selector</param>
            <param name="language">Language</param>
            <param name="returnDefaultValue">A value indicating whether to return default value (if localized is not found)</param>
            <param name="ensureTwoPublishedLanguages">A value indicating whether to ensure that we have at least two published languages; otherwise, load only default value</param>
            <param name="detectEmptyHtml">When <c>true</c>, additionally checks whether the localized value contains empty HTML only and falls back to the default value if so.</param>
            <returns>Localized property</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalized(Smartstore.Core.Catalog.Categories.ICategoryNode,System.Linq.Expressions.Expression{System.Func{Smartstore.Core.Catalog.Categories.ICategoryNode,System.String}})">
            <summary>
            Get localized property of an <see cref="T:Smartstore.Core.Catalog.Categories.ICategoryNode"/> instance
            </summary>
            <param name="node">Node</param>
            <param name="keySelector">Key selector</param>
            <returns>Localized property</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalized(Smartstore.Core.Catalog.Categories.ICategoryNode,System.Linq.Expressions.Expression{System.Func{Smartstore.Core.Catalog.Categories.ICategoryNode,System.String}},System.Int32)">
            <summary>
            Get localized property of an <see cref="T:Smartstore.Core.Catalog.Categories.ICategoryNode"/> instance
            </summary>
            <param name="node">Node</param>
            <param name="keySelector">Key selector</param>
            /// <param name="languageId">Language identifier</param>
            <returns>Localized property</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalized(Smartstore.Core.Catalog.Categories.ICategoryNode,System.Linq.Expressions.Expression{System.Func{Smartstore.Core.Catalog.Categories.ICategoryNode,System.String}},Smartstore.Core.Localization.Language)">
            <summary>
            Get localized property of an <see cref="T:Smartstore.Core.Catalog.Categories.ICategoryNode"/> instance
            </summary>
            <param name="node">Node</param>
            <param name="keySelector">Key selector</param>
            /// <param name="language">Language</param>
            <returns>Localized property</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalizedSetting``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get localized property of an <see cref="T:Smartstore.Core.Configuration.ISettings"/> implementation
            </summary>
            <param name="settings">The settings instance</param>
            <param name="keySelector">Key selector</param>
            <returns>Localized property</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalizedSetting``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Object,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets localized value of an <see cref="T:Smartstore.Core.Configuration.ISettings"/> implementation.
            </summary>
            <param name="settings">The settings instance.</param>
            <param name="keySelector">Key selector.</param>
            <param name="requestLanguageIdOrObj">Language id, <see cref="T:Smartstore.Core.Localization.Language"/> object instance or <c>null</c>.</param>
            <param name="storeId">Store identifier. If <c>null</c>, store will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
            <param name="returnDefaultValue">A value indicating whether to return default value (if localized is not found).</param>
            <param name="ensureTwoPublishedLanguages">A value indicating whether to ensure that we have at least two published languages. Otherwise, load only default value.</param>
            <param name="detectEmptyHtml">When <c>true</c>, additionally checks whether the localized value contains empty HTML only and falls back to the default value if so.</param>
            <returns>Localized value.</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalizedSetting``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String[]}},System.Object,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets localized value of an <see cref="T:Smartstore.Core.Configuration.ISettings"/> implementation.
            </summary>
            <param name="settings">The settings instance.</param>
            <param name="keySelector">Key selector.</param>
            <param name="requestLanguageIdOrObj">Language id, <see cref="T:Smartstore.Core.Localization.Language"/> object instance or <c>null</c>.</param>
            <param name="storeId">Store identifier. If <c>null</c>, store will be obtained via <see cref="P:Smartstore.Core.Stores.IStoreContext.CurrentStore"/>.</param>
            <param name="returnDefaultValue">A value indicating whether to return default value (if localized is not found).</param>
            <param name="ensureTwoPublishedLanguages">A value indicating whether to ensure that we have at least two published languages. Otherwise, load only default value.</param>
            <param name="detectEmptyHtml">When <c>true</c>, additionally checks whether the localized value contains empty HTML only and falls back to the default value if so.</param>
            <returns>Localized value.</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalizedEnum``1(``0,System.Int32,System.Boolean)">
            <summary>
            Gets the localized value of an enum.
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="enumValue">Enum value.</param>
            <param name="languageId">Language identifier.</param>
            <param name="hint">A value indicating whether to load the hint.</param>
            <returns>Localized value of an enum.</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationExtensions.GetLocalizedModuleProperty``1(Smartstore.Engine.Modularity.IModuleDescriptor,System.String,System.Int32,System.Boolean)">
            <summary>
            Get localized property value of a module descriptor.
            </summary>
            <param name="module">Module descriptor</param>
            <param name="propertyName">Name of the property</param>
            <param name="languageId">Language identifier</param>
            <param name="doFallback">A value indicating whether to return default value (if localized is not found)</param>
            <returns>Localized value</returns>
        </member>
        <member name="T:Smartstore.Core.Localization.LocalizedValueExtensions">
            <summary>
            Wrapper for the most common string extension helpers used in views.
            Just here to avoid runtime exceptions in views after refactoring GetLocalized() helper.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.LocalizedString">
            <summary>
            An <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent"/> with localized resource string.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedString.Name">
            <summary>
            The name of the string resource.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedString.Value">
            <summary>
            The original resource string, prior to formatting with any constructor arguments.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedString.Arguments">
            <summary>
            Arguments to format <see cref="P:Smartstore.Core.Localization.LocalizedString.Value"/> with.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedString.IsResourceNotFound">
            <summary>
            Gets a flag that indicates if the resource is not found.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedString.JsValue">
            <summary>
            Returns a js encoded string which already contains double quote delimiters.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizedString.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizedString.ToString">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizedString.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizedString.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizedValue.FixBrackets(System.String,Smartstore.Core.Localization.ILanguage)">
            <summary>
            Fixes the flow of brackets within a text if the current page language has RTL flow.
            </summary>
            <param name="str">The test to fix.</param>
            <param name="currentLanguage">Current language</param>
            <returns></returns>
        </member>
        <member name="T:Smartstore.Core.Localization.IXmlResourceManager">
            <summary>
            Responsible for importing and exporting locale string resources from and to XML.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.IXmlResourceManager.ExportResourcesToXmlAsync(Smartstore.Core.Localization.Language)">
            <summary>
            Export language resources to xml
            </summary>
            <param name="language">Language</param>
            <returns>Result as XML string</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.IXmlResourceManager.ImportResourcesFromXmlAsync(Smartstore.Core.Localization.Language,System.Xml.XmlDocument,System.String,System.Boolean,Smartstore.Core.DataExchange.ImportModeFlags,System.Boolean)">
            <summary>
            Imports language resources from XML file. This method commits to db.
            </summary>
            <param name="language">Language</param>
            <param name="xmlDocument">XML document</param>
            <param name="rootKey">Prefix for resource key name</param>
            <param name="mode">Specifies whether resources should be inserted or updated (or both)</param>
            <param name="updateTouchedResources">Specifies whether user touched resources should also be updated</param>
            <returns>The number of processed (added or updated) resource entries</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.IXmlResourceManager.ImportModuleResourcesFromXmlAsync(Smartstore.Engine.Modularity.IModuleDescriptor,System.Collections.Generic.IList{Smartstore.Core.Localization.LocaleStringResource},System.Boolean,System.Collections.Generic.List{Smartstore.Core.Localization.Language})">
            <summary>
            Imports module resources from xml files in module's localization directory. 
            Note: Deletes existing resources before importing.
            This method commits to db.
            </summary>
            <param name="moduleDescriptor">Descriptor of the module</param>
            <param name="targetList">Load them into the passed list rather than database</param>
            <param name="updateTouchedResources">Specifies whether user touched resources should also be updated</param>	
            <param name="filterLanguages">Import only files for particular languages</param>
        </member>
        <member name="M:Smartstore.Core.Localization.IXmlResourceManager.FlattenResourceFile(System.Xml.XmlDocument)">
            <summary>
            Flattens all nested <c>LocaleResource</c> child nodes into a new document.
            </summary>
            <param name="source">The source xml resource file</param>
            <returns>
            Either a new document with flattened resources or - if no nesting is determined - 
            the original document, which was passed as <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Localization.IXmlResourceManager.CreateModuleResourcesHasher(Smartstore.Engine.Modularity.IModuleDescriptor)">
            <summary>
            Creates a directory hasher used to determine module localization changes across app startups.
            </summary>
            <param name="moduleDescriptor">Descriptor of the module</param>
            <returns>The hasher impl or <c>null</c> if the localization directory does not exist.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Smartstore.Core.Localization.IXmlResourceManager.GetLastResourceSetImportInfosAsync" -->
        <member name="M:Smartstore.Core.Localization.IXmlResourceManager.GetOnlineResourceSetsAsync(System.Threading.CancellationToken)">
            <summary>
            Loads information about all available resource sets from the endpoint specified by <see cref="P:Smartstore.Engine.SmartConfiguration.TranslateCheckUrl"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.IXmlResourceManager.DownloadResourceSetAsync(System.Int32,Smartstore.Core.Localization.ResourceSetsResponse,System.Threading.CancellationToken)">
            <summary>
            Downloads and imports string resources for a given resource set.
            </summary>
            <param name="setId">Identifier of the resource set to be downloaded.</param>
            <param name="response">Infos about all available online resource sets (e.g. download URL). See <see cref="M:Smartstore.Core.Localization.IXmlResourceManager.GetOnlineResourceSetsAsync(System.Threading.CancellationToken)"/>.</param>
            <returns><c>true</c> if the resources were successfully downloaded and imported. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.XmlResourceManager.FileNameRegEx">
            <remarks>
            Pattern:<br/>
            <code>^resources.(.+?).xml$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match a character in the set [Ee].<br/>
            ○ Match a character in the set [Ss].<br/>
            ○ Match a character in the set [Oo].<br/>
            ○ Match a character in the set [Uu].<br/>
            ○ Match a character in the set [Rr].<br/>
            ○ Match a character in the set [Cc].<br/>
            ○ Match a character in the set [Ee].<br/>
            ○ Match a character in the set [Ss].<br/>
            ○ Match any character other than '\n'.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character other than '\n' lazily at least once.<br/>
            ○ Match any character other than '\n'.<br/>
            ○ Match a character in the set [Xx].<br/>
            ○ Match a character in the set [Mm].<br/>
            ○ Match a character in the set [Ll].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Smartstore.Core.Localization.Routing.LocalizedRouteAttribute">
            <summary>
            Specifies a localized attribute route on a controller action method.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.Routing.LocalizedRouteAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Smartstore.Core.Localization.Routing.LocalizedRouteAttribute"/> with the given route template.
            </summary>
            <param name="template">The route template. May not be null.</param>
        </member>
        <member name="T:Smartstore.Core.Localization.CultureUrlFilter">
            <summary>
            Applies all configured rules for SEO friendly URLs.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.ILanguageResolver">
            <summary>
            Responsible for resolving the current customer's working language.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.ILanguageService">
            <summary>
            Language service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.IsMultiLanguageEnvironment(System.Int32)">
            <summary>
            Determines whether the given (or current) store has multiple active languages.
            </summary>
            <param name="storeId">The store id</param>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.GetAllLanguages(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Gets all (cached) languages.
            </summary>
            <param name="includeHidden">A value indicating whether to include hidden records</param>
            <param name="storeId">Load records only in specified store; pass 0 to load all records.</param>
            <param name="tracked">Whether to put entities to EF change tracker.</param>
            <returns>Language collection</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.GetAllLanguagesAsync(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Gets all (cached) languages.
            </summary>
            <param name="includeHidden">A value indicating whether to include hidden records</param>
            <param name="storeId">Load records only in specified store; pass 0 to load all records.</param>
            <param name="tracked">Whether to put entities to EF change tracker.</param>
            <returns>Language collection</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.IsPublishedLanguage(System.Int32,System.Int32)">
            <summary>
            Determines whether a language is active/published
            </summary>
            <param name="languageId">The id of the language to check</param>
            <param name="storeId">The store id</param>
            <returns><c>true</c> when the language is published, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.IsPublishedLanguageAsync(System.Int32,System.Int32)">
            <summary>
            Determines whether a language is active/published
            </summary>
            <param name="languageId">The id of the language to check</param>
            <param name="storeId">The store id</param>
            <returns><c>true</c> when the language is published, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.IsPublishedLanguage(System.String,System.Int32)">
            <summary>
            Determines whether a language is active/published
            </summary>
            <param name="seoCode">The SEO code of the language to check</param>
            <param name="storeId">The store id</param>
            <returns><c>true</c> when the language is published, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.IsPublishedLanguageAsync(System.String,System.Int32)">
            <summary>
            Determines whether a language is active/published
            </summary>
            <param name="seoCode">The SEO code of the language to check</param>
            <param name="storeId">The store id</param>
            <returns><c>true</c> when the language is published, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.GetMasterLanguageSeoCode(System.Int32)">
            <summary>
            Gets the seo code of the master (first) active language
            </summary>
            <param name="storeId">The store id</param>
            <returns>The seo code</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.GetMasterLanguageSeoCodeAsync(System.Int32)">
            <summary>
            Gets the seo code of the master (first) active language
            </summary>
            <param name="storeId">The store id</param>
            <returns>The seo code</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.GetMasterLanguageId(System.Int32)">
            <summary>
            Gets the id of the master (first) active language
            </summary>
            <param name="storeId">The store id</param>
            <returns>The language id</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILanguageService.GetMasterLanguageIdAsync(System.Int32)">
            <summary>
            Gets the id of the master (first) active language
            </summary>
            <param name="storeId">The store id</param>
            <returns>The language id</returns>
        </member>
        <member name="T:Smartstore.Core.Localization.ILocalizationFileResolver">
            <summary>
            Responsible for locating a localization file for client scripts
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizationFileResolver.Resolve(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Tries to find a matching localization file for a given culture in the following order 
            (assuming <paramref name="culture"/> is 'de-DE', <paramref name="virtualPath"/> is '~/scripts/lang-{lang}.js' and <paramref name="fallbackCulture"/> is 'en-US'):
            <list type="number">
            	<item>Exact match > lang-de-DE.js</item>
            	<item>Neutral culture > lang-de.js</item>
            	<item>Any region for language > lang-de-CH.js</item>
            	<item>Exact match for fallback culture > lang-en-US.js</item>
            	<item>Neutral fallback culture > lang-en.js</item>
            	<item>Any region for fallback language > lang-en-GB.js</item>
            </list>
            <para>
                <paramref name="virtualPath"/> must contain the {lang} substitution token in the file name segment for locale code replacement.
            </para>
            </summary>
            <param name="culture">The ISO culture code to get a localization file for, e.g. 'de-DE'</param>
            <param name="virtualPath">The virtual path including the {lang} substitution token.</param>
            <param name="cache">
            Whether caching should be enabled. If <c>false</c>, no attempt is made to read from cache, nor writing the result to the cache.
            Cache duration is 24 hours. Automatic eviction on file change is NOT performed.
            </param>
            <param name="fallbackCulture">Optional.</param>
            <returns>Result</returns>
        </member>
        <member name="T:Smartstore.Core.Localization.ILocalizationService">
            <summary>
            Localization service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizationService.GetResource(System.String,System.Int32,System.Boolean,System.String,System.Boolean)">
            <summary>
            Gets a resource string value for the given <paramref name="resourceKey"/>.
            </summary>
            <param name="resourceKey">A string representing a resource key.</param>
            <param name="languageId">Language identifier. Auto-resolves to working language id if <c>0</c>.</param>
            <param name="logIfNotFound">A value indicating whether to log a warning if locale string resource is not found.</param>
            <param name="defaultValue">Default value to return if resource is not found.</param>
            <param name="returnEmptyIfNotFound">A value indicating whether an empty string will be returned if a resource is not found and default value is set to empty string.</param>
            <returns>A string representing the requested resource string.</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizationService.GetLocalizedEnum``1(``0,System.Int32,System.Boolean)">
            <summary>
            Gets the localized value of an enum.
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="enumValue">Enum value.</param>
            <param name="languageId">Language identifier. Auto-resolves to working language id if <c>0</c>.</param>
            <param name="hint">A value indicating whether to load the hint.</param>
            <returns>Localized value of an enum.</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizationService.GetLocaleStringResourceByNameAsync(System.String)">
            <summary>
            Gets a locale string resource from database.
            </summary>
            <param name="resourceName">A string representing a resource name.</param>
            <returns>A tracked locale string resource entity</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizationService.GetLocaleStringResourceByNameAsync(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets a locale string resource from database.
            </summary>
            <param name="resourceName">A string representing a resource name.</param>
            <param name="languageId">Language identifier</param>
            <param name="logIfNotFound">A value indicating whether to log a warning if entity does not exist in database.</param>
            <returns>A tracked locale string resource entity</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizationService.DeleteLocaleStringResourcesAsync(System.String,System.Boolean)">
            <summary>
            Deletes all string resource entities with names beginning with <paramref name="key"/>.
            This is a batch operation that does not invoke any database save hooks.
            </summary>
            <param name="key">e.g. SmartStore.SomePluginName</param>
            <returns>Number of deleted string resource entities.</returns>
        </member>
        <member name="T:Smartstore.Core.Localization.LocalizedEntityOptions">
            <summary>
            Options for the <see cref="T:Smartstore.Core.Localization.LocalizedEntityDescriptorProvider"/>
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedEntityOptions.Delegates">
            <summary>
            A list of <see cref="T:Smartstore.Core.Localization.LoadLocalizedEntityDelegate"/>s used to load data from any custom source.
            Returned dynamic objects MUST contain the <c>Id</c> property as <see cref="T:System.Int32"/> and 
            the <c>KeyGroup</c> property as <see cref="T:System.String"/> alongside the actual
            localizable properties.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.ILocalizedEntityDescriptorProvider">
            <summary>
            Responsible for determining localized entity metadata for all active entity types,
            and for determining load delegates.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityDescriptorProvider.GetDescriptors">
            <summary>
            Gets a descriptor list of all localized entities that implement <see cref="T:Smartstore.Core.Localization.ILocalizedEntity"/>
            and decorate at least one property with the <see cref="T:Smartstore.Core.Localization.LocalizedEntityAttribute"/> attribute.
            Key is the entity type.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityDescriptorProvider.GetDelegates">
            <summary>
            Gets a list of all delegates that can load localized entity data from any custom source.
            Delegates can be registered by adding them to <see cref="P:Smartstore.Core.Localization.LocalizedEntityOptions.Delegates"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityDescriptorProviderExtensions.GetDescriptorByEntityType(Smartstore.Core.Localization.ILocalizedEntityDescriptorProvider,System.Type)">
            <summary>
            Gets a descriptor by given <paramref name="entityType"/>.
            </summary>
            <returns>The descriptor instance or <c>null</c> if not found.</returns>
        </member>
        <member name="T:Smartstore.Core.Localization.ILocalizedEntityLoader">
            <summary>
            Responsible for loading the default values of localizable properties from the database.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityLoader.GetGroupCount(Smartstore.Core.Localization.LocalizedEntityDescriptor)">
            <summary>
            Determines the count of all entities for the given group represented by <paramref name="descriptor"/>.
            Also applies <see cref="P:Smartstore.Core.Localization.LocalizedEntityDescriptor.FilterPredicate"/> if set.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityLoader.LoadGroup(Smartstore.Core.Localization.LocalizedEntityDescriptor)">
            <summary>
            Loads dynamically shaped entities for given <paramref name="descriptor"/>.
            The dynamic instances only contain properties as defined by <see cref="P:Smartstore.Core.Localization.LocalizedEntityDescriptor.Properties"/>,
            plus the <see cref="P:Smartstore.Domain.BaseEntity.Id"/> and <c>KeyGroup</c> properties.
            </summary>
            <param name="descriptor">The descriptor that contains metadata about the data to load.</param>
            <returns>A list of dynamic entities.</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityLoader.LoadGroupAsync(Smartstore.Core.Localization.LocalizedEntityDescriptor)">
            <inheritdoc cref="M:Smartstore.Core.Localization.ILocalizedEntityLoader.LoadGroup(Smartstore.Core.Localization.LocalizedEntityDescriptor)"/>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityLoader.LoadGroupPaged(Smartstore.Core.Localization.LocalizedEntityDescriptor,System.Int32)">
            <summary>
            Loads dynamically shaped entities for given <paramref name="descriptor"/> as a paged list.
            The dynamic instances only contain properties as defined by <see cref="P:Smartstore.Core.Localization.LocalizedEntityDescriptor.Properties"/>,
            plus the <see cref="P:Smartstore.Domain.BaseEntity.Id"/> and <c>KeyGroup</c> properties.
            </summary>
            <param name="descriptor">The descriptor that contains metadata about the data to load.</param>
            <param name="pageSize">Size of paged data</param>
            <returns>The <see cref="T:Smartstore.Data.DynamicFastPager"/> instead used to iterate through all data pages.</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityLoader.LoadByDelegateAsync(Smartstore.Core.Localization.LoadLocalizedEntityDelegate)">
            <summary>
            Loads localized entities by calling the given <paramref name="delegate"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityLoader.LoadAllAsync(System.Threading.CancellationToken)">
            <summary>
            Loads just everything from every known group and every registered delegate.
            Call this method to conveniently enumerate all data, but DON'T convert the result
            - which is just a deferred iterator - to list, array or dictionary.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.ILocalizedEntityService">
            <summary>
            Localized entity service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityService.GetLocalizedValue(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Finds a localized value.
            </summary>
            <param name="languageId">Language identifier</param>
            <param name="entityId">Entity identifier</param>
            <param name="localeKeyGroup">Locale key group</param>
            <param name="localeKey">Locale key</param>
            <returns>Found localized value</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityService.GetLocalizedValueAsync(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Finds a localized value.
            </summary>
            <param name="languageId">Language identifier</param>
            <param name="entityId">Entity identifier</param>
            <param name="localeKeyGroup">Locale key group</param>
            <param name="localeKey">Locale key</param>
            <returns>Found localized value</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityService.PrefetchLocalizedPropertiesAsync(System.String,System.Int32,System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Prefetches a collection of localized properties for a range of entities in one go
            and caches them for the duration of the current request.
            </summary>
            <param name="localeKeyGroup">Locale key group (scope)</param>
            <param name="entityIds">
            The entity ids to prefetch translations for. Can be null,
            in which case all translations for the requested scope are loaded.
            </param>
            <param name="isRange">Whether <paramref name="entityIds"/> represents a range of ids (perf).</param>
            <param name="isSorted">Whether <paramref name="entityIds"/> is already sorted (perf).</param>
            <remarks>
            Be careful not to load large amounts of data at once (e.g. for "Product" scope with large range).
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityService.GetLocalizedPropertyCollectionAsync(System.String,System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Gets a collection of localized properties for a range of entities in one go.
            </summary>
            <param name="localeKeyGroup">Locale key group (scope)</param>
            <param name="entityIds">
            The entity ids to load translations for. Can be null,
            in which case all translations for the requested scope are loaded.
            </param>
            <param name="isRange">Whether <paramref name="entityIds"/> represents a range of ids (perf).</param>
            <param name="isSorted">Whether <paramref name="entityIds"/> is already sorted (perf).</param>
            <returns>Localized property collection</returns>
            <remarks>
            Be careful not to load large amounts of data at once (e.g. for "Product" scope with large range).
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityService.ApplyLocalizedValueAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String,System.Int32)">
            <summary>
            Applies a localized property value. The caller is responsible for database commit.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="entity">Entity</param>
            <param name="keySelector">Key selector</param>
            <param name="value">Locale value</param>
            <param name="languageId">Language ID</param>
            <returns>
            The <see cref="T:Smartstore.Core.Localization.LocalizedProperty"/> instance that was affected by this operation.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityService.ApplyLocalizedValueAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Int32)">
            <summary>
            Applies a localized property value. The caller is responsible for database commit.
            </summary>
            <typeparam name="T">Type</typeparam>
            <typeparam name="TPropType">Property type</typeparam>
            <param name="entity">Entity</param>
            <param name="keySelector">Key selector</param>
            <param name="value">Locale value</param>
            <param name="languageId">Language ID</param>
            <returns>
            The <see cref="T:Smartstore.Core.Localization.LocalizedProperty"/> instance that was affected by this operation.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityService.ApplyLocalizedSettingAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Int32,System.Int32)">
            <summary>
            Applies a localized setting property value. The caller is responsible for database commit.
            </summary>
            <typeparam name="TSetting">Setting impl type</typeparam>
            <typeparam name="TPropType">Property type</typeparam>
            <param name="settings">Settings instance</param>
            <param name="keySelector">Key selector</param>
            <param name="value">Locale value</param>
            <param name="languageId">Language ID</param>
            <param name="storeId">Store ID</param>
            <returns>
            The <see cref="T:Smartstore.Core.Localization.LocalizedProperty"/> instance that was affected by this operation.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityService.ApplyLocalizedValue(Smartstore.Core.Localization.LocalizedProperty,System.Int32,System.String,System.String,System.Object,System.Int32)">
            <summary>
            Applies a localized property value. The caller is responsible for database commit.
            </summary>
            <param name="localizedProperty">The localized property to be updated. Will be created if <c>null</c>.</param>
            <param name="entityId">The identifier of the entity the localized property belongs to.</param>
            <param name="localeKeyGroup">Locale key group (scope).</param>
            <param name="localeKey">Locale key.</param>
            <param name="value">Localized value.</param>
            <param name="languageId">The language identifier.</param>
            <returns>
            The passed <paramref name="localizedProperty"/> or any <see cref="T:Smartstore.Core.Localization.LocalizedProperty"/> instance that was affected by this operation.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Localization.ILocalizedEntityService.ClearCacheAsync">
            <summary>
            Clears the value cache completely.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.LanguageService.GetStoreLanguageMap">
            <summary>
            Gets a map of active/published store languages
            </summary>
            <returns>A map of store languages where key is the store id and values are tuples of language ids and seo codes</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.LanguageService.GetStoreLanguageMapAsync">
            <summary>
            Gets a map of active/published store languages
            </summary>
            <returns>A map of store languages where key is the store id and values are tuples of language ids and seo codes</returns>
        </member>
        <member name="F:Smartstore.Core.Localization.LocalizationService.CACHE_SEGMENT_KEY">
            <summary>
            0 = language id
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizationService.ClearCacheSegmentAsync(System.Nullable{System.Int32})">
            <summary>
            Clears the cached resource segment from the cache
            </summary>
            <param name="languageId">Language Id. If <c>null</c>, segments for all cached languages will be invalidated</param>
        </member>
        <member name="F:Smartstore.Core.Localization.LocalizedEntityService.LOCALIZEDPROPERTY_SEGMENT_KEY">
            <summary>
            0 = segment (keygroup.key.idrange), 1 = language id
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.LocalizedEntityService.ClearCacheSegmentAsync(System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Clears the cached segment from the cache
            </summary>
        </member>
        <member name="T:Smartstore.Core.Localization.RequestCultureMiddleware">
            <summary>
            Uses culture from current working language and sets globalization clients scripts accordingly.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.CultureHelper.IsValidCultureCode(System.String)">
            <summary>
            Checks whether the given <paramref name="locale"/> is a
            culture code which is supported by the .NET framework.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Localization.CultureHelper.GetValidCultureCode(System.String)">
            <summary>
            Gets a valid culture code for <paramref name="locale"/> if it is not valid.
            Otherwise <paramref name="locale"/> is returned.
            </summary>
            <example>Returns "zh-Hans-CN" for "zh-CN".</example>
        </member>
        <member name="M:Smartstore.Core.Localization.CultureHelper.EnumerateParentCultures(System.String)">
            <summary>
            Enumerates all parent cultures, excluding the top-most invariant culture
            </summary>
            <param name="locale">The ISO culture code, e.g. de-DE, en-US or just en</param>
            <returns>Parent cultures</returns>
        </member>
        <member name="M:Smartstore.Core.Localization.CultureHelper.EnumerateParentCultures(System.Globalization.CultureInfo)">
            <summary>
            Enumerates all parent cultures, excluding the top-most invariant culture
            </summary>
            <param name="culture">The culture info to enumerate parents for</param>
            <returns>Parent cultures</returns>
        </member>
        <member name="P:Smartstore.Core.Localization.CultureHelper.IsRtl">
            <summary>
            Gets a value indicating whether the current culture's TextInfo object
            represents a writing system where text flows from right to left.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Localization.LocalizedUrlHelper.FullPath">
            <summary>
            Full path: PathBase + Path
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smartstore.Core.Logging.ActivityLog">
            <summary>
            Represents an activity log record
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.ActivityLog.ActivityLogTypeId">
            <summary>
            Gets or sets the activity log type identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.ActivityLog.CustomerId">
            <summary>
            Gets or sets the customer identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.ActivityLog.Comment">
            <summary>
            Gets or sets the activity comment
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.ActivityLog.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of instance creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.ActivityLog.ActivityLogType">
            <summary>
            Gets the activity log type
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.ActivityLog.Customer">
            <summary>
            Gets the customer
            </summary>
        </member>
        <member name="T:Smartstore.Core.Logging.ActivityLogType">
            <summary>
            Represents an activity log type record
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.ActivityLogType.SystemKeyword">
            <summary>
            Gets or sets the system keyword
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.ActivityLogType.Name">
            <summary>
            Gets or sets the display name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.ActivityLogType.Enabled">
            <summary>
            Gets or sets a value indicating whether the activity log type is enabled
            </summary>
        </member>
        <member name="T:Smartstore.Core.Logging.LogLevel">
            <summary>
            Represents a log level
            </summary>
        </member>
        <member name="T:Smartstore.Core.Logging.Log">
            <summary>
            Represents a log record
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.LogLevelId">
            <summary>
            Gets or sets the log level identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.ShortMessage">
            <summary>
            Gets or sets the short message
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.FullMessage">
            <summary>
            Gets or sets the full exception
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.IpAddress">
            <summary>
            Gets or sets the IP address
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.CustomerId">
            <summary>
            Gets or sets the customer identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.PageUrl">
            <summary>
            Gets or sets the page URL
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.ReferrerUrl">
            <summary>
            Gets or sets the referrer URL
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of instance creation
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.Logger">
            <summary>
            Gets or sets the logger name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.HttpMethod">
            <summary>
            Gets or sets the HTTP method
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.UserName">
            <summary>
            Gets or sets the user name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.LogLevel">
            <summary>
            Gets or sets the log level
            </summary>
        </member>
        <member name="P:Smartstore.Core.Logging.Log.Customer">
            <summary>
            Gets or sets the customer
            </summary>
        </member>
        <member name="T:Smartstore.Core.Logging.IActivityLogger">
            <summary>
            Responsible for logging customer activities
            </summary>
        </member>
        <member name="M:Smartstore.Core.Logging.IActivityLogger.GetAllActivityTypes">
            <summary>
            Gets all activity log type entities as untracked from cache.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Logging.IActivityLogger.GetActivityTypeByKeyword(System.String)">
            <summary>
            Gets an activity log type as untracked by its system keyword from cache.
            </summary>
            <param name="keyword">The log type's system keyword</param>
        </member>
        <member name="M:Smartstore.Core.Logging.IActivityLogger.LogActivity(System.String,System.String,System.Object[])">
            <summary>
            Logs a customer activity by automatically resolving the current customer. This method does NOT commit to database.
            </summary>
            <param name="activity">The system keyword of the activity.</param>
            <param name="comment">The activity comment</param>
            <param name="commentParams">The activity comment parameters to format <paramref name="comment"/> with.</param>
            <returns>Transient activity log item</returns>
        </member>
        <member name="M:Smartstore.Core.Logging.IActivityLogger.LogActivity(System.String,System.String,Smartstore.Core.Identity.Customer,System.Object[])">
            <summary>
            Logs a customer activity. This method does NOT commit to database.
            </summary>
            <param name="activity">The system keyword of the activity.</param>
            <param name="comment">The activity comment</param>
            <param name="customer">The customer who performs the activity.</param>
            <param name="commentParams">The activity comment parameters to format <paramref name="comment"/> with.</param>
            <returns>Transient activity log item</returns>
        </member>
        <member name="M:Smartstore.Core.Logging.IActivityLogger.ClearAllActivitiesAsync(System.Threading.CancellationToken)">
            <summary>
            Clears ALL activities from database by TRUNCATING the table and resetting the id increment. THINK TWICE!!
            </summary>
        </member>
        <member name="T:Smartstore.Core.Logging.IDbLogService">
            <summary>
            Manager for log entity database storage.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Logging.IDbLogService.ClearLogsAsync(System.Threading.CancellationToken)">
            <summary>
            Truncates the log table completely and sets the auto-increment to 0.
            </summary>
            <param name="cancelToken">Cancellation token</param>
            <returns>Numer of deleted log entities.</returns>
        </member>
        <member name="M:Smartstore.Core.Logging.IDbLogService.ClearLogsAsync(System.DateTime,Smartstore.Core.Logging.LogLevel,System.Threading.CancellationToken)">
            <summary>
            Deletes log entities from database.
            </summary>
            <param name="maxAgeUtc">
            Max UTC date of log entities to delete (inclusive).
            </param>
            <param name="maxLevel">
            Max level of log entities to delete (exclusive).
            </param>
            <param name="cancelToken">Cancellation token</param>
            <returns>Numer of deleted log entities.</returns>
        </member>
        <member name="T:Smartstore.Core.Logging.INotifier">
            <summary>
            Represents a UI notifier
            </summary>
        </member>
        <member name="M:Smartstore.Core.Logging.INotifier.Add(Smartstore.Core.Logging.NotifyType,System.String,System.Boolean)">
            <summary>
            Adds a notification to the queue.
            </summary>
            <param name="type">Type of notification</param>
            <param name="message">Message</param>
        </member>
        <member name="P:Smartstore.Core.Logging.INotifier.Entries">
            <summary>
            Gets all queued notifications for the current request.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Logging.NotifyEntriesHolder">
            <summary>
            For proper JSON serialization
            </summary>
        </member>
        <member name="T:Smartstore.Core.Logging.TraceLogger">
            <summary>
            Provides simple logging into a file.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Logging.TraceLogger.#ctor(Smartstore.IO.IFile,System.Nullable{System.Boolean})">
            <summary>
            Trace logger ctor.
            </summary>
            <param name="file">File. Created when it does not exist.</param>
            <param name="append"><c>true</c> to append log entries to the file; <c>false</c> to overwrite the file.</param>
        </member>
        <member name="T:Smartstore.Core.Logging.Tasks.DeleteLogsTask">
            <summary>
            A task that periodically deletes log entries.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccountSettings.DefaultEmailAccountId">
            <summary>
            Gets or sets the identifier of the default email account.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccountSettings.PickupDirectoryLocation">
            <summary>
            Gets or sets a folder where mail messages should be saved (instead of sending them).
            For debug and test purposes only.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccountSettings.MailSendingDelay">
            <summary>
            Gets or sets a delay for sending queued mails (in milliseconds). Set 0 to send without delay.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.Campaign">
            <summary>
            Represents a campaign.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Campaign.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Campaign.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Campaign.Body">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Campaign.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of entity creation.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Campaign.LimitedToStores">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Campaign.SubjectToAcl">
            <summary>
            Gets or sets a value indicating whether the entity is subject to ACL.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.EmailAccount">
            <summary>
            Represents an email account.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccount.Email">
            <summary>
            Gets or sets an email address.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccount.DisplayName">
            <summary>
            Gets or sets an email display name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccount.Host">
            <summary>
            Gets or sets an email host.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccount.Port">
            <summary>
            Gets or sets an email port.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccount.Username">
            <summary>
            Gets or sets an email user name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccount.Password">
            <summary>
            Gets or sets an email password.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccount.SecureOption">
            <summary>
            Gets or sets the option value for SSL and/or TLS encryption to use.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccount.MailSecureOption">
            <summary>
            Gets or sets an option for SSL and/or TLS encryption to use.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccount.UseDefaultCredentials">
            <summary>
            Gets or sets a value that controls whether the default system credentials of the application are sent with requests.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.EmailAccount.FriendlyName">
            <summary>
            Gets a friendly email account name.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Messaging.EmailAttachmentStorageLocation.Blob">
            <summary>
            Attachment is embedded as Blob
            </summary>
        </member>
        <member name="F:Smartstore.Core.Messaging.EmailAttachmentStorageLocation.FileReference">
            <summary>
            Attachment is a reference to <see cref="T:Smartstore.Core.Content.Media.MediaFile"/>
            </summary>
        </member>
        <member name="F:Smartstore.Core.Messaging.EmailAttachmentStorageLocation.Path">
            <summary>
            Attachment is located on disk (physical or virtual path)
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.IModelPart">
            <summary>
            Used to transfer miscellaneous data to the template engine
            which is merged with the generic "Bag" part.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.MessageContext">
            <summary>
            A context object which contains all required and optional information
            for the creation of message templates.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageContext.MessageTemplate">
            <summary>
            The source message template. Required if <see cref="P:Smartstore.Core.Messaging.MessageContext.MessageTemplateName"/> is empty.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageContext.MessageTemplateName">
            <summary>
            The source message template name. Required if <see cref="P:Smartstore.Core.Messaging.MessageContext.MessageTemplate"/> is null.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageContext.SenderMailAddress">
            <summary>
            If <c>null</c>, the email account specifies the sender.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageContext.Customer">
            <summary>
            If <c>null</c>, obtained from WorkContext.CurrentCustomer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageContext.LanguageId">
            <summary>
            If <c>null</c>, obtained from WorkContext.WorkingLanguage.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageContext.StoreId">
            <summary>
            If <c>null</c>, obtained from StoreContext.CurrentStore.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageContext.BaseUri">
            <summary>
            If <c>null</c>, obtained from <see cref="M:Smartstore.Core.Stores.Store.GetBaseUrl"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageContext.Model">
            <summary>
            The final template model containing all global and template specific model parts.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageContext.FormatProvider">
            <summary>
            If <c>null</c>, inferred from <see cref="P:Smartstore.Core.Messaging.MessageContext.LanguageId"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.MessageTemplate">
            <summary>
            Represents a message template.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.ModelTypes">
            <summary>
            A comma separated list of required model types (e.g.: Product, Order, Customer, GiftCard).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.BccEmailAddresses">
            <summary>
            Gets or sets the BCC Email addresses.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.Body">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.IsActive">
            <summary>
            Gets or sets a value indicating whether the template is active.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.EmailAccountId">
            <summary>
            Gets or sets the used email account identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.LimitedToStores">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.SendManually">
            <summary>
            Gets or sets a value indicating whether emails derived from the template are only send manually.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.Attachment1FileId">
            <summary>
            Gets or sets the attachment 1 file identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.Attachment2FileId">
            <summary>
            Gets or sets the attachment 2 file identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.MessageTemplate.Attachment3FileId">
            <summary>
            Gets or sets the attachment 3 file identifier.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.NewsletterSubscriber">
            <summary>
            Represents a newsletter subscriber with associated subscription and customer.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.NewsletterSubscriber.Subscription">
            <summary>
            Newsletter subscription.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.NewsletterSubscriber.Customer">
            <summary>
            The customer associated with the newsletter subscription. Can be <c>null</c>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.NewsletterSubscription">
            <summary>
            Represents NewsletterSubscription entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.NewsletterSubscription.NewsletterSubscriptionGuid">
            <summary>
            Gets or sets the newsletter subscription GUID.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.NewsletterSubscription.Email">
            <summary>
            Gets or sets the subscriber email.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.NewsletterSubscription.Active">
            <summary>
            Gets or sets a value indicating whether subscription is active.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.NewsletterSubscription.CreatedOnUtc">
            <summary>
            Gets or sets the date and time when subscription was created.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.NewsletterSubscription.StoreId">
            <summary>
            Gets or sets the store identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.NewsletterSubscription.WorkingLanguageId">
            <summary>
            Gets or sets the language identifier.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.QueuedEmail">
            <summary>
            Represents a queued email item.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.From">
            <summary>
            Gets or sets the From property.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.To">
            <summary>
            Gets or sets the To property.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.ReplyTo">
            <summary>
            Gets or sets the ReplyTo property.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.CC">
            <summary>
            Gets or sets the CC.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.Bcc">
            <summary>
            Gets or sets the Bcc.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.Body">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.CreatedOnUtc">
            <summary>
            Gets or sets the date and time of item creation in UTC.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.SentTries">
            <summary>
            Gets or sets the send tries.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.SentOnUtc">
            <summary>
            Gets or sets the sent date and time.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.EmailAccountId">
            <summary>
            Gets or sets the used email account identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.SendManually">
            <summary>
            Gets or sets a value indicating whether emails are only send manually.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.EmailAccount">
            <summary>
            Gets the email account.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmail.Attachments">
            <summary>
            Gets or sets the collection of attachments.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.QueuedEmailAttachment">
            <summary>
            Represents an e-mail attachment.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.QueuedEmailId">
            <summary>
            Gets or sets the queued email identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.QueuedEmail">
            <summary>
            Gets or sets the queued email entity instance.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.StorageLocation">
            <summary>
            Gets or sets the storage location.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.Path">
            <summary>
            A physical or virtual path to the file (only applicable if location is <c>Path</c>).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.MediaFileId">
            <summary>
            The id of a <see cref="T:Smartstore.Core.Content.Media.MediaFile"/> record (only applicable if location is <c>FileReference</c>).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.MediaFile">
            <summary>
            Gets the file object.
            </summary>
            <remarks>
            This property is not named <c>Download</c> on purpose, because we're going to rename Download to File in a future release.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.Name">
            <summary>
            The attachment file name (without path).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.MimeType">
            <summary>
            The attachment file's mime type, e.g. <c>application/pdf</c>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.MediaStorageId">
            <summary>
            Gets or sets the media storage identifier (when location is BLOB).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.IsEmbedded">
            <summary>
            Whether attachment is embedded in mail body.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.ContentId">
            <summary>
            Unique content id of attachment used to reference embedded attachment from HTML body.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.QueuedEmailAttachment.MediaStorage">
            <summary>
            Gets or sets the media storage (when location is BLOB).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Messaging.TemplateModel.Evaluate(System.String)">
            <summary>
            Tries to resolve an object by splitting the given <paramref name="expression"/>
            by dot ('.') and traversing the model deeply.
            </summary>
            <param name="expression">The key expression</param>
            <returns>The found result object or <c>null</c></returns>
        </member>
        <member name="T:Smartstore.Core.Messaging.Events.MessageModelCreatedEvent">
            <summary>
            Published after the message model has been completely created.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Events.MessageModelCreatedEvent.Model">
            <summary>
            The resulting message model.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.Events.MessageModelPartCreatedEvent`1">
            <summary>
            Published after the creation of a single message model part has been completed.
            </summary>
            <typeparam name="T">Type of source entity</typeparam>
        </member>
        <member name="P:Smartstore.Core.Messaging.Events.MessageModelPartCreatedEvent`1.Source">
            <summary>
            The source object for which the model part has been created, e.g. a Product entity.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Events.MessageModelPartCreatedEvent`1.Part">
            <summary>
            The resulting model part.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.Events.MessageModelPartMappingEvent">
            <summary>
            Published when a system mapper is missing for a particular model type (e.g. a custom entity in a module).
            Implementors should subscribe to this event in order to provide a corresponding dynamic model part.
            The result model should be assigned to the <see cref="P:Smartstore.Core.Messaging.Events.MessageModelPartMappingEvent.Result"/> property. If this property
            is still <c>null</c>, the source is used as model part instead.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Events.MessageModelPartMappingEvent.Source">
            <summary>
            The source object for which a model part should be created.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Events.MessageModelPartMappingEvent.MessageContext">
            <summary>
            The message context.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Events.MessageModelPartMappingEvent.Result">
            <summary>
            The resulting model part.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Events.MessageModelPartMappingEvent.ModelPartName">
            <summary>
            The name of the model part. If <c>null</c> the source's type name is used.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.Events.MessageQueuingEvent">
            <summary>
            An event message which gets published just before a new instance of <see cref="P:Smartstore.Core.Messaging.Events.MessageQueuingEvent.QueuedEmail"/> is persisted to the database.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.Events.PreviewModelResolveEvent">
            <summary>
            Published when preview/test model for given <see cref="P:Smartstore.Core.Messaging.Events.PreviewModelResolveEvent.ModelName"/> could not be resolved.
            This event gives module devs the opportunity to create and provide a preview message model
            by assigning a model instance to <see cref="P:Smartstore.Core.Messaging.Events.PreviewModelResolveEvent.Result"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Events.PreviewModelResolveEvent.ModelName">
            <summary>
            The model/entity name to resolve a preview model for.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.Events.PreviewModelResolveEvent.Result">
            <summary>
            The resulting message preview model.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Messaging.NewsletterMessageFactoryExtensions.SendNewsletterSubscriptionActivationMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Messaging.NewsletterSubscription,System.Int32)">
            <summary>
            Sends a newsletter subscription activation message.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Messaging.NewsletterMessageFactoryExtensions.SendNewsletterSubscriptionDeactivationMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Messaging.NewsletterSubscription,System.Int32)">
            <summary>
            Sends a newsletter subscription deactivation message.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Messaging.ICampaignService.SendCampaignAsync(Smartstore.Core.Messaging.Campaign,System.Threading.CancellationToken)">
            <summary>
            Sends a campaign newsletter to newsletter subscribers.
            </summary>
            <returns>Number of queued messages.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.ICampaignService.CreateCampaignMessageAsync(Smartstore.Core.Messaging.Campaign,Smartstore.Core.Messaging.NewsletterSubscriber)">
            <summary>
            Creates a campaign message for the specified subscriber.
            Caller is responsible for database commit.
            </summary>
            <param name="campaign">Campaign.</param>
            <param name="subscriber">Newsletter subscriber.</param>
            <returns>Message result.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.ICampaignService.PreviewAsync(Smartstore.Core.Messaging.Campaign)">
            <summary>
            Creates a campaign email without sending it for previewing and testing purposes.
            </summary>
            <param name="campaign">The campaign to preview</param>
            <returns>The preview result.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IEmailAccountService.GetDefaultEmailAccount">
            <summary>
            Gets the default email account.
            </summary>
            <returns>Email account</returns>
        </member>
        <member name="T:Smartstore.Core.Messaging.CreateMessageResult">
            <summary>
            Contains the result data of a <see cref="M:Smartstore.Core.Messaging.IMessageFactory.CreateMessageAsync(Smartstore.Core.Messaging.MessageContext,System.Boolean,System.Object[])"/> call.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.CreateMessageResult.Email">
            <summary>
            The queued email instance which can be saved to the database.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.CreateMessageResult.Model">
            <summary>
            The final model which contains all global and template specific model parts.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Messaging.CreateMessageResult.MessageContext">
            <summary>
            The message context used to create the message.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.IMessageFactory">
            <summary>
            Creates and optionally queues email messages.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageFactory.CreateMessageAsync(Smartstore.Core.Messaging.MessageContext,System.Boolean,System.Object[])">
            <summary>
            Creates an email message.
            </summary>
            <param name="messageContext">Contains all data required for creating a message.</param>
            <param name="queue">If <c>true</c>, the created email message will automatically be queued for sending (saved in database as a <see cref="T:Smartstore.Core.Messaging.QueuedEmail"/>).</param>
            <param name="modelParts">
            All model objects that are necessary to render the template (in no particular order).
            The passed object instances will be converted to special types which the underlying <see cref="T:Smartstore.Templating.ITemplateEngine"/> can handle.
            <see cref="T:Smartstore.Core.Messaging.IMessageModelProvider"/> is responsible for the conversion. See also <seealso cref="M:Smartstore.Core.Messaging.IMessageModelProvider.AddModelPartAsync(System.Object,Smartstore.Core.Messaging.MessageContext,System.String)"/>.
            </param>
            <returns>Contains the message creation result.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageFactory.QueueMessageAsync(Smartstore.Core.Messaging.MessageContext,Smartstore.Core.Messaging.QueuedEmail)">
            <summary>
            Queues a message created by <see cref="M:Smartstore.Core.Messaging.IMessageFactory.CreateMessageAsync(Smartstore.Core.Messaging.MessageContext,System.Boolean,System.Object[])"/>.
            </summary>
            <param name="messageContext">The message context used to create the message.</param>
            <param name="queuedEmail">The instance of <see cref="T:Smartstore.Core.Messaging.QueuedEmail"/> to queue, e.g. obtained from <see cref="P:Smartstore.Core.Messaging.CreateMessageResult.Email"/>.</param>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageFactory.GetTestModelsAsync(Smartstore.Core.Messaging.MessageContext)">
            <summary>
            Gets an array of suitable test model parts during preview mode. The message template defines
            which model part types are required (a comma-separated type list in <see cref="P:Smartstore.Core.Messaging.MessageTemplate.ModelTypes"/>).
            The framework tries to load a random entity for each defined type from the database. If the table does not contain any records,
            <see cref="M:Smartstore.Templating.ITemplateEngine.CreateTestModelFor(Smartstore.Domain.BaseEntity,System.String)"/> gets called internally to obtain a test model wrapper with sample data.
            </summary>
            <param name="messageContext">The message context used to create the message.</param>
            <returns>An array of model parts which can be passed to <see cref="M:Smartstore.Core.Messaging.IMessageFactory.CreateMessageAsync(Smartstore.Core.Messaging.MessageContext,System.Boolean,System.Object[])"/>.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageFactoryExtensions.SendContactUsMessageAsync(Smartstore.Core.Messaging.IMessageFactory,Smartstore.Core.Identity.Customer,System.String,System.String,System.String,System.String,Smartstore.Net.Mail.MailAddress,System.Int32)">
            <summary>
            Sends the "ContactUs" message to the store owner.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.IMessageModelProvider">
            <summary>
            Responsible for building the message template model.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageModelProvider.AddGlobalModelPartsAsync(Smartstore.Core.Messaging.MessageContext)">
            <summary>
            Creates and adds all global model parts to the template model (<seealso cref="P:Smartstore.Core.Messaging.MessageContext.Model"/>):
            <para>
            	<list type="bullet">
            		<item>Context (contains meta infos like template name, language etc.)</item>
            		<item>Customer (obtained from <paramref name="messageContext"/> <see cref="P:Smartstore.Core.Messaging.MessageContext.Customer"/> property)</item>
            		<item>Store (obtained from <paramref name="messageContext"/> <see cref="P:Smartstore.Core.Messaging.MessageContext.Store"/> property)</item>
            		<item>Email (the <see cref="T:Smartstore.Core.Messaging.EmailAccount"/>)</item>
            		<item>Theme (some theming variables, mostly colors)</item>
            	</list>
            </para>
            </summary>
            <param name="messageContext">Contains all data required for building a model part and creating a message</param>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageModelProvider.AddModelPartAsync(System.Object,Smartstore.Core.Messaging.MessageContext,System.String)">
            <summary>
            Adds a template specific model part to the template model.
            The passed object instance (<paramref name="part"/>) will be converted to a special type which the underlying <see cref="T:Smartstore.Templating.ITemplateEngine"/> can handle.
            <para>
            	Supported types are: Order, Product, Address, Shipment, OrderNote, 
            	RecurringPayment, ReturnRequest, GiftCard, <see cref="T:Smartstore.Core.Messaging.NewsletterSubscription"/>, <see cref="T:Smartstore.Core.Messaging.Campaign"/>, 
            	ProductReview, BlogComment, NewsComment, ForumTopic, ForumPost, Forum, PrivateMessage.
            </para>
            <para>
            	Furthermore, any object implementing <see cref="T:Smartstore.Core.Messaging.IModelPart"/> or <see cref="T:Smartstore.Core.Messaging.INamedModelPart"/> can also be passed as model part.
            	The first merges all entries within the passed object with the special <c>Bag</c> entry, the latter creates a whole
            	new entry using the name provided by its <see cref="P:Smartstore.Core.Messaging.INamedModelPart.ModelPartName"/> property.
            </para>
            <para>
            	If an unsupported object is passed, the framework will publish the <see cref="T:Smartstore.Core.Messaging.Events.MessageModelPartMappingEvent"/> event, giving
            	a subscriber the chance to provide a converted model object and a part name.
            </para>
            </summary>
            <param name="part">The model part instance to convert and add to the final model.</param>
            <param name="messageContext">Contains all data required for building a model part and creating a message</param>
            <param name="name">
            The name to use for the model part in the final model. If <c>null</c>, the framework tries to infer the name.
            See also <see cref="M:Smartstore.Core.Messaging.IMessageModelProvider.ResolveModelName(System.Object)"/>
            </param>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageModelProvider.CreateModelPartAsync(System.Object,System.Boolean,System.String[])">
            <summary>
            Creates a serializable model object for the passed entity/object.
            <para>
            	Supported types are: Order, Product, Address, Shipment, OrderNote, 
            	RecurringPayment, ReturnRequest, GiftCard, <see cref="T:Smartstore.Core.Messaging.NewsletterSubscription"/>, <see cref="T:Smartstore.Core.Messaging.Campaign"/>, 
            	ProductReview, BlogComment, NewsComment, ForumTopic, ForumPost, Forum, PrivateMessage.
            </para>
            <para>
            	Furthermore, any object implementing <see cref="T:Smartstore.Core.Messaging.IModelPart"/> or <see cref="T:Smartstore.Core.Messaging.INamedModelPart"/> can also be passed as model part.
            	The first merges all entries within the passed object with the special <c>Bag</c> entry, the latter creates a whole
            	new entry using the name provided by its <see cref="P:Smartstore.Core.Messaging.INamedModelPart.ModelPartName"/> property.
            </para>
            <para>
            	If an unsupported object is passed, <c>null</c> is returned
            </para>
            </summary>
            <param name="part">The model part instance to convert.</param>
            <param name="ignoreNullMembers">Whether members/properties with null values should be excluded from the result model.</param>
            <param name="ignoreMemberNames">Optional list of member/property names to exclude from the result model.</param>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageModelProvider.ResolveModelName(System.Object)">
            <summary>
            Tries to infer the model part name by type:
            <list type="bullet">
            	<item>When <paramref name="model"/> is a plain object: type name</item>
            	<item>When <paramref name="model"/> is <see cref="T:Smartstore.Core.Messaging.INamedModelPart"/>: <c>ModelPartName</c> property</item>
            </list>
            </summary>
            <param name="model">The model part instance to resolve a name for.</param>
            <returns>The inferred name or <c>null</c></returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageModelProvider.BuildModelTree(Smartstore.Core.Messaging.TemplateModel)">
            <summary>
            Build a model metadata tree for a final template model. Model trees are used
            on the client to provide autocomplete information.
            </summary>
            <param name="model">The final template model to build a model tree for.</param>
            <returns>A hierarchy of <see cref="T:Smartstore.Core.Messaging.ModelTreeMember"/> instances.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageModelProvider.GetLastModelTreeAsync(System.String)">
            <summary>
            Gets the last known model metadata tree for a particular template.
            See also <see cref="M:Smartstore.Core.Messaging.IMessageModelProvider.BuildModelTree(Smartstore.Core.Messaging.TemplateModel)"/>
            </summary>
            <param name="messageTemplateName">Name of the template to get metadata for.</param>
            <returns>A hierarchy of <see cref="T:Smartstore.Core.Messaging.ModelTreeMember"/> instances.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageModelProvider.GetLastModelTree(Smartstore.Core.Messaging.MessageTemplate)">
            <summary>
            Gets the last known model metadata tree for a particular template.
            See also <see cref="M:Smartstore.Core.Messaging.IMessageModelProvider.BuildModelTree(Smartstore.Core.Messaging.TemplateModel)"/>
            </summary>
            <param name="template">The template to get metadata for.</param>
            <returns>A hierarchy of <see cref="T:Smartstore.Core.Messaging.ModelTreeMember"/> instances.</returns>
        </member>
        <member name="T:Smartstore.Core.Messaging.IMessageTemplateService">
            <summary>
            Provides message template utilities
            </summary>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageTemplateService.CopyTemplateAsync(Smartstore.Core.Messaging.MessageTemplate)">
            <summary>
            Creates a copy of a message template with all dependant data and saves the copy into the database.
            </summary>
            <param name="source">The source template to copy.</param>
            <returns>Message template copy</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageTemplateService.LoadTemplate(System.String,System.String,System.String)">
            <summary>
            Loads a single message template from file and deserializes its XML content.
            </summary>
            <param name="templateName">Name of template without extension, e.g. 'GiftCard.Notification'</param>
            <param name="culture">Language ISO code</param>
            <param name="rootPath">The application root path of template to load, e.g. "/Modules/MyModule/App_Data/EmailTemplates". Default is "/App_Data/EmailTemplates".</param>
            <returns>Deserialized template xml</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageTemplateService.DeserializeTemplate(System.String,System.String)">
            <summary>
            Deserializes a message templates from XML.
            </summary>
            <param name="xml">Source XML</param>
            <param name="templateName">Name of template</param>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageTemplateService.SaveTemplate(Smartstore.Core.Messaging.MessageTemplate,System.String)">
            <summary>
            Serializes and saves a message template entity to disk.
            </summary>
            <param name="template">Source template entity</param>
            <param name="culture">Language ISO code. Appended to output directory path.</param>
            <returns>The result XML document.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IMessageTemplateService.ImportAllTemplatesAsync(System.String,System.String)">
            <summary>
            Imports all template xml files to <see cref="T:Smartstore.Core.Messaging.MessageTemplate"/> table.
            </summary>
            <param name="rootPath">The application root path of templates to import, e.g. "/Modules/MyModule/App_Data/EmailTemplates". Default is "/App_Data/EmailTemplates".</param>
        </member>
        <member name="M:Smartstore.Core.Messaging.INewsletterSubscriptionService.ApplySubscriptionAsync(System.Boolean,System.String,System.Int32)">
            <summary>
            Adds or deletes a newsletter subscription and sends newsletter activation message to subscriber in case of addition.
            The caller is responsible for database commit.
            </summary>
            <param name="subscribe"><c>true</c> adds subscription, <c>false</c> removes subscription</param>
            <returns><c>true</c> added subscription, <c>false</c> removed subscription, <c>null</c> did nothing</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.INewsletterSubscriptionService.Subscribe(Smartstore.Core.Messaging.NewsletterSubscription)">
            <summary>
            Activates an existing newsletter subscription and publishes corresponding event. The caller is responsible for database commit.
            </summary>
            <returns>Whether subscription was successful.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.INewsletterSubscriptionService.Unsubscribe(Smartstore.Core.Messaging.NewsletterSubscription)">
            <summary>
            Deactivates an existing newsletter subscription and publishes corresponding event. The caller is responsible for database commit.
            </summary>
            <returns>Whether unsubscription was successful.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IQueuedEmailService.DeleteAllQueuedMailsAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Deletes all queued emails.
            </summary>
            <param name="olderThan">Delete only entries that are older than the given date.</param>
            <returns>The number of deleted entries.</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.IQueuedEmailService.SendMailsAsync(System.Collections.Generic.IEnumerable{Smartstore.Core.Messaging.QueuedEmail},System.Threading.CancellationToken)">
            <summary>
            Sends queued emails asynchronously. 
            </summary>
            <param name="queuedEmails">Queued emails. Entities must be tracked.</param>
            <returns>Whether the operation succeeded</returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.QueuedEmailService.ProcessMailBatchAsync(System.Collections.Generic.IEnumerable{Smartstore.Core.Messaging.QueuedEmail},Smartstore.Net.Mail.ISmtpClient,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends batch of <see cref="T:Smartstore.Core.Messaging.QueuedEmail"/>.
            </summary>
            <param name="batch">Current batch of <see cref="T:Smartstore.Core.Messaging.QueuedEmail"/></param>
            <param name="client"><see cref="T:Smartstore.Net.Mail.ISmtpClient"/> to use for sending mails.</param>
            <param name="saveToDisk">Specifies whether mails should be saved to disk.</param>
            <returns></returns>
        </member>
        <member name="M:Smartstore.Core.Messaging.QueuedEmailService.ShouldSaveToDisk">
            <summary>
            Detects whether mails should be sent directly or be saved to disk.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Messaging.QueuedEmailService.AddMailAddresses(System.String,System.Collections.Generic.ICollection{Smartstore.Net.Mail.MailAddress})">
            <summary>
            Adds a semicolon seperated list of mail addresses to collection of MailAddresses.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Messaging.QueuedEmailService.ConvertMail(Smartstore.Core.Messaging.QueuedEmail)">
            <summary>
            Converts <see cref="T:Smartstore.Core.Messaging.QueuedEmail"/> to <see cref="T:Smartstore.Net.Mail.MailMessage"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.Tasks.QueuedMessagesClearTask">
            <summary>
            A task that periodically deletes sent emails from the message queue.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Messaging.Tasks.QueuedMessagesSendTask">
            <summary>
            A task that periodically send queued messages.
            </summary>
        </member>
        <member name="T:Smartstore.Core.OutputCache.CacheableRoute">
            <summary>
            Represents a route to a resource (page or component) that can be cached by output cache.
            </summary>
        </member>
        <member name="P:Smartstore.Core.OutputCache.CacheableRoute.Route">
            <summary>
            The route identifier. Can be a full page or a view component route.
            <list type="bullet">
                <item>
                    Full page route pattern: <c>[{Module}/]{ControllerShortName}/{Action}</c>. Module must be omitted
                    if controller is part of the application core.
                    Example: <c>Smartstore.Blog/Blog/List</c>, <c>Catalog/Category</c>
                </item>
                <item>
                    View component route pattern: <c>vc:[{Module}/]{ComponentShortName}</c>. Module must be omitted
                    if component is part of the application core.
                    Example: <c>vc:SearchBox</c>, <c>vc:Smartstore.Blog/BlogSummary</c>
                </item>
            </list>
            </summary>
        </member>
        <member name="P:Smartstore.Core.OutputCache.CacheableRoute.Duration">
            <summary>
            Number of seconds the page should be kept in cache on the server.
            Only applies to pages, not view components. Set <c>null</c> to fall back to
            default duration as specified by the output cache global settings (usually 5 minutes).
            </summary>
        </member>
        <member name="T:Smartstore.Core.OutputCache.ICacheableRouteProvider">
            <summary>
            Provides routes to resources (pages and view components) that can be cached by output cache.
            </summary>
        </member>
        <member name="M:Smartstore.Core.OutputCache.ICacheableRouteProvider.GetCacheableRoutes">
            <summary>
            Gets the route keys of cacheable resources.
            </summary>
        </member>
        <member name="M:Smartstore.Core.OutputCache.ICacheableRouteProvider.GetOverriddenRoutes">
            <summary>
            Gets the route keys of overridden/uncacheable routes.
            For example, implement this method if your module makes view components
            from other application parts uncacheable.
            </summary>
        </member>
        <member name="T:Smartstore.Core.OutputCache.IDisplayControl">
            <summary>
            Responsible for collecting displayed entities during a request
            for automatic output cache invalidation.
            </summary>
        </member>
        <member name="M:Smartstore.Core.OutputCache.IDisplayControl.Announce(Smartstore.Domain.BaseEntity)">
            <summary>
            Announces that the given <paramref name="entity"/> is about to be displayed.
            </summary>
        </member>
        <member name="M:Smartstore.Core.OutputCache.IDisplayControl.IsDisplayed(Smartstore.Domain.BaseEntity)">
            <summary>
            Checks whether the given <paramref name="entity"/> has been displayed (or will be displayed) during the current request.
            </summary>
        </member>
        <member name="M:Smartstore.Core.OutputCache.IDisplayControl.MarkRequestAsUncacheable">
            <summary>
            Disables caching for the current request.
            </summary>
        </member>
        <member name="P:Smartstore.Core.OutputCache.IDisplayControl.IsUncacheableRequest">
            <summary>
            Checks whether the current request is uncacheable.
            </summary>
        </member>
        <member name="T:Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver">
            <summary>
            Allows registration of output cache invalidation handlers
            </summary>
        </member>
        <member name="M:Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver.ObserveEntity(System.Func{Smartstore.Core.OutputCache.ObserveEntityContext,System.Threading.Tasks.Task})">
            <summary>
            Registers an entity observer. The passed observer is responsible for invalidating the output cache
            by calling one of the invalidation methods in the <see cref="T:Smartstore.Core.OutputCache.IOutputCacheProvider"/> instance.
            The observer must then set the <see cref="P:Smartstore.Core.OutputCache.ObserveEntityContext.Handled"/> property to <c>true</c>
            to signal the framework that it should skip executing subsequent observers. 
            </summary>
            <param name="observer">The observer action</param>
            <remarks>
            The implementation of this interface is singleton scoped.
            Don't use objects with shorter lifetime in your handler as this will lead to memory leaks.
            If your handler needs to call service methods, resolve required services
            with <see cref="P:Smartstore.Core.OutputCache.ObserveEntityContext.ServiceContainer"/>.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver.ObserveSetting(System.String,System.Func{Smartstore.Core.OutputCache.IOutputCacheProvider,System.Threading.Tasks.Task})">
            <summary>
            Registers a setting key to be observed by the framework. If the value for the passed
            setting key changes, the framework calls the <paramref name="invalidationAction"/> handler.
            The key can either be fully qualified - e.g. "CatalogSettings.ShowProductSku" -,
            or prefixed - e.g. "CatalogSettings.*". The latter calls the invalidator when ANY CatalogSetting changes.
            </summary>
            <param name="invalidationAction">
            The invalidation action handler. If <c>null</c> is passed, the framework
            uses the default invalidator, which is <see cref="M:Smartstore.Core.OutputCache.IOutputCacheProvider.RemoveAllAsync"/>.
            </param>
        </member>
        <member name="M:Smartstore.Core.OutputCache.IOutputCacheInvalidationObserverExtensions.ObserveSettings``1(Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver)">
            <summary>
            Registers a concrete setting class to be observed by the framework. If any setting property
            of <typeparamref name="TSetting"/> changes, the framework will purge the cache.
            </summary>
            <typeparam name="TSetting">The type of the concrete setting class to observe</typeparam>
            <remarks>
            A property observer precedes a class observer.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.OutputCache.IOutputCacheInvalidationObserverExtensions.ObserveSettings``1(Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver,System.Func{Smartstore.Core.OutputCache.IOutputCacheProvider,System.Threading.Tasks.Task})">
            <summary>
            Registers a concrete setting class to be observed by the framework. If any setting property
            of <typeparamref name="TSetting"/> changes, the framework will call the <paramref name="invalidationAction"/> handler.
            </summary>
            <typeparam name="TSetting">The type of the concrete setting class to observe</typeparam>
            <param name="invalidationAction">
            The invalidation action handler. If <c>null</c> is passed, the framework
            uses the default invalidator, which is <see cref="M:Smartstore.Core.OutputCache.IOutputCacheProvider.RemoveAllAsync"/>.
            </param>
            <remarks>
            A property observer precedes a class observer.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.OutputCache.IOutputCacheInvalidationObserverExtensions.ObserveSettingProperty``1(Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Registers a setting property to be observed by the framework. If the value for the passed
            property changes, the framework will purge the cache.
            </summary>
            <typeparam name="TSetting">The type of the concrete setting class which contains the property</typeparam>
            <param name="propertyAccessor">The property lambda</param>
        </member>
        <member name="M:Smartstore.Core.OutputCache.IOutputCacheInvalidationObserverExtensions.ObserveSettingProperty``1(Smartstore.Core.OutputCache.IOutputCacheInvalidationObserver,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Func{Smartstore.Core.OutputCache.IOutputCacheProvider,System.Threading.Tasks.Task})">
            <summary>
            Registers a setting property to be observed by the framework. If the value for the passed
            property changes, the framework will call the <paramref name="invalidationAction"/> handler.
            </summary>
            <typeparam name="TSetting">The type of the concrete setting class which contains the property</typeparam>
            <param name="propertyAccessor">The property lambda</param>
            <param name="invalidationAction">
            The invalidation action handler. If <c>null</c> is passed, the framework
            uses the default invalidator, which is <see cref="M:Smartstore.Core.OutputCache.IOutputCacheProvider.RemoveAllAsync"/>.
            </param>
        </member>
        <member name="M:Smartstore.Core.OutputCache.IOutputCacheProvider.GetLock(System.String)">
            <summary>
            Gets a <see cref="T:Smartstore.Threading.IDistributedLock"/> instance for the given <paramref name="key"/>
            used to synchronize access to the underlying cache storage.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Packaging.IPackageBuilder">
            <summary>
            Responsible for building extension packages (modules or themes)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Packaging.IPackageBuilder.BuildPackageAsync(Smartstore.Engine.Modularity.IExtensionDescriptor)">
            <summary>
            Builds a deployable package for a given extension.
            </summary>
            <param name="extension">The extension to build a package for.</param>
            <returns>The package</returns>
        </member>
        <member name="T:Smartstore.Core.Packaging.IPackageInstaller">
            <summary>
            Responsible for installing or uninstalling extension packages (modules or themes)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Packaging.IPackageInstaller.InstallPackageAsync(Smartstore.Core.Packaging.ExtensionPackage)">
            <summary>
            Installs an extension package
            </summary>
            <param name="package">The package to install</param>
            <returns>The <see cref="T:Smartstore.Engine.Modularity.IExtensionDescriptor"/> instance of the deployed extension.</returns>
        </member>
        <member name="M:Smartstore.Core.Packaging.IPackageInstaller.UninstallExtensionAsync(Smartstore.Engine.Modularity.IExtensionDescriptor)">
            <summary>
            Uninstalls (removes) an extension
            </summary>
            <param name="extension">The descriptor of extension to remove.</param>
        </member>
        <member name="P:Smartstore.Core.Packaging.MinimalExtensionDescriptor.ExtensionType">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Packaging.MinimalExtensionDescriptor.Name">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Packaging.MinimalExtensionDescriptor.FriendlyName">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Packaging.MinimalExtensionDescriptor.Description">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Packaging.MinimalExtensionDescriptor.Group">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Packaging.MinimalExtensionDescriptor.Author">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Packaging.MinimalExtensionDescriptor.ProjectUrl">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Packaging.MinimalExtensionDescriptor.Tags">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Packaging.MinimalExtensionDescriptor.Version">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Packaging.MinimalExtensionDescriptor.MinAppVersion">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Packaging.PackagingUtility.IsAssumedCompatible(Smartstore.Engine.Modularity.IExtensionDescriptor)">
            <summary>
            Gets a value indicating whether an extension is assumed
            to be compatible with the current app version
            </summary>
            <remarks>
            An extension is generally compatible when both app version and extension's 
            <c>MinorAppVersion</c> are equal, OR - when app version is greater - it is 
            assumed to be compatible when no breaking changes occured since <c>MinorAppVersion</c>.
            </remarks>
            <param name="descriptor">The descriptor of extension to check</param>
            <returns><c>true</c> when the extension is assumed to be compatible</returns>
        </member>
        <member name="T:Smartstore.Core.Packaging.UpdateChecker">
            <summary>
            Checks for application updates.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Rules.IRulesContainer">
            <summary>
            Represents an entity which supports rule sets.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.IRulesContainer.RuleSets">
            <summary>
            Gets assigned rule sets.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Rules.RuleSetEntity">
            <summary>
            Represents a set of rules.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.Name">
            <summary>
            Gets or sets the name of the rule set.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.IsActive">
            <summary>
            Gets or sets a value indicating whether the rule set is active.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.Scope">
            <summary>
            Gets or sets the scope of the rule set.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.IsSubGroup">
            <summary>
            <c>True</c> when this set is an internal composite container for rules within another rule set.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.LogicalOperator">
            <summary>
            Gets or sets the logical operator for the rules in this set.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.CreatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.UpdatedOnUtc">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.LastProcessedOnUtc">
            <summary>
            Gets or sets the date when the set was processed.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.Rules">
            <summary>
            Gets rules
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.Discounts">
            <summary>
            Gets or sets assigned discounts.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.Categories">
            <summary>
            Gets or sets assigned categories.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.ShippingMethods">
            <summary>
            Gets or sets assigned shipping methods.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.PaymentMethods">
            <summary>
            Gets or sets assigned payment methods.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.CustomerRoles">
            <summary>
            Gets or sets assigned customer roles.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleSetEntity.ProductVariantAttributeId">
            <summary>
            Gets or sets the identifier of an assigned <see cref="P:Smartstore.Core.Rules.RuleSetEntity.ProductVariantAttribute" />
            Only applicable for <see cref="F:Smartstore.Core.Rules.RuleScope.ProductAttribute"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Rules.RuleQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Rules.RuleSetEntity},System.Nullable{Smartstore.Core.Rules.RuleScope},System.Boolean,System.Boolean)">
            <summary>
            Applies ruleset standard filter and sorts by <see cref="P:Smartstore.Core.Rules.RuleSetEntity.IsActive"/> DESC, then by <see cref="P:Smartstore.Core.Rules.RuleSetEntity.Scope"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Filters.FilterExpression.LogicalOperator">
            <summary>
            Optional logical operator to combine with right side expression. Only relevant
            if expression is part of a <see cref="T:Smartstore.Core.Rules.Filters.FilterExpressionGroup"/>. If <c>null</c>,
            the parent group's logical operator is used to combine with right side expression.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Rules.Filters.RuleQueryableExtensions.ApplySearchFilterFor``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Applies a complex string-based DSL filter to given entity member. Only numeric and string members are allowed.
            </summary>
            <param name="memberExpression">
            The member expression to apply filter to.
            </param>
            <param name="filter">
                The search filter. Grammar:
                <code>
                    <c>TERM:</c>
                        Quoted search term (double or single) | unquoted search term without whitespaces.
                        Supports wildcards (* | ?). If wildcards are present, default OPERATOR
                        is switched to "Equals". Use "NotEquals" (!) to negate pattern.
                        
                    <c>OPERATOR:</c>
                        =[=]    --> Equals (default when omitted on numeric terms)
                        ![=]    --> NotEquals
                        &gt;    --> GreaterThan
                        &gt;=   --> GreaterThanOrEqual
                        &lt;    --> LessThan
                        &lt;=   --> LessThanOrEqual
                        ~       --> Contains (default when omitted on string terms)
                        !~      --> NotContains
                        
                    <c>COMBINATOR:</c>
                        [and | or] (case-insensitive)
                        If omitted, "or" is used.
                        
                    <c>FILTER:</c>
                        [ OPERATOR ]TERM [COMBINATOR]
                        
                    <c>FILTER_GROUP:</c>
                        [!]([FILTER | FILTER_GROUP]*)
                        The optional "!" operator negates the group.
                        
                    <c>EXPRESSION:</c>
                        FILTER* | FILTER_GROUP*
                </code>
            </param>
            <example>
                <code>
                    <c>banana joe</c>
                        Contains "banana" or contains "joe"
                        
                    <c>banana and !*.joe</c>
                        Contains "banana" but does not match "*.joe"
                        
                    <c>~banana and (!~"hello world" or !*jim)</c>
                        Contains "banana", but does not contain "hello world" or does not end with "jim"
                        
                    <c>*Middleware and !(Serilog* Microsoft*)</c>
                        Ends with "Middleware", but does not starts with "Serilog" or "Microsoft"
                        
                    <c>(&gt;=10 and &lt;=100) or 1 or &gt;1000</c>
                        Is between 10 and 100, or equals 1, or is greater than 1000.
                </code>
            </example>
        </member>
        <member name="M:Smartstore.Core.Rules.Filters.RuleQueryableExtensions.ApplySearchFilter``2(System.Linq.IQueryable{``0},System.String,Smartstore.Core.Rules.LogicalRuleOperator,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <inheritdoc cref="M:Smartstore.Core.Rules.Filters.RuleQueryableExtensions.ApplySearchFilterFor``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)"/>
            <summary>
            Applies a complex string-based DSL filter to given string members by combining 
            the predicates with <paramref name="logicalOperator"/>.
            </summary>
            <param name="logicalOperator">
            The logical operator to combine multiple <paramref name="memberExpressions"/> with.
            </param>
            <param name="memberExpressions">
            All member access expressions to build a combined lambda expression for.
            </param>
        </member>
        <member name="T:Smartstore.Core.Rules.IRule`1">
            <summary>
            Rule interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Rules.IRule`1.MatchAsync(`0,Smartstore.Core.Rules.RuleExpression)">
            <summary>
            Checks whether a rule is met.
            </summary>
            <param name="context">Rule context.</param>
            <param name="expression">Rule expression.</param>
            <returns><c>true</c> the rule is met, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Smartstore.Core.Rules.IRuleVisitor">
            <summary>
            Rule visitor interface.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.IRuleVisitor.Scope">
            <summary>
            Gets the rule scope.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Rules.IRuleVisitor.VisitRuleAsync(Smartstore.Core.Rules.RuleEntity)">
            <summary>
            Visits a rule.
            </summary>
            <param name="rule">Rule.</param>
            <returns>Rule expression.</returns>
        </member>
        <member name="M:Smartstore.Core.Rules.IRuleVisitor.VisitRuleSet(Smartstore.Core.Rules.RuleSetEntity)">
            <summary>
            Visits a ruleset.
            </summary>
            <param name="ruleSet">Ruleset.</param>
            <returns>Rule expression group.</returns>
        </member>
        <member name="T:Smartstore.Core.Rules.Rendering.IRuleOptionsProvider">
            <summary>
            Interface to provide select list options (remote only) for rules. <seealso cref="T:Smartstore.Core.Rules.RemoteRuleValueSelectList"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.IRuleOptionsProvider.Order">
            <summary>
            Gets the ordinal number of the provider.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Rules.Rendering.IRuleOptionsProvider.Matches(System.String)">
            <summary>
            Indicates whether this provider can provide select list options for a rule expression.
            </summary>
            <param name="dataSource">Name of the data source.</param>
            <returns><c>true</c> can provide options otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Rules.Rendering.IRuleOptionsProvider.GetOptionsAsync(Smartstore.Core.Rules.Rendering.RuleOptionsContext)">
            <summary>
            Gets options for a rule.
            </summary>
            <param name="context">Rule options context.</param>
            <returns>Rule options result.</returns>
        </member>
        <member name="M:Smartstore.Core.Rules.Rendering.IRuleTemplateSelector.GetTemplate(Smartstore.Core.Rules.RuleDescriptor)">
            <summary>
            Gets infos about a rule value template.
            </summary>
            <param name="descriptor">Rule descriptor.</param>
            <returns>Rule value template infos.</returns>
        </member>
        <member name="T:Smartstore.Core.Rules.Rendering.RuleEditItem">
            <summary>
            Represents an edit item for rules.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Rules.Rendering.RuleOptionsContext">
            <summary>
            Helper to get rule options.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsContext.Descriptor">
            <summary>
            Rule descriptor.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsContext.Reason">
            <summary>
            Rule options request.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsContext.DataSource">
            <summary>
            Data source name of the remote list.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsContext.Language">
            <summary>
            Language.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsContext.Value">
            <summary>
            Rule expression value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsContext.PageIndex">
            <summary>
            Page index if provided options are paged.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsContext.PageSize">
            <summary>
            Page size if provided options are paged.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsContext.SearchTerm">
            <summary>
            Optional search term to reduce the options result.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsContext.OptionById">
            <summary>
            Gets a value indicating whether to return the entity ID as option value.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Rules.Rendering.RuleOptionsRequestReason.SelectListOptions">
            <summary>
            Get options for select list.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Rules.Rendering.RuleOptionsRequestReason.SelectedDisplayNames">
            <summary>
            Get display names of selected options.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Rules.Rendering.RuleOptionsResult.Create(Smartstore.Core.Rules.Rendering.RuleOptionsContext,System.Collections.Generic.IEnumerable{Smartstore.Core.Rules.RuleValueSelectListOption},System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:Smartstore.Core.Rules.Rendering.RuleOptionsResult"/> instance with given <paramref name="options"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsResult.Options">
            <summary>
            Select list options or display names of selected values, depending on <see cref="T:Smartstore.Core.Rules.Rendering.RuleOptionsRequestReason"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsResult.IsPaged">
            <summary>
            Indicates whether the provided data is paged.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleOptionsResult.HasMoreData">
            <summary>
            Indicates whether further data is available.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Rules.Rendering.RuleOptionsResult.AddOptions(Smartstore.Core.Rules.Rendering.RuleOptionsContext,System.Collections.Generic.IEnumerable{Smartstore.Core.Rules.RuleValueSelectListOption})">
            <summary>
            Adds rule options to this result instance.
            </summary>
            <param name="context">Rule options context.</param>
            <param name="options">Options to add.</param>
        </member>
        <member name="T:Smartstore.Core.Rules.Rendering.RuleSelectItem">
            <summary>
            Represents a select list option for rules.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleSelectItem.Id">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleSelectItem.Text">
            <summary>
            Displayed text.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleSelectItem.Hint">
            <summary>
            Option hint, e.g. the product SKU.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.Rendering.RuleSelectItem.Selected">
            <summary>
            Whether the item is selected.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RuleDescriptor.IsComparingSequences">
            <summary>
            Indicates whether the rule compares the values of two sequences.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Rules.RemoteRuleValueSelectList.DataSource">
            <summary>
            Name of the data source.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Rules.IRuleProvider">
            <summary>
            Rule provider interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Rules.IRuleProvider.GetRuleDescriptorsAsync">
            <summary>
            Gets all rule descriptors for a rule scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Smartstore.Core.Rules.IRuleProviderFactory.GetProvider(Smartstore.Core.Rules.RuleScope,System.Object)">
            <summary>
            Gets a provider for a <see cref="T:Smartstore.Core.Rules.RuleScope"/>.
            </summary>
            <param name="scope"><see cref="T:Smartstore.Core.Rules.RuleScope"/> to get the provider for.</param>
            <param name="context">Provider specific instance of a context object that is passed to the provider's constructor.</param>
        </member>
        <member name="M:Smartstore.Core.Rules.IRuleProviderFactoryExtensions.GetProvider``1(Smartstore.Core.Rules.IRuleProviderFactory,Smartstore.Core.Rules.RuleScope,System.Object)">
            <inheritdoc cref="M:Smartstore.Core.Rules.IRuleProviderFactory.GetProvider(Smartstore.Core.Rules.RuleScope,System.Object)" />
        </member>
        <member name="T:Smartstore.Core.Rules.IRuleService">
            <summary>
            Rule service interface.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Rules.IRuleService.ApplyRuleSetMappingsAsync``1(``0,System.Int32[])">
            <summary>
            Applies given <paramref name="selectedRuleSetIds"/> to <paramref name="entity"/>.
            The caller is responsible for database commit.
            </summary>
            <param name="entity">The entity to apply rulesets to.</param>
            <param name="selectedRuleSetIds">Identifiers of rulesets to apply.</param>
            <returns><c>true</c> if a database commit is required. <c>false</c> if nothing changed.</returns>
        </member>
        <member name="M:Smartstore.Core.Rules.IRuleService.CreateExpressionGroupAsync(System.Int32,Smartstore.Core.Rules.IRuleVisitor,System.Boolean)">
            <summary>
            Creates an expression group for a ruleset.
            </summary>
            <param name="ruleSetId">Ruleset identifier.</param>
            <param name="visitor">Rule visitor.</param>
            <param name="includeHidden">A value indicating whether to include hidden rulesets.</param>
            <returns>Expression group.</returns>
        </member>
        <member name="M:Smartstore.Core.Rules.IRuleService.CreateExpressionGroupAsync(Smartstore.Core.Rules.RuleSetEntity,Smartstore.Core.Rules.IRuleVisitor,System.Boolean)">
            <summary>
            Creates an expression group for a ruleset.
            </summary>
            <param name="ruleSet">Ruleset.</param>
            <param name="visitor">Rule visitor.</param>
            <param name="includeHidden">A value indicating whether to include hidden rulesets.</param>
            <returns>Expression group.</returns>
        </member>
        <member name="M:Smartstore.Core.Rules.IRuleService.ApplyRuleDataAsync(Smartstore.Core.Rules.Rendering.RuleEditItem[],Smartstore.Core.Rules.IRuleProvider)">
            <summary>
            Applies given <paramref name="ruleData"/> to the related <see cref="T:Smartstore.Core.Rules.RuleEntity"/>'s.
            The caller is responsible for database commit.
            </summary>
            <param name="ruleData">Rule data to apply.</param>
            <param name="provider">The associated rule provider.</param>
            <returns>Number of updated <see cref="T:Smartstore.Core.Rules.RuleEntity"/>'s.</returns>
        </member>
        <member name="M:Smartstore.Core.Rules.IRuleService.ApplyMetadataAsync(Smartstore.Core.Rules.IRuleExpressionGroup,Smartstore.Core.Localization.Language)">
            <summary>
            Applies metadata to the expressions of <paramref name="group"/>, e.g. errors about invalid descriptors.
            </summary>
            <param name="group">Root expression group.</param>
            <param name="language">Language entity. If <c>null</c>, language will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingLanguage"/>.</param>
        </member>
        <member name="F:Smartstore.Core.Seo.CanonicalHostNameRule.NoRule">
            <summary>
            Doesn't matter (as requested)
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.CanonicalHostNameRule.RequireWww">
            <summary>
            The www prefix is required (www.myshop.com is default host)
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.CanonicalHostNameRule.OmitWww">
            <summary>
            The www prefix should be omitted (myshop.com is default host)
            </summary>
        </member>
        <member name="T:Smartstore.Core.Seo.TrailingSlashRule">
            <summary>
            Rule to apply when an incoming URL does not match
            the <see cref="P:Smartstore.Core.Seo.SeoSettings.AppendTrailingSlashToUrls"/> setting.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.TrailingSlashRule.Allow">
            <summary>
            Allow the other variant.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.TrailingSlashRule.Redirect">
            <summary>
            Redirect to other variant (301).
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.TrailingSlashRule.RedirectToHome">
            <summary>
            Disallow the other variant and redirect to homepage.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.TrailingSlashRule.Disallow">
            <summary>
            Disallow the other variant and return 404.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Seo.ProductDescriptionPriority">
            <summary>
            Represents the prioritization of the schema.org description tag on product pages.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.ProductDescriptionPriority.FullDescription">
            <summary>
            Use the product's full description, if available.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.ProductDescriptionPriority.ShortDescription">
            <summary>
            Use the product's short description, if available.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.ProductDescriptionPriority.Both">
            <summary>
            Use both the product's short and full description.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.SeoSettings.MetaTitle">
            <summary>
            Gets or sets the default meta title for the shop.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.SeoSettings.LoadAllUrlAliasesOnStartup">
            <summary>
            A value indicating whether to load all URL records and active slugs on application startup
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.SeoSettings.GetCharConversionMap">
            <summary>
            Gets a cached char conversion map as specified by <see cref="P:Smartstore.Core.Seo.SeoSettings.SeoNameCharConversion"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Smartstore.Core.Seo.ISlugSupported">
            <summary>
            Represents an entity which supports slug (SEO friendly one-word URLs)
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.PageTitleSeoAdjustment.PagenameAfterStorename">
            <summary>
            Pagename comes after storename
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.PageTitleSeoAdjustment.StorenameAfterPagename">
            <summary>
            Storename comes after pagename
            </summary>
        </member>
        <member name="T:Smartstore.Core.Seo.UrlRecord">
            <summary>
            Represents an URL record
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.UrlRecord.EntityId">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.UrlRecord.EntityName">
            <summary>
            Gets or sets the entity name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.UrlRecord.Slug">
            <summary>
            Gets or sets the slug
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.UrlRecord.IsActive">
            <summary>
            Gets or sets the value indicating whether the record is active
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.UrlRecord.LanguageId">
            <summary>
            Gets or sets the language identifier
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlServiceExtensions.ApplySlugAsync``1(Smartstore.Core.Seo.IUrlService,``0,System.String,System.Int32,System.Boolean)">
            <summary>
            Applies a slug without sanitization or uniqueness check. This method
            throws if the given slug already exists in the database. The recommended
            way to apply a slug is to call <see cref="M:Smartstore.Core.Seo.IUrlService.ValidateSlugAsync``1(``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)"/>
            first, then to call <see cref="M:Smartstore.Core.Seo.IUrlService.ApplySlugAsync(Smartstore.Core.Seo.ValidateSlugResult,System.Boolean)"/> by passing
            the return value from first call.
            </summary>
            <typeparam name="T">Type of slug supporting entity</typeparam>
            <param name="entity">Entity instance</param>
            <param name="slug">Slug to apply</param>
            <param name="languageId">Language ID</param>
            <param name="save"><c>true</c> will commit result to database.</param>
            <returns>
            The affected <see cref="T:Smartstore.Core.Seo.UrlRecord"/> instance, either new or existing as tracked entity.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlServiceExtensions.ValidateSlugAsync``1(Smartstore.Core.Seo.IUrlService,``0,System.String,System.Boolean,System.Nullable{System.Int32})">
            <inheritdoc cref="M:Smartstore.Core.Seo.IUrlService.ValidateSlugAsync``1(``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)"/>
            <param name="seName">Search engine name to validate. If <c>null</c> or empty, the slug will be resolved from "<paramref name="entity"/>.GetDisplayName()".</param>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlServiceExtensions.SaveSlugAsync``1(Smartstore.Core.Seo.IUrlService,``0,System.String,System.Boolean,System.Nullable{System.Int32})">
            <inheritdoc cref="M:Smartstore.Core.Seo.IUrlServiceExtensions.SaveSlugAsync``1(Smartstore.Core.Seo.IUrlService,``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)"/>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlServiceExtensions.SaveSlugAsync``1(Smartstore.Core.Seo.IUrlService,``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Validates, applies and saves a slug in a single atomic operation.
            </summary>
            <remarks>
            This method is thread-safe.
            Call it to prevent another parallel request to recreate the slug record.
            Lock acquisition timeout is 3 seconds.
            </remarks>
            <inheritdoc cref="M:Smartstore.Core.Seo.IUrlService.ValidateSlugAsync``1(``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)"/>
        </member>
        <member name="M:Smartstore.Core.Seo.SeoExtensions.GetActiveSlug``1(``0,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             Gets the seo friendly active url slug for a slug supporting entity.
            </summary>
            <typeparam name="T">Type of slug supporting entity</typeparam>
            <param name="entity">Entity instance</param>
            <param name="languageId">Language identifier</param>
            <param name="returnDefaultValue">A value indicating whether to return default value (if language specified one is not found)</param>
            <param name="ensureTwoPublishedLanguages">A value indicating whether to ensure that we have at least two published languages; otherwise, load only default value</param>
            <returns>SEO slug</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.SeoExtensions.GetActiveSlug(Smartstore.Core.Catalog.Categories.ICategoryNode)">
            <summary>
            Gets the seo friendly active url slug for a category node
            </summary>
            <param name="node">Node instance</param>
            <returns>SEO slug</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.SeoExtensions.GetActiveSlugAsync``1(``0,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
             Gets the seo friendly active url slug for a slug supporting entity.
            </summary>
            <typeparam name="T">Type of slug supporting entity</typeparam>
            <param name="entity">Entity instance</param>
            <param name="languageId">Language identifier</param>
            <param name="returnDefaultValue">A value indicating whether to return default value (if language specified one is not found)</param>
            <param name="ensureTwoPublishedLanguages">A value indicating whether to ensure that we have at least two published languages; otherwise, load only default value</param>
            <returns>SEO slug</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.SeoExtensions.GetActiveSlugAsync(Smartstore.Core.Catalog.Categories.ICategoryNode)">
            <summary>
            Gets the seo friendly active url slug for a category node
            </summary>
            <param name="node">Node instance</param>
            <returns>SEO slug</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.SeoExtensions.ValidateSlug``1(``0,System.String,System.Boolean,System.Nullable{System.Int32})">
            <inheritdoc cref="M:Smartstore.Core.Seo.SeoExtensions.ValidateSlug``1(``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32})"/>
            <param name="seName">Search engine name to validate. If <c>null</c> or empty, the slug will be resolved from "<paramref name="entity"/>.GetDisplayName()".</param>
        </member>
        <member name="M:Smartstore.Core.Seo.SeoExtensions.ValidateSlug``1(``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Slugifies and checks uniqueness of a given search engine name. If not unique, a number will be appended to the result slug.
            </summary>
            <typeparam name="T">Type of slug supporting entity</typeparam>
            <param name="entity">Entity instance</param>
            <param name="seName">Search engine name to validate. If <c>null</c> or empty, the slug will be resolved from <paramref name="displayName"/>.</param>
            <param name="displayName">Display name used to resolve the slug if <paramref name="seName"/> is empty.</param>
            <param name="ensureNotEmpty">Ensure that slug is not empty</param>
            <returns>A system unique slug</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.SeoExtensions.ValidateSlugAsync``1(``0,System.String,System.Boolean,System.Nullable{System.Int32})">
            <inheritdoc cref="M:Smartstore.Core.Seo.SeoExtensions.ValidateSlugAsync``1(``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32})"/>
            <param name="seName">Search engine name to validate. If <c>null</c> or empty, the slug will be resolved from "<paramref name="entity"/>.GetDisplayName()".</param>
        </member>
        <member name="M:Smartstore.Core.Seo.SeoExtensions.ValidateSlugAsync``1(``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Slugifies and checks uniqueness of a given search engine name. If not unique, a number will be appended to the result slug.
            </summary>
            <typeparam name="T">Type of slug supporting entity</typeparam>
            <param name="entity">Entity instance</param>
            <param name="seName">Search engine name to validate. If <c>null</c> or empty, the slug will be resolved from <paramref name="displayName"/>.</param>
            <param name="displayName">Display name used to resolve the slug if <paramref name="seName"/> is empty.</param>
            <param name="ensureNotEmpty">Ensure that slug is not empty</param>
            <returns>A system unique slug</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.UrlPolicyHttpContextExtensions.GetUrlPolicy(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Extension method for getting the <see cref="T:Smartstore.Core.Seo.Routing.UrlPolicy"/> for the current request.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> context.</param>
            <returns>The <see cref="T:Smartstore.Core.Seo.Routing.UrlPolicy"/>.</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.UrlPolicyHttpContextExtensions.SetUrlPolicy(Microsoft.AspNetCore.Http.HttpContext,Smartstore.Core.Seo.Routing.UrlPolicy)">
            <summary>
            Extension method for setting the <see cref="T:Smartstore.Core.Seo.Routing.UrlPolicy"/> for the current request.
            </summary>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> context.</param>
            <param name="policy">The <see cref="T:Smartstore.Core.Seo.Routing.UrlPolicy"/>.</param>
        </member>
        <member name="T:Smartstore.Core.Seo.Routing.DisallowRobotAttribute">
            <summary>
            Disallows robots access to the route. Also used to dynamically populate the robots.txt file.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.DisallowRobotAttribute.Order">
            <inheritdoc />
            <value>Default is <c>int.MinValue + 50</c> to run this <see cref="T:Microsoft.AspNetCore.Mvc.Filters.IAuthorizationFilter"/> early.</value>
        </member>
        <member name="T:Smartstore.Core.Seo.Routing.IRouteHelper">
            <summary>
            Provides a table with reserved system slugs.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.IRouteHelper.IsReservedPath(System.String)">
            <summary>
            Checks whether the given <paramref name="path"/> is reserved by the system.
            </summary>
            <param name="path">The path to check.</param>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.IRouteHelper.IsReservedPath(System.String,System.String@)">
            <summary>
            Checks whether the given <paramref name="path"/> is reserved by the system.
            </summary>
            <param name="path">The path to check.</param>
            <param name="partialMatch">If a substring of <paramref name="path"/> is matched from left, then this is the matched partial, otherwise <c>null</c>.</param>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.IRouteHelper.EnumerateReservedPaths">
            <summary>
            Enumerates all reserved paths.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.IRouteHelper.EnumerateDisallowedRobotPaths">
            <summary>
            Enumerates all paths that are disallowed for robots. A path is
            disallowed if the corresponding action is decorated with
            the <see cref="T:Smartstore.Core.Seo.Routing.DisallowRobotAttribute"/> attribute.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.RouteHelper.RouteOptions">
            <summary>
            For testing purposes.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.RouteHelper.NormalizePathComponent(System.String)">
            <summary>
            Normalizes a path component according to <c>RouteOptions.AppendTrailingSlash</c>
            and <c>RouteOptions.LowercaseUrls</c>. Call this method if you didn't obtain
            <paramref name="path"/> from any <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper"/> or <see cref="T:Microsoft.AspNetCore.Routing.LinkGenerator"/>
            method.
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.RouteHelper.NormalizeQueryComponent(System.String)">
            <summary>
            Normalizes a query string component according to <c>RouteOptions.LowercaseQueryStrings</c>. 
            Call this method if you didn't obtain <paramref name="queryString"/> 
            from any <see cref="T:Microsoft.AspNetCore.Mvc.IUrlHelper"/> or <see cref="T:Microsoft.AspNetCore.Routing.LinkGenerator"/> method.
            </summary>
            <param name="queryString">The query string to normalize.</param>
            <returns>The normalized query string.</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.RouteHelper.NormalizeQueryComponent(System.Nullable{Microsoft.AspNetCore.Http.QueryString})">
            <summary>
            Normalizes a query string component according to <c>RouteOptions.LowercaseQueryStrings</c>. 
            </summary>
            <param name="queryString">The query string to normalize.</param>
            <returns>The normalized query string.</returns>
        </member>
        <member name="T:Smartstore.Core.Seo.Routing.RouteTarget">
            <summary>
            The target (action) of the route.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.Routing.RouteTarget.PublicView">
            <summary>
            Target is the public view in frontend.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.Routing.RouteTarget.Edit">
            <summary>
            Target is the edit page in backend.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Seo.Routing.SlugRouter">
            <summary>
            Builds a <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/> instance for a given <see cref="T:Smartstore.Core.Seo.UrlRecord"/> entity.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.SlugRouter.GetRouteValues(Smartstore.Core.Seo.UrlRecord,Microsoft.AspNetCore.Routing.RouteValueDictionary,Smartstore.Core.Seo.Routing.RouteTarget)">
            <summary>
            Builds a <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/> instance for a given <see cref="T:Smartstore.Core.Seo.UrlRecord"/> entity.
            </summary>
            <param name="entity">The matched entity for current slug in request url.</param>
            <param name="values">The route values associated with the current match. Implementations should not modify values.</param>
            <returns>An instance of <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary"/> or <c>null</c> if no route matches.</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.SlugRouter.MapRoutes(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Maps routes solely needed for URL creation, NOT for route matching.
            This method is called only once per <see cref="T:Smartstore.Core.Seo.Routing.SlugRouter"/> instance during application startup.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.SlugRouteTransformer.Routers">
            <summary>
            Gets all registered slug routers as ordered readonly collection.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.SlugRouteTransformer.RegisterRouter(Smartstore.Core.Seo.Routing.SlugRouter)">
            <summary>
            Registers a router that can generate route values for a matched <see cref="T:Smartstore.Core.Seo.UrlRecord"/> entity.
            </summary>
            <param name="router">The router to register.</param>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.SlugRouteTransformer.RegisterUrlPrefix(System.String,System.String[])">
            <summary>
            Registers a url prefix for a range of entity names. 
            E.g. the prefix "shop" for entity name "product" would result in
            product url "shop/any-product-slug".
            </summary>
            <param name="prefix"></param>
            <param name="entityNames"></param>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.UrlSegment.Original">
            <summary>
            The original value.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.UrlSegment.HasValue">
            <summary>
            True if either original or modified string is not empty
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.UrlPolicy.IsDefaultCulture">
            <summary>
            Checks whether the current request's (ambient) culture is the system's default culture
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.UrlPolicy.IsSlugRoute">
            <summary>
            Checks whether the current endpoint is the result of a dynamic slug route transformation.
            </summary>
            <remarks>See <see cref="T:Smartstore.Core.Seo.Routing.SlugRouteTransformer"/></remarks>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.UrlPolicy.IsInvalidUrl">
            <summary>
            Set this to <c>true</c> to mark the current request URL as invalid
            and to return a HTTP 404 response.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.UrlPolicy.LeftPartIsModified">
            <summary>
            Checks whether left part of the request URL (scheme or host) has been modified.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.UrlPolicy.RightPartIsModified">
            <summary>
            Checks whether right part of the request URL (culture, path or querystring) has been modified.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.Routing.UrlPolicy.IsModified">
            <summary>
            Checks whether any part of the request URL has been modified.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.Routing.UrlPolicy.GetModifiedUrl">
            <summary>
            Returns the modified URL if any of the segments has been modified, so
            that a HTTP redirect can be performed to the new location.
            Returns <c>null</c> if no segment has changed. Returns only the relative path
            if only right segments has changed, or the full absolute URL (including scheme and host)
            if any left segment has changed.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Seo.Routing.UrlPolicyMiddleware">
            <summary>
            Determines current URL policy and performs HTTP redirection
            if any previous middleware required redirection to a new
            valid / sanitized location.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.UrlRecordQueryExtensions.ApplySlugFilter(System.Linq.IQueryable{Smartstore.Core.Seo.UrlRecord},System.String,System.Boolean)">
            <summary>
            Applies a slug filter.
            </summary>
            <param name="query"><see cref="T:Smartstore.Core.Seo.UrlRecord"/> query.</param>
            <param name="slug">Applies filter by <see cref="P:Smartstore.Core.Seo.UrlRecord.Slug"/>.</param>
            <param name="exactMatch">A value indicating whether to filter by exact match.</param>
            <returns><see cref="T:Smartstore.Core.Seo.UrlRecord"/> query.</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.UrlRecordQueryExtensions.ApplyEntityFilter``1(System.Linq.IQueryable{Smartstore.Core.Seo.UrlRecord},``0,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Applies an entity filter and sorts by <see cref="P:Smartstore.Domain.BaseEntity.Id"/> descending.
            </summary>
            <param name="query"><see cref="T:Smartstore.Core.Seo.UrlRecord"/> query.</param>
            <param name="entity">Applies a filter by <see cref="P:Smartstore.Core.Seo.UrlRecord.EntityName"/> and <see cref="P:Smartstore.Core.Seo.UrlRecord.EntityId"/>.</param>
            <param name="languageId">Applies a filter by <see cref="P:Smartstore.Core.Seo.UrlRecord.LanguageId"/>.</param>
            <param name="active">Applies a filter by <see cref="P:Smartstore.Core.Seo.UrlRecord.IsActive"/>.</param>
            <returns><see cref="T:Smartstore.Core.Seo.UrlRecord"/> query.</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.UrlRecordQueryExtensions.ApplyEntityFilter(System.Linq.IQueryable{Smartstore.Core.Seo.UrlRecord},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Applies an entity filter and sorts by <see cref="P:Smartstore.Domain.BaseEntity.Id"/> descending.
            </summary>
            <param name="query"><see cref="T:Smartstore.Core.Seo.UrlRecord"/> query.</param>
            <param name="entityName">Applies a filter by <see cref="P:Smartstore.Core.Seo.UrlRecord.EntityName"/>.</param>
            <param name="entityId">Applies a filter by <see cref="P:Smartstore.Core.Seo.UrlRecord.EntityId"/>.</param>
            <param name="languageId">Applies a filter by <see cref="P:Smartstore.Core.Seo.UrlRecord.LanguageId"/>.</param>
            <param name="active">Applies a filter by <see cref="P:Smartstore.Core.Seo.UrlRecord.IsActive"/>.</param>
            <returns><see cref="T:Smartstore.Core.Seo.UrlRecord"/> query.</returns>
        </member>
        <member name="T:Smartstore.Core.Seo.CanonicalHostUrlFilter">
            <summary>
            Applies all configured rules for canonical URLs.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Seo.IUrlFilter">
            <summary>
            Responsible for applying URL rules to current request url (HTTPS, canonical host name, culture code etc.)
            </summary>
        </member>
        <member name="T:Smartstore.Core.Seo.IUrlService">
            <summary>
            Seo slugs service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlService.GetUrlPolicy">
            <summary>
            Gets the <see cref="T:Smartstore.Core.Seo.Routing.UrlPolicy"/> instance for the current request. The url policy
            can be used to modify specific segments of the current request URL (scheme, host, culture code,
            path and querystring). A middleware then analyzes the changes and performs an HTTP
            redirection to the new location if necessary.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlService.GetActiveSlugAsync(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the active slug for an entity.
            </summary>
            <param name="entityId">Entity identifier</param>
            <param name="entityName">Entity name</param>
            <param name="languageId">Language identifier</param>
            <returns>Found slug or empty string</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlService.PrefetchUrlRecordsAsync(System.String,System.Int32[],System.Int32[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prefetches a collection of url record properties for a range of entities in one go
            and caches them for the duration of the current request.
            </summary>
            <param name="entityName">Entity name</param>
            <param name="entityIds">
            The entity ids to prefetch url records for. Can be null,
            in which case all records for the requested entity name are loaded.
            </param>
            <param name="isRange">Whether <paramref name="entityIds"/> represents a range of ids (perf).</param>
            <param name="isSorted">Whether <paramref name="entityIds"/> is already sorted (perf).</param>
            <param name="tracked">Whether to put prefetched entities to EF change tracker.</param>
            <returns>Url record collection</returns>
            <remarks>
            Be careful not to load large amounts of data at once (e.g. for "Product" scope with large range).
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlService.ClearPrefetchCache">
            <summary>
            Clears the prefetch cache that was populated by calls to <see cref="M:Smartstore.Core.Seo.IUrlService.PrefetchUrlRecordsAsync(System.String,System.Int32[],System.Int32[],System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlService.GetUrlRecordCollectionAsync(System.String,System.Int32[],System.Int32[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prefetches a collection of url record properties for a range of entities in one go.
            </summary>
            <param name="entityName">Entity name</param>
            <param name="entityIds">
            The entity ids to prefetch url records for. Can be null,
            in which case all records for the requested entity name are loaded.
            </param>
            <param name="isRange">Whether <paramref name="entityIds"/> represents a range of ids (perf).</param>
            <param name="isSorted">Whether <paramref name="entityIds"/> is already sorted (perf).</param>
            <param name="tracked">Whether to put prefetched entities to EF change tracker.</param>
            <returns>Url record collection</returns>
            <remarks>
            Be careful not to load large amounts of data at once (e.g. for "Product" scope with large range).
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlService.ValidateSlugAsync``1(``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Slugifies and checks uniqueness of a given search engine name. If not unique, a number will be appended to the result slug.
            </summary>
            <typeparam name="T">Type of slug supporting entity</typeparam>
            <param name="entity">Entity instance</param>
            <param name="seName">Search engine name to validate. If <c>null</c> or empty, the slug will be resolved from <paramref name="displayName"/>.</param>
            <param name="displayName">Display name used to resolve the slug if <paramref name="seName"/> is empty.</param>
            <param name="ensureNotEmpty">Ensure that slug is not empty</param>
            <param name="force">
            <c>true</c> to check slug uniqueness directly against the database.
            <c>false</c> for performance reason, also check internal dictionary with already processed slugs.
            </param>
            <returns>A system unique slug</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlService.ApplySlugAsync(Smartstore.Core.Seo.ValidateSlugResult,System.Boolean)">
            <summary>
            Applies a slug.
            </summary>
            <param name="result">Result data from <see cref="M:Smartstore.Core.Seo.IUrlService.ValidateSlugAsync``1(``0,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean)"/> method call.</param>
            <param name="save"><c>true</c> will commit result to database.</param>
            <returns>
            The affected <see cref="T:Smartstore.Core.Seo.UrlRecord"/> instance, either new or existing as tracked entity.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlService.CountSlugsPerEntityAsync(System.Int32[])">
            <summary>
            Gets the number of existing slugs per entity.
            </summary>
            <param name="urlRecordIds">URL record identifiers</param>
            <returns>Dictionary of slugs per entity count</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlService.CreateBatchScope(Smartstore.Core.Data.SmartDbContext)">
            <summary>
            Creates a variation of this service that is optimized
            for batching scenarios like long running imports or exports.
            Cache segmenting is turned off to avoid high memory pressure
            and applied slugs are queued until <see cref="M:Smartstore.Core.Seo.IUrlServiceBatchScope.CommitAsync(System.Threading.CancellationToken)"/> is called.
            </summary>
            <param name="db">
            The scope will internally use the passed instance or - if null - the request scoped instance from <see cref="T:Smartstore.Core.Seo.IUrlService"/>.
            </param>
            <returns>The batch scope instance.</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlService.GetLock``1(``0,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Gets a <see cref="T:Smartstore.Threading.IDistributedLock"/> instance for the given <paramref name="entity"/>
            used to synchronize access to the underlying slug storage.
            </summary>
            <typeparam name="T">Type of slug supporting entity</typeparam>
            <param name="entity">Entity instance</param>
            <param name="seName">Search engine name to acquire a lock for. If <c>null</c> or empty, the slug will be resolved from <paramref name="displayName"/>.</param>
            <param name="displayName">Display name used to to acquire a lock for if <paramref name="seName"/> is empty.</param>
            <param name="ensureNotEmpty">Ensure that slug is not empty</param>
            <returns>
            An <see cref="T:Smartstore.Threading.IDistributedLock"/> instance or <c>null</c> if no <paramref name="lockKey"/> could be generated.
            </returns>
        </member>
        <member name="T:Smartstore.Core.Seo.IUrlServiceBatchScope">
            <summary>
            Interface for batch optimized database interaction.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlServiceBatchScope.GetActiveSlugAsync(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the active slug for an entity directly from the database, never from the cache
            to avoid high memory pressure.
            </summary>
            <param name="entityId">Entity identifier</param>
            <param name="entityName">Entity name</param>
            <param name="languageId">Language identifier</param>
            <returns>Found slug or empty string</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlServiceBatchScope.ApplySlugs(Smartstore.Core.Seo.ValidateSlugResult[])">
            <summary>
            Adds slugs to the queue. No database call will be made.
            </summary>
            <param name="slugs">SLugs to add to the queue.</param>
        </member>
        <member name="M:Smartstore.Core.Seo.IUrlServiceBatchScope.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Analyzes, validates and commits the quete to the database.
            </summary>
            <returns>The number of affected records.</returns>
        </member>
        <member name="T:Smartstore.Core.Seo.IXmlSitemapGenerator">
            <summary>
            Represents a sitemap generator
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.IXmlSitemapGenerator.GetSitemapPartAsync(System.Int32)">
            <summary>
            Gets the sitemap partition
            </summary>
            <param name="index">
            The page index. 0 retrieves the first document, which can be a sitemap INDEX document
            (when the sitemap size exceeded the limits). An index greater 0 retrieves the
            sitemap XML document at this index, but only when the sitemap is actually indexed (otherwise <c>null</c> is returned)
            </param>
            <returns>Sitemap partition</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.IXmlSitemapGenerator.RebuildAsync(Smartstore.Core.Seo.XmlSitemapBuildContext)">
            <summary>
            Rebuilds the collection of XML sitemap documents for a store/language combination. If there are less than 1.000 sitemap 
            nodes, only one sitemap document will exist in the collection, otherwise a sitemap index document will be 
            the first entry in the collection and all other entries will be sitemap XML documents.
            </summary>
            <param name="ctx">The build context</param>
            <remarks>
            During rebuilding, requests are being served from the existing cache.
            Once rebuild is completed, the cache is updated.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Seo.IXmlSitemapGenerator.IsRebuildingAsync(System.Int32,System.Int32)">
            <summary>
            Determines whether a rebuild is already running.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.IXmlSitemapGenerator.IsGenerated(System.Int32,System.Int32)">
            <summary>
            Indicates whether the sitemap has been generated and cached.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.IXmlSitemapGenerator.Invalidate(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Removes the sitemap from the cache for a rebuild.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.IXmlSitemapGenerator.InvalidateAll">
            <summary>
            Removes all cached sitemap files (any store, any language)
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.UrlService.URLRECORD_SEGMENT_KEY">
            <summary>
            0 = segment (EntityName.IdRange), 1 = language id
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.UrlService.GetCacheSegmentAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the cache segment for a entity name, entity id and language id combination.
            </summary>
            <param name="entityName"></param>
            <param name="entityId"></param>
            <param name="languageId"></param>
            <returns></returns>
        </member>
        <member name="M:Smartstore.Core.Seo.UrlService.ClearCacheSegmentAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Clears the cached segment from the cache
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.XmlSitemapGenerator.MaximumSiteMapCount">
            <summary>
            The maximum number of sitemaps a sitemap index file can contain.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.XmlSitemapGenerator.MaximumSiteMapNodeCount">
            <summary>
            The maximum number of sitemap nodes allowed in a sitemap file. The absolute maximum allowed is 50,000 
            according to the specification. See http://www.sitemaps.org/protocol.html but the file size must also be 
            less than 10MB. After some experimentation, a maximum of 2.000 nodes keeps the file size below 10MB.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.XmlSitemapGenerator.MaximumSiteMapSizeInBytes">
            <summary>
            The maximum size of a sitemap file in bytes (10MB).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.XmlSitemapGenerator.GetSitemapDocument(System.Collections.Generic.IEnumerable{Smartstore.Core.Seo.XmlSitemapNode})">
            <summary>
            Gets the sitemap XML document for the specified set of nodes.
            </summary>
            <param name="nodes">The sitemap nodes.</param>
            <returns>The sitemap XML document for the specified set of nodes.</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.XmlSitemapGenerator.CreateSitemapIndexDocument(System.Collections.Generic.IEnumerable{Smartstore.Core.Seo.XmlSitemapNode})">
            <summary>
            Gets the sitemap index XML document, containing links to all the sitemap XML documents.
            </summary>
            <param name="nodes">The collection of sitemaps containing their index and nodes.</param>
            <returns>The sitemap index XML document, containing links to all the sitemap XML documents.</returns>
        </member>
        <member name="M:Smartstore.Core.Seo.XmlSitemapGenerator.CheckDocumentSize(System.String)">
            <summary>
            Checks the size of the XML sitemap document. If it is over 10MB, logs an error.
            </summary>
            <param name="siteMapXml">The sitemap XML document.</param>
        </member>
        <member name="M:Smartstore.Core.Seo.XmlSitemapGenerator.CheckSitemapCount(System.Int32)">
            <summary>
            Checks the count of the number of sitemaps. If it is over 50,000, logs an error.
            </summary>
            <param name="sitemapCount">The sitemap count.</param>
        </member>
        <member name="T:Smartstore.Core.Seo.ChangeFrequency">
            <summary>
            Represents a sitemap update frequency
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.ChangeFrequency.Always">
            <summary>
            Always
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.ChangeFrequency.Hourly">
            <summary>
            Hourly
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.ChangeFrequency.Daily">
            <summary>
            Daily
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.ChangeFrequency.Weekly">
            <summary>
            Weekly
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.ChangeFrequency.Monthly">
            <summary>
            Monthly
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.ChangeFrequency.Yearly">
            <summary>
            Yearly
            </summary>
        </member>
        <member name="F:Smartstore.Core.Seo.ChangeFrequency.Never">
            <summary>
            Never
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.SlugifyOptions.RemoveDiacritic">
            <summary>
            Whether to remove diacritic (e.g. ç --> c). Default = true.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.SlugifyOptions.AllowUnicodeChars">
            <summary>
            Whether unicode chars are allowed. Default = false.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.SlugifyOptions.AllowForwardSlash">
            <summary>
            Whether forward slash (/) is allowed (but only if prev or next char is not whitespace). Default = false.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.SlugifyOptions.AllowSpace">
            <summary>
            Whether space is allowed. Default = false.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.SlugifyOptions.CollapseWhiteSpace">
            <summary>
            Whether to collapse whitespace. Has no effect if <see cref="P:Smartstore.Core.Seo.SlugifyOptions.AllowSpace"/> is <c>false</c>. Default = true.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.SlugifyOptions.ForceLowerCase">
            <summary>
            Whether to lowercase all chars. Default = true.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.SlugifyOptions.AllowedChars">
            <summary>
            Other whitelisted chars that are allowed. Optional.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Seo.SlugifyOptions.CharConversionMap">
            <summary>
            Optional character conversion map (e.g. ä --> ae).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Seo.SlugUtility.Slugify(System.String,Smartstore.Core.Seo.SeoSettings)">
            <inheritdoc cref="M:Smartstore.Core.Seo.SlugUtility.Slugify(System.String,Smartstore.Core.Seo.SlugifyOptions)"/>
            <param name="seoSettings">SEO settings</param>
        </member>
        <member name="M:Smartstore.Core.Seo.SlugUtility.Slugify(System.String,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.Char,System.String})">
            <inheritdoc cref="M:Smartstore.Core.Seo.SlugUtility.Slugify(System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.Char,System.String})"/>
        </member>
        <member name="M:Smartstore.Core.Seo.SlugUtility.Slugify(System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.Char,System.String})">
            <inheritdoc cref="M:Smartstore.Core.Seo.SlugUtility.Slugify(System.String,Smartstore.Core.Seo.SlugifyOptions)"/>
            <param name="removeDiacritic">Whether to remove diacritic (e.g. ç --> c).</param>
            <param name="allowUnicodeChars">Whether unicode chars are allowed</param>
            <param name="allowForwardSlash">Whether forward slash (/) is allowed (but only if prev or next char is not whitespace)</param>
            <param name="charConversionMap">Optional character conversion map (e.g. ä --> ae).</param>
        </member>
        <member name="M:Smartstore.Core.Seo.SlugUtility.Slugify(System.String,Smartstore.Core.Seo.SlugifyOptions)">
            <summary>
            Slugifies a given string, that is - with default settings -
            you will get a SEO friendly hyphenized, lowercase, alphanumeric version of the input string, 
            with any diacritics removed and whitespace collapsed.
            </summary>
            <example>
            a ambição cerra o coração  -->  a-ambicao-cerra-o-coracao
            </example>
            <param name="input">String to be slugified</param>
            <param name="options">The slugify options</param>
            <returns>SEO friendly slugified string</returns>
        </member>
        <member name="T:Smartstore.Core.Stores.IStoreRestricted">
            <summary>
            Represents an entity which supports store mapping
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.IStoreRestricted.LimitedToStores">
            <summary>
            Gets or sets a value indicating whether the entity is limited/restricted to certain stores
            </summary>
        </member>
        <member name="T:Smartstore.Core.Stores.Store">
            <summary>
            Represents a store
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.Name">
            <summary>
            Gets or sets the store name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.Url">
            <summary>
            Gets or sets the store URL
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.SslEnabled">
            <summary>
            Gets or sets a value indicating whether SSL is enabled
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.SslPort">
            <summary>
            Gets or sets the SSL port for secure connections.
            Should be null if port is default (443).
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.SecureUrl">
            <summary>
            Gets or sets the store secure URL (HTTPS)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.ForceSslForAllPages">
            <summary>
            Gets or sets a value indicating whether all pages are forced to use SSL.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.Hosts">
            <summary>
            Gets or sets the comma separated list of possible HTTP_HOST values
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.LogoMediaFileId">
            <summary>
            Gets or sets the logo media file id
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.FavIconMediaFileId">
            <summary>
            Gets or sets the png icon media file id 
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.PngIconMediaFileId">
            <summary>
            Gets or sets the png icon media file id 
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.AppleTouchIconMediaFileId">
            <summary>
            Gets or sets the apple touch icon media file id
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.MsTileImageMediaFileId">
            <summary>
            Gets or sets the ms tile image media file id
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.MsTileColor">
            <summary>
            Gets or sets the ms tile color
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.HtmlBodyId">
            <summary>
            Gets or sets a store specific id for the HTML body
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.ContentDeliveryNetwork">
            <summary>
            Gets or sets the CDN host name, if static media content should be served through a CDN.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.DefaultCurrencyId">
            <summary>
            Gets or sets the default currency identifier.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.PrimaryExchangeRateCurrencyId">
            <summary>
            Gets or sets the primary exchange rate currency identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.DefaultCurrency">
            <summary>
            Gets or sets the default currency.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.Store.PrimaryExchangeRateCurrency">
            <summary>
            Gets or sets the primary exchange rate currency
            </summary>
        </member>
        <member name="M:Smartstore.Core.Stores.Store.SupportsHttps">
            <summary>
            Checks whether the store supports HTTPS.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Stores.Store.GetBaseUri">
            <summary>
            Gets the store's base URI (Scheme + Host + PathBase + /).
            </summary>
            <returns>The store base URI</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.Store.GetBaseUrl">
            <summary>
            Gets the store's base URL (Scheme + Host + PathBase + /).
            </summary>
            <returns>The store base URL</returns>
        </member>
        <member name="T:Smartstore.Core.Stores.StoreMapping">
            <summary>
            Represents a store mapping record
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.StoreMapping.EntityId">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.StoreMapping.EntityName">
            <summary>
            Gets or sets the entity name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.StoreMapping.StoreId">
            <summary>
            Gets or sets the store identifier
            </summary>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreContextExtensions.GetAllStores(Smartstore.Core.Stores.IStoreContext)">
            <summary>
            Gets all store entities from application (as untracked entities)
            </summary>
            <returns>Store collection</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreContextExtensions.GetStoreById(Smartstore.Core.Stores.IStoreContext,System.Int32)">
            <summary>
            Gets a store entity from application cache (as untracked entity)
            </summary>
            <param name="storeId">Store identifier</param>
            <returns>Store</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreContextExtensions.IsSingleStoreMode(Smartstore.Core.Stores.IStoreContext)">
            <summary>
            <c>true</c> if only one store exists. Otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingServiceExtensions.GetAuthorizedStoreIdsAsync``1(Smartstore.Core.Stores.IStoreMappingService,``0)">
            <summary>
            Finds store identifiers with granted access (mapped to the entity).
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="entity">Entity to check.</param>
            <returns>Store identifiers.</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingServiceExtensions.AuthorizeAsync``1(Smartstore.Core.Stores.IStoreMappingService,``0)">
            <summary>
            Checks whether an entity can be accessed in the current store.
            </summary>
            <param name="entity">Entity to check</param>
            <returns><c>true</c> authorized, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingServiceExtensions.AuthorizeAsync``1(Smartstore.Core.Stores.IStoreMappingService,``0,System.Int32)">
            <summary>
            Checks whether an entity can be accessed in a given store.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="svc">Store mapping service.</param>
            <param name="entity">Entity to check.</param>
            <param name="storeId">Store identifier.</param>
            <returns><c>true</c> authorized, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingServiceExtensions.SelectAuthorizedAsync``1(Smartstore.Core.Stores.IStoreMappingService,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Checks whether entities are accessible in a given store.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="service">Store mapping service.</param>
            <param name="entities">Entities to check.</param>
            <param name="storeId">Store identifier.</param>
            <returns>Authorized entities.</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreRestrictedQueryExtensions.ApplyStoreFilter``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Applies filter for entities restricted by store.
            </summary>
            <param name="storeId">Store identifier to be filtered by. 0 to get all entities.</param>
        </member>
        <member name="M:Smartstore.Core.Stores.StoreExtensions.GetAbsoluteUrl(Smartstore.Core.Stores.Store,System.String)">
            <inheritdoc cref="M:Smartstore.Core.Stores.StoreExtensions.GetAbsoluteUrl(Smartstore.Core.Stores.Store,Microsoft.AspNetCore.Http.PathString,System.String)" />
            <param name="path">
            The path. May start with current request's base path, in which case it is stripped,
            because it is assumed that the store host (base URI) already ends with the base path.
            </param>
        </member>
        <member name="M:Smartstore.Core.Stores.StoreExtensions.GetAbsoluteUrl(Smartstore.Core.Stores.Store,Microsoft.AspNetCore.Http.PathString,System.String)">
            <summary>
            Generates an absolute URL for the store (scheme + host + pathBase + relativePath). 
            </summary>
            <param name="store">The store to generate an absolute URL for.</param>
            <param name="pathBase">The current request's base application path.</param>
            <param name="path">
            The path. May start with <paramref name="pathBase"/>, in which case it is stripped,
            because it is assumed that the store host (base URI) already ends with the base path.
            </param>
            <returns>The absolute URL.</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.StoreExtensions.IsStoreDataValid(Smartstore.Core.Stores.Store)">
            <summary>
            <c>true</c> if the store data is valid. Otherwise <c>false</c>.
            </summary>
            <param name="store">Store entity</param>
        </member>
        <member name="M:Smartstore.Core.Stores.StoreExtensions.ContainsHostValue(Smartstore.Core.Stores.Store,System.String)">
            <summary>
            Indicates whether a store contains a specified host
            </summary>
            <param name="store">Store</param>
            <param name="host">Host</param>
            <returns>true - contains, false - no</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.StoreExtensions.ParseHostValues(Smartstore.Core.Stores.Store)">
            <summary>
            Parse comma-separated hosts
            </summary>
            <param name="store">Store</param>
            <returns>Comma-separated hosts</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.StoreMappingQueryExtensions.ApplyEntityFilter``1(System.Linq.IQueryable{Smartstore.Core.Stores.StoreMapping},``0)">
            <summary>
            Applies a filter for identifier and name of the entity.
            </summary>
            <param name="query">Store mapping query.</param>
            <param name="entity"></param>
            <returns>Store mapping query.</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.StoreMappingQueryExtensions.ApplyEntityFilter(System.Linq.IQueryable{Smartstore.Core.Stores.StoreMapping},System.String,System.Int32)">
            <summary>
            Applies a filter for identifier and name of the entity.
            </summary>
            <param name="query">Store mapping query.</param>
            <param name="entityName">Name of the entity.</param>
            <param name="entityId">Entity identifier.</param>
            <returns>Store mapping query.</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.CheckStoreClosedAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Smartstore.Core.Stores.CheckStoreClosedAttribute"/>.
            </summary>
            <param name="check">Set to <c>false</c> to override any controller-level <see cref="T:Smartstore.Core.Stores.CheckStoreClosedAttribute"/>.</param>
        </member>
        <member name="T:Smartstore.Core.Stores.IStoreContext">
            <summary>
            Store context
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.IStoreContext.CurrentStore">
            <summary>
            Gets or sets the current store
            </summary>
            <remarks>Setter is for virtualization and testing purposes</remarks>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreContext.GetCachedStores">
            <summary>
            Gets a cache wrapper for all untracked store entities.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Stores.IStoreContext.CurrentStoreIdIfMultiStoreMode">
            <summary>
            IsSingleStoreMode ? 0 : CurrentStore.Id
            </summary>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreContext.SetRequestStore(System.Nullable{System.Int32})">
            <summary>
            Sets a store override to be used for the current request
            </summary>
            <param name="storeId">The store override or <c>null</c> to remove the override</param>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreContext.SetPreviewStore(System.Nullable{System.Int32})">
            <summary>
            Sets a store override to be used for the current user's session (e.g. for preview mode)
            </summary>
            <param name="storeId">The store override or <c>null</c> to remove the override</param>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreContext.GetRequestStore">
            <summary>
            Gets the store override for the current request
            </summary>
            <returns>The store override or <c>null</c></returns>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreContext.GetPreviewStore">
            <summary>
            Gets the store override for the current session
            </summary>
            <returns>The store override or <c>null</c></returns>
        </member>
        <member name="T:Smartstore.Core.Stores.IStoreMappingService">
            <summary>
            Store mapping service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingService.ApplyStoreMappingsAsync``1(``0,System.Int32[])">
            <summary>
            Creates store mapping entities for a mappable entity and begins change tracking.
            This method does NOT commit to database.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <param name="entity">The entity</param>
            <param name="selectedStoreIds">Array of selected store ids</param>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingService.AddStoreMapping``1(``0,System.Int32)">
            <summary>
            Creates and adds a <see cref="T:Smartstore.Core.Stores.StoreMapping"/> entity to the change tracker.
            This method does NOT commit to database.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingService.AuthorizeAsync(System.String,System.Int32)">
            <summary>
            Checks whether an entity can be accessed in the current store.
            </summary>
            <param name="entityName">Entity name to check</param>
            <param name="entityId">Entity id to check</param>
            <returns><c>true</c> authorized, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingService.AuthorizeAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Checks whether an entity can be accessed in a given store.
            </summary>
            <param name="entityName">Entity name to check</param>
            <param name="entityId">Entity id to check</param>
            <param name="storeId">Store identifier to check against</param>
            <returns><c>true</c> authorized, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingService.GetAuthorizedStoreIdsAsync(System.String,System.Int32)">
            <summary>
            Finds store identifiers with granted access (mapped to the entity)
            </summary>
            <param name="entityName">Entity name to check</param>
            <param name="entityId">Entity id to check</param>
            <returns>Store identifiers</returns>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingService.PrefetchStoreMappingsAsync(System.String,System.Int32[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Prefetches a collection of store mappings for a range of entities in one go
            and caches them for the duration of the current request.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="entityIds">
            The entity ids to load store mappings for. Can be null,
            in which case all store mappings for the requested scope are loaded.
            </param>
            <param name="isRange">A value indicating whether <paramref name="entityIds"/> represents a range of ids (perf).</param>
            <param name="isSorted">A value indicating whether <paramref name="entityIds"/> is already sorted (perf).</param>
            <param name="tracked">A value indicating whether to put prefetched entities to EF change tracker.</param>
        </member>
        <member name="M:Smartstore.Core.Stores.IStoreMappingService.GetStoreMappingCollectionAsync(System.String,System.Int32[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a collection of store mappings for a range of entities in one go.
            </summary>
            <param name="entityName">Name of the entity.</param>
            <param name="entityIds">
            The entity ids to load store mappings for. Can be null,
            in which case all store mappings for the requested scope are loaded.
            </param>
            <param name="isRange">A value indicating whether <paramref name="entityIds"/> represents a range of ids (perf).</param>
            <param name="isSorted">A value indicating whether <paramref name="entityIds"/> is already sorted (perf).</param>
            <param name="tracked">A value indicating whether to put prefetched entities to EF change tracker.</param>
            <returns>Store mapping collection.</returns>
        </member>
        <member name="F:Smartstore.Core.Stores.StoreMappingService.STOREMAPPING_SEGMENT_KEY">
            <summary>
            0 = segment (EntityName.IdRange)
            </summary>
        </member>
        <member name="M:Smartstore.Core.Stores.StoreMappingService.ClearCacheSegmentAsync(System.String,System.Int32)">
            <summary>
            Clears the cached segment from the cache
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeSettings.BundleOptimizationEnabled">
            <summary>
            Gets or sets a value indicating whether
            asset bundling is enabled
            </summary>
            <value>
            0: Auto (decide based on debug mode) > default
            1: Disabled
            2: Enabled
            </value>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeSettings.AssetCachingEnabled">
            <summary>
            Gets or sets a value indicating whether
            asset caching is enabled
            </summary>
            <value>
            0 = Auto (decide based on debug mode)
            1 = Disabled
            2 = Enabled > default
            </value>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeSettings.DefaultTheme">
            <summary>
            Gets or sets a default store theme for desktops
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeSettings.AllowCustomerToSelectTheme">
            <summary>
            Gets or sets a value indicating whether customers are allowed to select a theme
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeSettings.SaveThemeChoiceInCookie">
            <summary>
            Gets or sets a value indicating whether user's theme choice should be saved in a cookie
            </summary>
            <remarks>
            If <c>false</c>, user's theme choice is associated to the account, 
            which may be undesirable when, for example, multiple users share a guest account.
            </remarks>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.Smartstore#Engine#Modularity#IExtensionDescriptor#ExtensionType">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.Name">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.FriendlyName">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.Description">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.Group">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.Author">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.ProjectUrl">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.Tags">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.Version">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.MinAppVersion">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.Path">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.PhysicalPath">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.ContentRoot">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.WebRoot">
            <inheritdoc/>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeDescriptor.IsSymbolicLink">
            <summary>
            Determines whether the theme directory is a symbolic link to another target.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Theming.ThemeVariableInfo">
            <summary>
            Represents deserialized metadata for a theme variable
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeVariableInfo.Name">
            <summary>
            Gets the variable name as specified in the config file
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeVariableInfo.DefaultValue">
            <summary>
            Gets the default variable value as specified in the config file
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeVariableInfo.Type">
            <summary>
            Gets the variable type as specified in the config file
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeVariableInfo.SelectRef">
            <summary>
            Gets the id of the select element or <c>null</c>,
            if the variable is not a select type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeVariableInfo.ThemeDescriptor">
            <summary>
            Gets the theme descriptor the variable belongs to
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeVariable.Theme">
            <summary>
            Gets or sets the theme the variable belongs to
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeVariable.Name">
            <summary>
            Gets or sets the theme attribute name
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeVariable.Value">
            <summary>
            Gets or sets the theme attribute value
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.ThemeVariable.StoreId">
            <summary>
            Gets or sets the store identifier
            </summary>
        </member>
        <member name="T:Smartstore.Core.Theming.IThemeContext">
            <summary>
            Provides access to the current working theme.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.IThemeContext.WorkingThemeName">
            <summary>
            Gets or sets the name of the current theme (e.g. Flex)
            </summary>
        </member>
        <member name="P:Smartstore.Core.Theming.IThemeContext.CurrentTheme">
            <summary>
            Gets or sets the descriptor of the current working theme while respecting any request or session scoped override.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeContext.GetRequestTheme">
            <summary>
            Gets the theme override for the current request
            </summary>
            <returns>The theme override or <c>null</c></returns>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeContext.GetPreviewTheme">
            <summary>
            Gets the theme override for the current session
            </summary>
            <returns>The theme override or <c>null</c></returns>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeContext.SetRequestTheme(System.String)">
            <summary>
            Sets a theme override to be used for the current request
            </summary>
            <param name="theme">The theme override or <c>null</c> to remove the override</param>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeContext.SetPreviewTheme(System.String)">
            <summary>
            Sets a theme override to be used for the current user's session (e.g. for preview mode)
            </summary>
            <param name="theme">The theme override or <c>null</c> to remove the override</param>
        </member>
        <member name="T:Smartstore.Core.Theming.IThemeRegistry">
            <summary>
            Manages themes
            </summary>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeRegistry.GetThemeDescriptors(System.Boolean)">
            <summary>
            Gets the descriptors of all registered themes.
            </summary>
            <param name="includeHidden">Specifies whether inactive themes should also be included in the result list</param>
            <returns>A collection of <see cref="T:Smartstore.Core.Theming.ThemeDescriptor"/> instances.</returns>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeRegistry.GetThemeDescriptor(System.String)">
            <summary>
            Gets a single theme descriptor by theme name
            </summary>
            <param name="themeName">The name of the theme to get a descriptor for</param>
            <returns>A <see cref="T:Smartstore.Core.Theming.ThemeDescriptor"/> instance or <c>null</c> if the theme is not registered.</returns>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeRegistry.ContainsTheme(System.String)">
            <summary>
            Gets a value indicating whether a theme is registered
            </summary>
            <param name="themeName">The theme name to check</param>
            <returns><c>true</c> if theme exists, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeRegistry.AddThemeDescriptor(Smartstore.Core.Theming.ThemeDescriptor)">
            <summary>
            Registers a theme descriptor.
            </summary>
            <param name="descriptor">The theme descriptor to register</param>
            <remarks>If an equal theme exists already, it gets removed first.</remarks>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeRegistry.IsChildThemeOf(System.String,System.String)">
            <summary>
            Gets a value indicating whether a theme is a child of another theme
            </summary>
            <param name="themeName">The name of the theme to test</param>
            <param name="baseTheme">The name of the base theme</param>
            <returns><c>true</c> when <paramref name="themeName"/> is based on <paramref name="baseTheme"/>, <c>false</c> othwerise</returns>
            <remarks>
            This method walks up the complete hierarchy chain of <paramref name="themeName"/> to determine the result.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeRegistry.GetChildrenOf(System.String,System.Boolean)">
            <summary>
            Gets all derived child themes 
            </summary>
            <param name="themeName">The name of the theme to get the children for</param>
            <param name="deep">When <c>true</c>, the method gets all child themes in the hierarchy chain, otherwise it only returns direct children.</param>
            <returns>The descriptors of matching themes</returns>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeRegistry.ReloadThemes">
            <summary>
            Clears all parsed theme descriptors and reloads them.
            </summary>
        </member>
        <member name="E:Smartstore.Core.Theming.IThemeRegistry.ThemeExpired">
            <summary>
            Event raised when a theme or any of its parents are removed 
            from registry due to changes to "theme.config" or directory removal/renaming.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeVariableService.GetThemeVariablesAsync(System.String,System.Int32)">
            <summary>
            Gets a dynamic object which holds all runtime theme variables
            </summary>
            <param name="themeName">The theme to get variables for.</param>
            <param name="storeId">Store identifier</param>
            <returns>The dynamic variables object</returns>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeVariableService.SaveThemeVariablesAsync(System.String,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Saves theme variables to the database
            </summary>
            <param name="themeName">The theme for which to save variables</param>
            <param name="storeId">Store identifier</param>
            <param name="variables">The variables to save</param>
            <returns>The count of successfully updated or inserted variables</returns>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeVariableService.DeleteThemeVariablesAsync(System.String,System.Int32)">
            <summary>
            Deletes all variables of the specified theme from the database
            </summary>
            <param name="themeName">The theme to get variables for.</param>
            <param name="storeId">Store identifier</param>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeVariableService.ImportVariablesAsync(System.String,System.Int32,System.String)">
            <summary>
            Imports variables from xml
            </summary>
            <param name="themeName">The theme for which to import variables</param>
            <param name="storeId">Store identifier</param>
            <param name="configurationXml">The xml configuration</param>
            <returns>The number of successfully imported variables</returns>
        </member>
        <member name="M:Smartstore.Core.Theming.IThemeVariableService.ExportVariablesAsync(System.String,System.Int32)">
            <summary>
            Exports the configuration of a theme to xml
            </summary>
            <param name="themeName">The theme to export variables for</param>
            <param name="storeId">Store identifier</param>
            <returns>The configuration xml</returns>
        </member>
        <member name="T:Smartstore.Core.Web.IPreviewModeCookie">
            <summary>
            Allows short-term overwriting of context data in a cookie, for preview purposes.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IPreviewModeCookie.GetOverride(System.String)">
            <summary>
            Reads an override with the given <paramref name="key"/> from the cookie.
            </summary>
            <returns>The overriden value or <c>null</c>.</returns>
        </member>
        <member name="M:Smartstore.Core.Web.IPreviewModeCookie.SetOverride(System.String,System.String)">
            <summary>
            Writes an override to the cookie on response start. The override takes effect during the next request.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IPreviewModeCookie.RemoveOverride(System.String)">
            <summary>
            Removes an override from the cookie.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.IPreviewModeCookie.AllOverrideKeys">
            <summary>
            Reads all existing override keys from the cookie.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Web.IViewDataAccessor">
            <summary>
            Provides global access to the current ViewData dictionary.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.IViewDataAccessor.ViewData">
            <summary>
            The current root ViewData instance. ViewData is populated right before the execution of any controller action.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.GetUrlReferrer">
            <summary>
            Gets URL referrer or <c>null</c> if Uri parsing fails.
            </summary>
            <returns>URL referrer</returns>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.GetClientIdent">
            <summary>
            Gets a unique client identifier
            </summary>
            <returns>A unique identifier</returns>
            <remarks>
            The client identifier is a hashed combination of client ip address and user agent.
            This method returns <c>null</c> if IP or user agent (or both) cannot be determined.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.GetClientIpAddress">
            <summary>
            Gets client IP address.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.GetPublicIPAddressAsync">
            <summary>
            Gets the public IP address of the machine that is hosting the application.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.GetCurrentPageUrl(System.Boolean,System.Boolean)">
            <summary>
            Gets the full URL of the current page (including scheme and host part)
            </summary>
            <param name="withQueryString">Value indicating whether to include query string part</param>
            <param name="lowercaseUrl">Value indicating whether to lowercase URL</param>
            <returns>Page URL</returns>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.IsCurrentConnectionSecured">
            <summary>
            Gets a value indicating whether current connection is secured
            </summary>
            <returns>true - secured, false - not secured</returns>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.GetHttpHeader(System.String)">
            <summary>
            Gets HTTP header by name
            </summary>
            <param name="name">Name</param>
            <returns>HTTP header value</returns>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.GetStoreLocation">
            <summary>
            Gets store location (Scheme + Host + PathBase)
            </summary>
            <returns>Store location</returns>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.IsStaticFileRequested">
            <summary>
            Returns true if the requested resource is one of the typical resources that don't need to be processed by the routing system.
            </summary>
            <returns>True if the request targets a static resource file.</returns>
            <remarks>
            All known extensions provided by <see cref="T:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider"/> are considered to be static resources.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.MapPath(System.String)">
            <summary>
            Maps a virtual path to a physical disk path.
            </summary>
            <param name="path">The path to map. E.g. "bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.ModifyQueryString(System.String,System.String,System.String,System.String)">
            <summary>
            Modifies a URL by merging a query string part and optionally removing a query parameter.
            </summary>
            <param name="url">URL to modify. Can be relative or absolute. May contain the query part. If <c>null</c>, the current page's URL is resolved (PathBase + Path + Query).</param>
            <param name="queryModification">The new query string part (e.g. "page=10") to merge. Leading <c>?</c> char is optional.</param>
            <param name="removeParamName">The name of a query param to remove.</param>
            <param name="anchor">Optional anchor part to append. Pass without leading hash char.</param>
            <returns>Modified url</returns>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.RemoveQueryParam(System.String,System.String)">
            <summary>
            Remove query string from url
            </summary>
            <param name="uri">Url to modify</param>
            <param name="queryParam">Query param to remove</param>
            <returns>New url</returns>
        </member>
        <member name="M:Smartstore.Core.Web.IWebHelper.QueryString``1(System.String)">
            <summary>
            Gets query string value by name
            </summary>
            <param name="name">Parameter name</param>
            <returns>Query string value</returns>
        </member>
        <member name="T:Smartstore.Core.Web.IUserAgent">
            <summary>
            Provides parsed and materialized user agent information.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.IUserAgent.UserAgent">
            <summary>
            The raw user agent string.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.IUserAgent.Type">
            <summary>
            Type of user agent, see <see cref="T:Smartstore.Core.Web.UserAgentType"/>
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.IUserAgent.Name">
            <summary>
            Name of user agent, e.g. "Chrome", "Edge", "Firefox", "Opera Mobile", "Googlebot" etc.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.IUserAgent.Version">
            <summary>
            Version of user agent.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.IUserAgent.Platform">
            <summary>
            Platform/OS of user agent, see <see cref="T:Smartstore.Core.Web.UserAgentPlatform"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.IUserAgent.Device">
            <summary>
            Device name of agent, e.g. "Android", "Apple iPhone", "BlackBerry", "Samsung", "PlayStation", "Windows CE" etc.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IUserAgentExtensions.IsBot(Smartstore.Core.Web.IUserAgent)">
            <summary>
            Checks whether agent is a bot.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IUserAgentExtensions.IsBrowser(Smartstore.Core.Web.IUserAgent)">
            <summary>
            Checks whether agent is a browser.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IUserAgentExtensions.IsMobileDevice(Smartstore.Core.Web.IUserAgent)">
            <summary>
            Checks whether agent is a mobile device.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IUserAgentExtensions.IsTablet(Smartstore.Core.Web.IUserAgent)">
            <summary>
            Checks whether agent is a mobile tablet device.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IUserAgentExtensions.IsApplication(Smartstore.Core.Web.IUserAgent)">
            <summary>
            Checks whether agent is the Smartstore application itself.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IUserAgentExtensions.IsPdfConverter(Smartstore.Core.Web.IUserAgent)">
            <summary>
            Checks whether agent is the application's PDF converter.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IUserAgentExtensions.SupportsWebP(Smartstore.Core.Web.IUserAgent)">
            <summary>
            Checks whether the user agent supports the WebP image type.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Web.IUserAgentFactory">
            <summary>
            Responsible for creating instances of <see cref="T:Smartstore.Core.Web.IUserAgent"/>
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IUserAgentFactory.CreateUserAgent(System.String,System.Boolean)">
            <summary>
            Creates a transient instance of <see cref="T:Smartstore.Core.Web.IUserAgent"/>
            for the given <paramref name="userAgent"/> string.
            </summary>
            <param name="userAgent">The user agent string to parse and materialize. Cannot be null.</param>
            <param name="enableCache">
                <c>true</c>: try to load parsed <paramref name="userAgent"/> from memory cache first.
                <c>false</c>: bypass cache and parse given <paramref name="userAgent"/>.
             </param>
            <returns>An implementation of <see cref="T:Smartstore.Core.Web.IUserAgent"/>.</returns>
        </member>
        <member name="T:Smartstore.Core.Web.IUserAgentParser">
            <summary>
            Responsible for parsing and materializing a user agent string.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IUserAgentParser.GetDetectableAgents(Smartstore.Core.Web.UserAgentSegment)">
            <summary>
            Enumerates the friendly names of all detectable agents for the given <paramref name="segment"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.IUserAgentParser.Parse(System.String)">
            <summary>
            Parses and materializes the given raw <paramref name="userAgent"/> string.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Web.UserAgentDevice">
            <summary>
            User agent device info.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.UserAgentDevice.#ctor(System.String,Smartstore.Core.Web.UserAgentDeviceType)">
            <summary>
            Creates a new instance of <see cref="T:Smartstore.Core.Web.UserAgentDevice"/>
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.UserAgentDevice.Name">
            <summary>
            Device name of agent, e.g. "Android", "Apple iPhone", "BlackBerry", "Samsung", "PlayStation", "Windows CE" etc.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.UserAgentDevice.Type">
            <summary>
            Type of device.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Web.UserAgentDeviceType">
            <summary>
            User Agent device types
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentDeviceType.Unknown">
            <summary>
            Unknown / not mapped
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentDeviceType.Wearable">
            <summary>
            Unsupported (for future use)
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentDeviceType.Camera">
            <summary>
            Unsupported (for future use)
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentDeviceType.Smartphone">
            <summary>
            Mobile phone
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentDeviceType.Tablet">
            <summary>
            Table, Phablet
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentDeviceType.Desktop">
            <summary>
            Unsupported (for future use)
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentDeviceType.MediaPlayer">
            <summary>
            Unsupported (for future use)
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentDeviceType.TV">
            <summary>
            Unsupported (for future use)
            </summary>
        </member>
        <member name="T:Smartstore.Core.Web.UserAgentInfo">
            <summary>
            Parsed user agent info
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.UserAgentInfo.#ctor(Smartstore.Core.Web.UserAgentType,System.String,System.String,System.Nullable{Smartstore.Core.Web.UserAgentPlatform},System.Nullable{Smartstore.Core.Web.UserAgentDevice})">
            <summary>
            Creates a new instance of <see cref="T:Smartstore.Core.Web.UserAgentInfo"/>
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.UserAgentInfo.CreateForBot(System.String,System.Nullable{Smartstore.Core.Web.UserAgentPlatform})">
            <summary>
            Creates <see cref="T:Smartstore.Core.Web.UserAgentInfo"/> for a bot.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.UserAgentInfo.CreateForBrowser(System.String,System.String,System.Nullable{Smartstore.Core.Web.UserAgentPlatform},System.Nullable{Smartstore.Core.Web.UserAgentDevice})">
            <summary>
            Creates <see cref="T:Smartstore.Core.Web.UserAgentInfo"/> for a browser.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.UserAgentInfo.CreateForUnknown(System.Nullable{Smartstore.Core.Web.UserAgentPlatform},System.Nullable{Smartstore.Core.Web.UserAgentDevice})">
            <summary>
            Creates <see cref="T:Smartstore.Core.Web.UserAgentInfo"/> for an unknown agent type.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.UserAgentInfo.Type">
            <summary>
            Type of user agent, see <see cref="T:Smartstore.Core.Web.UserAgentType"/>
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.UserAgentInfo.Name">
            <summary>
            Name of user agent, e.g. "Chrome", "Edge", "Firefox", "Opera Mobile", "Googlebot" etc.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.UserAgentInfo.Version">
            <summary>
            Version of Browser or Bot, e.g. "79.0", "83.0.125.4"
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.UserAgentInfo.Platform">
            <summary>
            Platform/OS of user agent, see <see cref="T:Smartstore.Core.Web.UserAgentPlatform"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.UserAgentInfo.Device">
            <summary>
            Device of user agent, see <see cref="T:Smartstore.Core.Web.UserAgentDevice"/>.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Web.UserAgentPlatform">
            <summary>
            User agent platform info.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Web.UserAgentPlatform.#ctor(System.String,Smartstore.Core.Web.UserAgentPlatformFamily,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Smartstore.Core.Web.UserAgentPlatform"/>
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.UserAgentPlatform.Name">
            <summary>
            Platform/OS name of user agent, e.g. "Windows", "Android", "Linux", "iOS" etc.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.UserAgentPlatform.Family">
            <summary>
            Platform/OS family.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Web.UserAgentPlatform.Version">
            <summary>
            For future use.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Web.UserAgentPlatformFamily">
            <summary>
            User Agent platform types
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentPlatformFamily.Unknown">
            <summary>
            Unknown / not mapped
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentPlatformFamily.Generic">
            <summary>
            Generic
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentPlatformFamily.Windows">
            <summary>
            Windows
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentPlatformFamily.Linux">
            <summary>
            Linux
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentPlatformFamily.Unix">
            <summary>
            Unix
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentPlatformFamily.IOS">
            <summary>
            Apple iOS
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentPlatformFamily.MacOS">
            <summary>
            MacOS
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentPlatformFamily.BlackBerry">
            <summary>
            BlackBerry
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentPlatformFamily.Android">
            <summary>
            Android
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentPlatformFamily.Symbian">
            <summary>
            Symbian
            </summary>
        </member>
        <member name="T:Smartstore.Core.Web.UserAgentType">
            <summary>
            User Agent types
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentType.Unknown">
            <summary>
            Unkown / not mapped
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentType.Browser">
            <summary>
            Browser, e.g. "Chrome", "Firefox" etc.
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentType.Bot">
            <summary>
            Bot, Crawler, Spider, Tool
            </summary>
        </member>
        <member name="F:Smartstore.Core.Web.UserAgentType.Application">
            <summary>
            Smartstore
            </summary>
        </member>
        <member name="F:Smartstore.Core.Widgets.AssetLocation.Head">
            <summary>
            Header
            </summary>
        </member>
        <member name="F:Smartstore.Core.Widgets.AssetLocation.Foot">
            <summary>
            Footer
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.ComponentWidget.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:Smartstore.Core.Widgets.ComponentWidget"/>. 
            </summary>
            <param name="componentName">Name of component to invoke.</param>
            <param name="arguments">Arguments to pass to renderer.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.ComponentWidget.#ctor(System.String,System.String,System.Object)">
            <inheritdoc/>
            <param name="module">Module system name in which the view component is located.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.ComponentWidget.#ctor(System.Type)">
            <inheritdoc/>
            <param name="componentType">Type of component to invoke.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.ComponentWidget.#ctor(System.Type,System.Object)">
            <inheritdoc/>
            <param name="arguments">Arguments to pass to renderer.</param>
        </member>
        <member name="P:Smartstore.Core.Widgets.WidgetSettings.ActiveWidgetSystemNames">
            <summary>
            Gets or sets a system names of active widgets.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Widgets.DependentWidgetsAttribute">
            <summary>
            Enables provider developers to specify one or many widgets, which
            should automatically get (de)activated when the provider gets (de)activated.
            Useful in scenarios where separate widgets are responsible for the displaying of provider data. 
            </summary>
            <remarks>
            A widget should definitely NOT depend on multiple providers as the activation
            only occurs on a single item base.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Widgets.IHtmlContentExtensions.HasContent(Microsoft.AspNetCore.Html.IHtmlContent)">
            <summary>
            Gets a value indicating whether the current <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent"/> has actual content (that it is not empty or not all whitespace).
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.AppendTitleParts(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Appends document title parts to the currently rendered page.
            </summary>
            <param name="parts">The parts to append.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.PrependTitleParts(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Prepends document title parts to the currently rendered page.
            </summary>
            <param name="parts">The parts to prepend.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.AppendMetaDescriptionParts(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Appends meta description parts to the currently rendered page.
            </summary>
            <param name="parts">The parts to append.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.PrependMetaDescriptionParts(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Prepends meta description parts to the currently rendered page.
            </summary>
            <param name="parts">The parts to prepend.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.AppendMetaKeywordsParts(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Appends meta keyword parts to the currently rendered page.
            </summary>
            <param name="parts">The parts to append.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.PrependMetaKeywordsParts(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Prepends meta keyword parts to the currently rendered page.
            </summary>
            <param name="parts">The parts to prepend.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.AppendCanonicalUrlParts(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Appends canonical url parts to the currently rendered page (rendered in zone <c>head_canonical</c>).
            </summary>
            <param name="parts">The parts to append.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.PrependCanonicalUrlParts(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Prepends canonical url parts to the currently rendered page (rendered in zone <c>head_canonical</c>).
            </summary>
            <param name="parts">The parts to prepend.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.AppendScriptFiles(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Appends foot script files to the currently rendered page (rendered in zone <c>scripts</c>).
            </summary>
            <param name="urls">The urls to append.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.PrependScriptFiles(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Prepends foot script files to the currently rendered page (rendered in zone <c>scripts</c>).
            </summary>
            <param name="urls">The urls to prepend.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.AppendHeadScriptFiles(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Appends head script files to the currently rendered page (rendered in zone <c>head_scripts</c>).
            </summary>
            <param name="urls">The urls to append.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.PrependHeadScriptFiles(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Prepends head script files to the currently rendered page (rendered in zone <c>head_scripts</c>).
            </summary>
            <param name="urls">The urls to prepend.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.AppendCssFiles(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Appends CSS files to the currently rendered page (rendered in zone <c>stylesheets</c>).
            </summary>
            <param name="urls">The urls to append.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.PrependCssFiles(Smartstore.Core.Widgets.IPageAssetBuilder,System.String[])">
            <summary>
            Prepends CSS files to the currently rendered page (rendered in zone <c>stylesheets</c>).
            </summary>
            <param name="urls">The urls to prepend.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilderExtensions.AddMetaRobots(Smartstore.Core.Widgets.IPageAssetBuilder,System.String,System.String)">
            <summary>
            Adds a meta robots tag to the head.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetSelectorExtensions.GetWidgetsAsync(Smartstore.Core.Widgets.IWidgetSelector,Smartstore.Core.Widgets.IWidgetZone,System.Object)">
            <summary>
            Resolves all widgets for the given zone, sorted by <see cref="P:Smartstore.Core.Widgets.Widget.Prepend"/>, 
            then by <see cref="P:Smartstore.Core.Widgets.Widget.Order"/>.
            </summary>
            <param name="zone">Zone to enumerate widgets for.</param>
            <param name="model">Optional view model.</param>
            <returns>A list of <see cref="T:Smartstore.Core.Widgets.Widget"/> instances that should be injected into the zone.</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetSelectorExtensions.HasContentAsync(Smartstore.Core.Widgets.IWidgetSelector,Smartstore.Core.Widgets.IWidgetZone,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)">
            <summary>
            Checks whether the given <paramref name="zone"/> contains at least one widget
            that produces non-whitespace content.
            </summary>
            <remarks>
            This method must actually INVOKE widgets in order to scan for content.
            It will break iteration on first found real content though.
            But to check for the mere existence of widgets in a zone it is better to call 
            <see cref="M:Smartstore.Core.Widgets.IWidgetSelector.EnumerateWidgetsAsync(Smartstore.Core.Widgets.IWidgetZone,System.Object)"/>.AnyAsync() instead.
            </remarks>
            <param name="zone">The zone to check.</param>
            <param name="viewContext">The current view context.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetSelectorExtensions.GetContentAsync(Smartstore.Core.Widgets.IWidgetSelector,Smartstore.Core.Widgets.IWidgetZone,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Object)">
            <summary>
            Resolves all widgets for the given zone and invokes them.
            </summary>
            <param name="zone">Zone to resolve widgets for</param>
            <param name="viewContext">The current view context</param>
            <param name="model">Optional view model</param>
            <returns>
            A <see cref="T:Smartstore.Core.Widgets.ZoneHtmlContent"/> instance containing the generated content.
            </returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetSelectorExtensions.EnumerateWidgetsAsync(Smartstore.Core.Widgets.IWidgetSelector,System.String,System.Object)">
            <inheritdoc cref="M:Smartstore.Core.Widgets.IWidgetSelector.EnumerateWidgetsAsync(Smartstore.Core.Widgets.IWidgetZone,System.Object)" />
            <param name="zoneName">Zone name to enumerate widgets for.</param>
            <param name="model">Optional view model.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetSelectorExtensions.GetWidgetsAsync(Smartstore.Core.Widgets.IWidgetSelector,System.String,System.Object)">
            <inheritdoc cref="M:Smartstore.Core.Widgets.IWidgetSelectorExtensions.GetWidgetsAsync(Smartstore.Core.Widgets.IWidgetSelector,Smartstore.Core.Widgets.IWidgetZone,System.Object)" />
            <param name="zoneName">Zone name to resolve widgets for.</param>
            <param name="model">Optional view model.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetSelectorExtensions.HasContentAsync(Smartstore.Core.Widgets.IWidgetSelector,System.String,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)">
            <inheritdoc cref="M:Smartstore.Core.Widgets.IWidgetSelectorExtensions.HasContentAsync(Smartstore.Core.Widgets.IWidgetSelector,Smartstore.Core.Widgets.IWidgetZone,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)" />
            <param name="zoneName">The zone name to check.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetSelectorExtensions.GetContentAsync(Smartstore.Core.Widgets.IWidgetSelector,System.String,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Object)">
            <inheritdoc cref="M:Smartstore.Core.Widgets.IWidgetSelectorExtensions.GetContentAsync(Smartstore.Core.Widgets.IWidgetSelector,Smartstore.Core.Widgets.IWidgetZone,Microsoft.AspNetCore.Mvc.Rendering.ViewContext,System.Object)" />
            <param name="zoneName">The zone name to check.</param>
            <param name="model">Optional view model.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.ViewContextExtensions.Clone(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)">
            <summary>
            Clones a <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.ViewContext"/> instance.
            </summary>
            <returns>The cloned view context</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.ViewContextExtensions.Clone``1(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,``0)">
            <summary>
            Clones a <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.ViewContext"/> instance and modifies the model.
            </summary>
            <param name="model">The new model instance to use instead of the original one.</param>
            <returns>The cloned view context</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.ViewContextExtensions.Clone(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)">
            <summary>
            Clones a <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.ViewContext"/> instance and modifies the original <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary"/> instance.
            </summary>
            <param name="viewData">The new view data instance to use instead of the original one.</param>
            <returns>The cloned view context</returns>
        </member>
        <member name="T:Smartstore.Core.Widgets.IActivatableWidget">
            <summary>
            Provides an interface for creating widgets.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IActivatableWidget.GetWidgetZones">
            <summary>
            Gets widget zones where this widget should be rendered.
            </summary>
            <returns>Widget zones</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.IActivatableWidget.GetDisplayWidget(System.String,System.Object,System.Int32)">
            <summary>
            Gets an invoker for displaying a widget.
            </summary>
            <param name="widgetZone">Widget zone where it's displayed.</param>
            <param name="model">The model of the parent view context.</param>
            <param name="storeId">The id of the current store.</param>
        </member>
        <member name="T:Smartstore.Core.Widgets.IWidgetZone">
            <summary>
            Represents a widget zone.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.IWidgetZone.Name">
            <summary>
            The name of the zone which is rendered.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.IWidgetZone.ReplaceContent">
            <summary>
            Specifies whether any default zone content should be removed if at least one 
            widget is rendered in the zone. Default: false.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.IWidgetZone.RemoveIfEmpty">
            <summary>
            Whether to remove the root zone tag when it has no content. 
            Only applies to HTML tags like div, span, section etc..
            <c>zone</c> tags are always removed. Default: false.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.IWidgetZone.PreviewDisabled">
            <summary>
            Whether to disable preview mode.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.IWidgetZone.PreviewTagName">
            <summary>
            The tag name for the widget zone preview element. Default: span.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.IWidgetZone.PreviewCssClass">
            <summary>
            The CSS class(es) to apply to the widget zone preview.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.IWidgetZone.PreviewCssStyle">
            <summary>
            The CSS style(s) to apply to the widget zone preview.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.PlainWidgetZone.Name">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Widgets.PlainWidgetZone.ReplaceContent">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Widgets.PlainWidgetZone.RemoveIfEmpty">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Widgets.PlainWidgetZone.PreviewDisabled">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Widgets.PlainWidgetZone.PreviewTagName">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Widgets.PlainWidgetZone.PreviewCssClass">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Widgets.PlainWidgetZone.PreviewCssStyle">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Widgets.PartialViewWidget.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Smartstore.Core.Widgets.PartialViewWidget"/>.
            </summary>
            <param name="viewName">Name of partial view to invoke.</param>
            <param name="module">Optional: system name of a module to additionally search for view files in.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.PartialViewWidget.#ctor(System.String,System.Object,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Smartstore.Core.Widgets.PartialViewWidget"/>.
            </summary>
            <param name="viewName">Name of view to invoke.</param>
            <param name="model">Model instance to pass to partial view.</param>
            <param name="module">Optional: system name of a module to additionally search for view files in.</param>
        </member>
        <member name="P:Smartstore.Core.Widgets.PartialViewWidget.ViewName">
            <summary>
            Gets the name of the view to render.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.PartialViewWidget.Module">
            <summary>
            Gets the module system name in which the view is located.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.PartialViewWidget.Model">
            <summary>
            Gets the view model instance to pass.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.PartialViewWidget.IsMainPage">
            <summary>
            Set this to <c>true</c> to render a full main page instead of a partial.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.DefaultWidgetSelector.GetZoneAliases(System.String)">
            <summary>
            For legacy widget name mapping.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.IPageAssetBuilder.RootAttributes">
            <summary>
            Gets the root element (html tag) attribute dictionary.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.IPageAssetBuilder.BodyAttributes">
            <summary>
            Gets the body tag attribute dictionary.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilder.AddTitleParts(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Pushes document title parts to the currently rendered page.
            </summary>
            <param name="parts">The parts to push.</param>
            <param name="prepend"><c>true</c> to insert <paramref name="parts"/> at the beginning of the current parts list.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilder.AddMetaDescriptionParts(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Pushes meta description parts to the currently rendered page.
            </summary>
            <param name="parts">The parts to push.</param>
            <param name="prepend"><c>true</c> to insert <paramref name="parts"/> at the beginning of the current parts list.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilder.AddMetaKeywordParts(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Pushes meta keyword parts to the currently rendered page.
            </summary>
            <param name="parts">The parts to push.</param>
            <param name="prepend"><c>true</c> to insert <paramref name="parts"/> at the beginning of the current parts list.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilder.AddScriptFiles(System.Collections.Generic.IEnumerable{System.String},Smartstore.Core.Widgets.AssetLocation,System.Boolean)">
            <summary>
            Adds script files to the currently rendered page.
            </summary>
            <param name="urls">The file urls to add.</param>
            <param name="prepend"><c>true</c> to insert <paramref name="urls"/> at the beginning of the current list.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilder.AddCssFiles(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Adds css files to the currently rendered page.
            </summary>
            <param name="urls">The file urls to add.</param>
            <param name="prepend"><c>true</c> to insert <paramref name="urls"/> at the beginning of the current list.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilder.AddHtmlContent(System.String,Microsoft.AspNetCore.Html.IHtmlContent,System.String,System.Boolean)">
            <summary>
            Adds custom html content to a target zone.
            </summary>
            <param name="targetZone">The zone name to render <paramref name="content"/> in.</param>
            <param name="content">The html content to render.</param>
            <param name="key">An optional key to ensure uniqueness within the target zone.</param>
            <param name="prepend"><c>true</c> renders the <paramref name="content"/> before any zone content.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilder.GetDocumentTitle(System.Boolean)">
            <summary>
            Gets the document title which is composed of all current title parts
            separated by <see cref="P:Smartstore.Core.Seo.SeoSettings.PageTitleSeparator"/>
            </summary>
            <param name="addDefaultTitle">
            Appends or prepends <see cref="P:Smartstore.Core.Seo.SeoSettings.MetaTitle"/> according to
            <see cref="P:Smartstore.Core.Seo.SeoSettings.PageTitleSeoAdjustment"/>. Separates both parts
            with <see cref="P:Smartstore.Core.Seo.SeoSettings.PageTitleSeparator"/>.
            </param>
            <returns>Document title.</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilder.GetMetaDescription">
            <summary>
            Gets the document meta description which is composed of all current description parts separated by ", ".
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilder.GetMetaKeywords">
            <summary>
            Gets the document meta keywords which is composed of all current keyword parts separated by ", ".
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IPageAssetBuilder.TryFindMinFile(System.String,Microsoft.Extensions.FileProviders.IFileProvider)">
            <summary>
            Given an app relative path for a static script or css file, tries to locate
            the minified version ([PathWithoutExtension].min.[Extension]) of this file in the same directory, but only if app
            runs in production mode. If a minified file is found, then its path is returned, otherwise
            <paramref name="path"/> is returned as is.
            </summary>
            <param name="path">File path to check a minified version for.</param>
            <param name="fileProvider">File provider to use for file resolution or <c>null</c> to use WebRoot file provider.</param>
        </member>
        <member name="T:Smartstore.Core.Widgets.IViewInvoker">
            <summary>
            Invokes and renders (partial) views and components outside of controllers.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.IViewInvoker.ViewData">
            <summary>
            Gets the current <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IViewInvoker.GetActionContext(Microsoft.AspNetCore.Mvc.ActionContext,System.String)">
            <summary>
            Gets an <see cref="T:Microsoft.AspNetCore.Mvc.ActionContext"/> instance for the given <paramref name="module"/> area
            so that view resolver looks up pathes in the module directory first.
            </summary>
            <param name="context">The original action context or <c>null</c> to construct a fresh context.</param>
            <param name="module">The module to get action context for.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IViewInvoker.InvokeComponentAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ViewComponentResult)">
            <summary>
            Invokes a view component and returns its html content.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IViewInvoker.InvokePartialViewAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.PartialViewResult)">
            <summary>
            Invokes a partial view and returns its html content.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IViewInvoker.InvokeViewAsync(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ViewResult)">
            <summary>
            Invokes a view and returns its html content.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Widgets.IWidgetInvoker`1">
            <summary>
            Defines an interface for a service which can invoke a particular kind of <see cref="T:Smartstore.Core.Widgets.Widget"/>.
            </summary>
            <remarks>
            Implementations of <see cref="T:Smartstore.Core.Widgets.IWidgetInvoker`1"/> are typically called by the
            <see cref="M:Smartstore.Core.Widgets.Widget.InvokeAsync(Smartstore.Core.Widgets.WidgetContext)"/> method of the corresponding widget type.
            Implementations should be registered as singleton services.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetInvoker`1.InvokeAsync(Smartstore.Core.Widgets.WidgetContext,`0)">
            <summary>
            Invokes the widget asynchronously and returns its content.
            </summary>
            <param name="context">Widget context.</param>
            <param name="widget">The widget to invoke.</param>
            <returns>The result HTML content.</returns>
        </member>
        <member name="T:Smartstore.Core.Widgets.WidgetInvoker`1">
            <summary>
            Abstract base class widget invoker services.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.WidgetInvoker`1.InvokeAsync(Smartstore.Core.Widgets.WidgetContext,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Smartstore.Core.Widgets.WidgetInvoker`1.CreateViewContext(Smartstore.Core.Widgets.WidgetContext,System.IO.TextWriter,System.Object,System.String)">
            <summary>
            Creates a defensive <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.ViewContext"/> copy so that changes made here
            aren't visible to the calling view.
            </summary>
        </member>
        <member name="T:Smartstore.Core.Widgets.IWidgetProvider">
            <summary>
            Allows request scoped registration of custom components, whose results get injected into widget zones.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProvider.GetAllKnownWidgetZonesAsync">
            <summary>
            Reads all known widgetzones from the json file /App_Data/widgetzones.json
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProvider.RegisterWidget(System.String[],Smartstore.Core.Widgets.Widget)">
            <summary>
            Registers a custom widget for widget zones
            </summary>
            <param name="zones">The names of the widget zones to inject the HTML content to</param>
            <param name="widget">Widget to register</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProvider.RegisterWidget(System.Text.RegularExpressions.Regex,Smartstore.Core.Widgets.Widget)">
            <summary>
            Registers a custom widget for multiple widget zones by pattern
            </summary>
            <param name="zonePattern">The widget zone pattern to inject the HTML content to</param>
            <param name="widget">Widget to register</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProvider.RegisterWidget(System.Func{System.String,System.Boolean},Smartstore.Core.Widgets.Widget)">
            <summary>
            Registers a custom widget for multiple widget zones by predicate.
            </summary>
            <param name="zonePredicate">The widget zone predicate to inject the HTML content to.</param>
            <param name="widget">Widget to register</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProvider.HasWidgets(Smartstore.Core.Widgets.IWidgetZone)">
            <summary>
            Checks whether a given zone contains at least one widget.
            </summary>
            <remarks>
            Because of deferred result invocation this method cannot check whether 
            the widget actually PRODUCES content. E.g., 
            if a zone contained a <see cref="T:Smartstore.Core.Widgets.ComponentWidget"/> with an empty 
            result after invocation, this method would still return <c>true</c>.
            </remarks>
            <param name="zone">The zone to check.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProvider.ContainsWidget(Smartstore.Core.Widgets.IWidgetZone,System.String)">
            <summary>
            Checks whether given <paramref name="zone"/> contains a widget
            with the same <see cref="P:Smartstore.Core.Widgets.Widget.Key"/> as <paramref name="widgetKey"/>.
            </summary>
            <param name="zone">The zone to check for existing widget.</param>
            <param name="widgetKey">The widget key to check.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProvider.GetWidgets(Smartstore.Core.Widgets.IWidgetZone)">
            <summary>
            Enumerates all injected widgets for a given zone.
            </summary>
            <param name="zone">Zone to retrieve widgets for.</param>
            <returns>List of <see cref="T:Smartstore.Core.Widgets.Widget"/> instances.</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProviderExtensions.HasWidgets(Smartstore.Core.Widgets.IWidgetProvider,System.String)">
            <inheritdoc cref="M:Smartstore.Core.Widgets.IWidgetProvider.HasWidgets(Smartstore.Core.Widgets.IWidgetZone)" />
            <param name="zoneName">The zone name to check for existing widget.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProviderExtensions.ContainsWidget(Smartstore.Core.Widgets.IWidgetProvider,System.String,System.String)">
            <inheritdoc cref="M:Smartstore.Core.Widgets.IWidgetProvider.ContainsWidget(Smartstore.Core.Widgets.IWidgetZone,System.String)" />
            <param name="zoneName">The zone name to check for existing widget.</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProviderExtensions.RegisterWidget(Smartstore.Core.Widgets.IWidgetProvider,System.String,Smartstore.Core.Widgets.Widget)">
            <summary>
            Registers a custom widget for a single widget zone.
            </summary>
            <param name="zoneName">The name of the widget zone to inject the HTML content to</param>
            <param name="widget">Widget to register</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProviderExtensions.RegisterHtml(Smartstore.Core.Widgets.IWidgetProvider,System.String,Microsoft.AspNetCore.Html.IHtmlContent,System.Int32)">
            <summary>
            Registers custom HTML content for a single widget zone
            </summary>
            <param name="zoneName">The name of the widget zones to inject the HTML content to</param>
            <param name="html">HTML to inject</param>
            <param name="order">Sort order within the specified widget zone</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProviderExtensions.RegisterHtml(Smartstore.Core.Widgets.IWidgetProvider,System.String[],Microsoft.AspNetCore.Html.IHtmlContent,System.Int32)">
            <summary>
            Registers custom HTML content for widget zones
            </summary>
            <param name="zoneNames">The names of the widget zones to inject the HTML content to</param>
            <param name="html">HTML to inject</param>
            <param name="order">Sort order within the specified widget zones</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProviderExtensions.RegisterHtml(Smartstore.Core.Widgets.IWidgetProvider,System.Text.RegularExpressions.Regex,Microsoft.AspNetCore.Html.IHtmlContent,System.Int32)">
            <summary>
            Registers custom HTML content for multiple widget zones by pattern
            </summary>
            <param name="zonePattern">The widget zone pattern to inject the HTML content to</param>
            <param name="html">HTML to inject</param>
            <param name="order">Sort order within the specified widget zones</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProviderExtensions.RegisterViewComponent``1(Smartstore.Core.Widgets.IWidgetProvider,System.String,System.Object,System.Int32)">
            <summary>
            Registers a view component for a single widget zone
            </summary>
            <param name="zoneName">The name of the widget zones to inject the view component to</param>
            <param name="arguments">
            An <see cref="T:System.Object"/> with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance
            containing the invocation arguments.
            </param>
            <param name="order">Sort order within the specified widget zone</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProviderExtensions.RegisterViewComponent``1(Smartstore.Core.Widgets.IWidgetProvider,System.String[],System.Object,System.Int32)">
            <summary>
            Registers a view component for a single widget zone
            </summary>
            <param name="zoneNames">The names of the widget zones to inject the view component to</param>
            <param name="arguments">
            An <see cref="T:System.Object"/> with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance
            containing the invocation arguments.
            </param>
            <param name="order">Sort order within the specified widget zone</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetProviderExtensions.RegisterViewComponent``1(Smartstore.Core.Widgets.IWidgetProvider,System.Text.RegularExpressions.Regex,System.Object,System.Int32)">
            <summary>
            Registers a view component for a single widget zone
            </summary>
            <param name="zonePattern">The widget zone pattern to inject the view component to</param>
            <param name="arguments">
            An <see cref="T:System.Object"/> with properties representing arguments to be passed to the invoked view component
            method. Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance
            containing the invocation arguments.
            </param>
            <param name="order">Sort order within the specified widget zone</param>
        </member>
        <member name="T:Smartstore.Core.Widgets.IWidgetSelector">
            <summary>
            Resolves widgets for zones.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetSelector.EnumerateWidgetsAsync(Smartstore.Core.Widgets.IWidgetZone,System.Object)">
            <summary>
            Enumerates all widgets for the given zone, unsorted.
            </summary>
            <param name="zone">Zone to enumerate widgets for.</param>
            <param name="model">Optional view model.</param>
            <returns>An enumeration of <see cref="T:Smartstore.Core.Widgets.Widget"/> instances that should be injected into the zone.</returns>
        </member>
        <member name="T:Smartstore.Core.Widgets.IWidgetService">
            <summary>
            Widget service interface
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetService.LoadActiveWidgets(System.Int32)">
            <summary>
            Load active widgets
            </summary>
            <param name="storeId">Load records allows only in specified store; pass 0 to load all records</param>
            <returns>Widgets</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetService.LoadActiveWidgetsByWidgetZone(System.String,System.Int32)">
            <summary>
            Load active widgets
            </summary>
            <param name="widgetZone">Widget zone</param>
            <param name="storeId">Load records allows only in specified store; pass 0 to load all records</param>
            <returns>Widgets</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetService.ActivateWidgetAsync(System.String,System.Boolean)">
            <summary>
            (De)activates a global widget.
            </summary>
            <param name="systemName">System name of widget to (de)activate.</param>
            <param name="activate"><c>true</c>: activates widget, <c>false:</c> deactivates widget.</param>
        </member>
        <member name="T:Smartstore.Core.Widgets.IWidgetSource">
            <summary>
            Provides <see cref="T:Smartstore.Core.Widgets.Widget"/> instances for particular widget zones. 
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.IWidgetSource.GetWidgetsAsync(Smartstore.Core.Widgets.IWidgetZone,System.Boolean,System.Object)">
            <summary>
            Enumerates all widgets for a given zone.
            </summary>
            <param name="zone">Zone to retrieve widgets for.</param>
            <param name="isPublicArea">Indicates whether the current route endpoint is in the public store frontend.</param>
            <param name="model">Optional view model</param>
            <returns>List of <see cref="T:Smartstore.Core.Widgets.Widget"/> instances.</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.PartialViewWidgetInvoker.ExpandViewPath(System.String,Microsoft.AspNetCore.Mvc.ActionContext)">
            <summary>
            Replaces {theme} token with current theme path and expands viewPath like this 
            (if viewPath is e.g. '/{theme}/Views/Shared/File.cshtml'):
            1. /Themes/Flex/Views/Shared/File.cshtml
            2. /Views/Shared/File.cshtml
            </summary>
        </member>
        <member name="T:Smartstore.Core.Widgets.SmartHtmlContentBuilder">
            <summary>
            A custom <see cref="T:Microsoft.AspNetCore.Html.HtmlContentBuilder"/> implementation that exposes
            the <c>Entries</c> property for faster emptyness checks.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.SmartHtmlContentBuilder.Count">
            <summary>
            Gets the number of elements in the <see cref="T:Smartstore.Core.Widgets.SmartHtmlContentBuilder"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.SmartHtmlContentBuilder.Entries">
            <summary>
            The list of content entries.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.SmartHtmlContentBuilder.IsEmptyOrWhiteSpace">
            <summary>
            Gets a value indicating whether the content is empty or whitespace.
            </summary>
            <remarks>
            Returns <c>true</c> for a cleared <see cref="T:Smartstore.Core.Widgets.SmartHtmlContentBuilder"/>.
            </remarks>
        </member>
        <member name="M:Smartstore.Core.Widgets.SmartHtmlContentBuilder.Append(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Widgets.SmartHtmlContentBuilder.AppendHtml(Microsoft.AspNetCore.Html.IHtmlContent)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Widgets.SmartHtmlContentBuilder.AppendHtml(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Widgets.SmartHtmlContentBuilder.Clear">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Widgets.SmartHtmlContentBuilder.CopyTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Widgets.SmartHtmlContentBuilder.MoveTo(Microsoft.AspNetCore.Html.IHtmlContentBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Smartstore.Core.Widgets.SmartHtmlContentBuilder.WriteTo(System.IO.TextWriter,System.Text.Encodings.Web.HtmlEncoder)">
            <inheritdoc />
        </member>
        <member name="T:Smartstore.Core.Widgets.Widget">
            <summary>
            Base class for widgets.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.Widget.Order">
            <summary>
            Order of widget within the zone.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.Widget.Prepend">
            <summary>
            Whether the widget output should be inserted BEFORE existing content. 
            Defaults to <c>false</c>, which means the widget output comes AFTER any existing content.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.Widget.Key">
            <summary>
            When set, ensures uniqueness within a particular zone.
            </summary>
        </member>
        <member name="M:Smartstore.Core.Widgets.Widget.IsValid(Smartstore.Core.Widgets.IWidgetZone)">
            <summary>
            Whether the widget is valid in the given <paramref name="zone"/>.
            An invalid widget will not be listed in widget zone enumerations.
            </summary>
            <param name="zone">The widget zone</param>
        </member>
        <member name="M:Smartstore.Core.Widgets.Widget.InvokeAsync(Microsoft.AspNetCore.Mvc.Rendering.ViewContext)">
            <summary>
            Invokes the widget and returns its content.
            </summary>
            <returns>The result HTML content.</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.Widget.InvokeAsync(Smartstore.Core.Widgets.WidgetContext)">
            <summary>
            Invokes the widget and returns its content.
            </summary>
            <param name="context">The widget context</param>
            <returns>The result HTML content.</returns>
        </member>
        <member name="M:Smartstore.Core.Widgets.Widget.System#IComparable{Smartstore#Core#Widgets#Widget}#CompareTo(Smartstore.Core.Widgets.Widget)">
            <inheritdoc />
        </member>
        <member name="P:Smartstore.Core.Widgets.WidgetContext.ActionContext">
            <summary>
            Gets or sets the <see cref="P:Smartstore.Core.Widgets.WidgetContext.ActionContext"/>
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.WidgetContext.HttpContext">
            <summary>
            Gets the <see cref="P:Smartstore.Core.Widgets.WidgetContext.HttpContext"/>
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.WidgetContext.Zone">
            <summary>
            Gets or sets the parent zone.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.WidgetContext.Model">
            <summary>
            Gets or sets the call site model.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.WidgetContext.ViewData">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.WidgetContext.TempData">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ITempDataDictionary"/>.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.WidgetContext.Writer">
            <summary>
            Gets the <see cref="T:System.IO.TextWriter"/> for output.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.ZoneHtmlContent.IsEmptyOrWhiteSpace">
            <summary>
            Gets a value indicating whether the content is empty or whitespace.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.ZoneHtmlContent.HasPreContent">
            <summary>
            Gets a value indicating whether any PRE content exists.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.ZoneHtmlContent.HasPostContent">
            <summary>
            Gets a value indicating whether any POST content exists.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.ZoneHtmlContent.PreContent">
            <summary>
            The zone content that should precede the existing content.
            </summary>
        </member>
        <member name="P:Smartstore.Core.Widgets.ZoneHtmlContent.PostContent">
            <summary>
            The zone content that should follow the existing content.
            </summary>
        </member>
        <member name="M:Smartstore.AffiliateQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Affiliates.Affiliate},System.Boolean)">
            <summary>
            Applies standard filter to affliate query. Orders query by <see cref="P:Smartstore.Core.Checkout.Affiliates.Affiliate.AddressId"/>
            </summary>
        </member>
        <member name="T:Smartstore.GiftCardQueryExtensions">
            <summary>
            Gift card query extensions
            </summary>
        </member>
        <member name="M:Smartstore.GiftCardQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.GiftCards.GiftCard},System.Boolean)">
            <summary>
            Applies standard filter and sorts by <see cref="P:Smartstore.Core.Checkout.GiftCards.GiftCard.CreatedOnUtc"/> descending.
            </summary>
            <param name="query">Gift cards query.</param>
            <param name="includeInactive">Filter by <see cref="P:Smartstore.Core.Checkout.GiftCards.GiftCard.IsGiftCardActivated"/>.</param>
            <returns>Gift cards query.</returns>
        </member>
        <member name="M:Smartstore.GiftCardQueryExtensions.ApplyOrderFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.GiftCards.GiftCard},System.Int32[])">
            <summary>
            Applies an order filter and sorts by <see cref="P:Smartstore.Core.Checkout.GiftCards.GiftCard.CreatedOnUtc"/> descending.
            </summary>
            <param name="query">Gift cards query.</param>
            <param name="orderIds">Order identifiers to filter.</param>
            <returns>Gift cards query.</returns>
        </member>
        <member name="M:Smartstore.GiftCardQueryExtensions.ApplyTimeFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.GiftCards.GiftCard},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Applies date time filter to gift cards query.
            </summary>
        </member>
        <member name="M:Smartstore.GiftCardQueryExtensions.ApplyCouponFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.GiftCards.GiftCard},System.String[])">
            <summary>
            Applies coupon code filter to gift cards query
            </summary>
        </member>
        <member name="M:Smartstore.ICheckoutFactoryExtensions.GetCheckoutStep(Smartstore.Core.Checkout.Orders.ICheckoutFactory,Smartstore.Core.Checkout.Orders.CheckoutContext)">
            <summary>
            Get the checkout step for the current request.
            </summary>
        </member>
        <member name="M:Smartstore.ICheckoutFactoryExtensions.GetNextCheckoutStepUrl(Smartstore.Core.Checkout.Orders.ICheckoutFactory,Smartstore.Core.Checkout.Orders.CheckoutContext,System.Boolean)">
            <summary>
            Gets the URL of the next/previous step in checkout.
            If this cannot be determined, the URL to the confirmation page is returned if <paramref name="next"/> is <c>true</c>,
            otherwise the URL to the shopping cart page.
            </summary>
            <param name="next"><c>true</c> to get the next, <c>false</c> to get the previous checkout step.</param>
        </member>
        <member name="M:Smartstore.IOrderCalculationServiceExtensions.GetShippingDiscountAsync(Smartstore.Core.Checkout.Orders.IOrderCalculationService,Smartstore.Core.Common.Money,Smartstore.Core.Identity.Customer)">
            <summary>
            Gets the discount amount and applied discount for a shipping total.
            </summary>
            <param name="orderCalculationService">Order calculation service.</param>
            <param name="shippingTotal">Shipping total amount.</param>
            <param name="customer">Customer.</param>
            <returns>The discount amount and applied discount.</returns>
        </member>
        <member name="M:Smartstore.IOrderCalculationServiceExtensions.GetOrderSubtotalDiscountAsync(Smartstore.Core.Checkout.Orders.IOrderCalculationService,Smartstore.Core.Common.Money,Smartstore.Core.Identity.Customer)">
            <summary>
            Gets the discount amount and applied discount for an subtotal total.
            </summary>
            <param name="orderCalculationService">Order calculation service.</param>
            <param name="orderSubTotal">Order subtotal.</param>
            <param name="customer">Customer.</param>
            <returns>The discount amount and applied discount.</returns>
        </member>
        <member name="M:Smartstore.IOrderCalculationServiceExtensions.GetOrderTotalDiscountAsync(Smartstore.Core.Checkout.Orders.IOrderCalculationService,Smartstore.Core.Common.Money,Smartstore.Core.Identity.Customer)">
            <summary>
            Gets the discount amount and applied discount for an order total.
            </summary>
            <param name="orderCalculationService">Order calculation service.</param>
            <param name="orderTotal">Order total.</param>
            <param name="customer">Customer.</param>
            <returns>The discount amount and applied discount.</returns>
        </member>
        <member name="M:Smartstore.OrderEventPublisherExtensions.PublishOrderPaidAsync(Smartstore.Events.IEventPublisher,Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Publishes the order paid event.
            </summary>
            <param name="eventPublisher">The event publisher.</param>
            <param name="order">The order instance.</param>
        </member>
        <member name="M:Smartstore.OrderEventPublisherExtensions.PublishOrderPlacedAsync(Smartstore.Events.IEventPublisher,Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Publishes the order placed event.
            </summary>
            <param name="eventPublisher">The event publisher.</param>
            <param name="order">The order instance.</param>
        </member>
        <member name="M:Smartstore.OrderEventPublisherExtensions.PublishOrderUpdatedAsync(Smartstore.Events.IEventPublisher,Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Publishes the order updated event.
            </summary>
            <param name="eventPublisher">The event publisher.</param>
            <param name="order">The order instance.</param>
        </member>
        <member name="M:Smartstore.OrderExtensions.GetOrderNumber(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets <see cref="P:Smartstore.Core.Checkout.Orders.Order.OrderNumber"/> or <see cref="P:Smartstore.Domain.BaseEntity.Id"/> if empty.
            </summary>
            <returns><see cref="P:Smartstore.Core.Checkout.Orders.Order.OrderNumber"/> or <see cref="P:Smartstore.Domain.BaseEntity.Id"/> if empty.</returns>
        </member>
        <member name="M:Smartstore.OrderExtensions.CanCompleteOrder(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order can be marked as completed.
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order can be marked as completed.</returns>
        </member>
        <member name="M:Smartstore.OrderExtensions.CanCancelOrder(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order can be cancelled.
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order can be cancelled.</returns>
        </member>
        <member name="M:Smartstore.OrderExtensions.AddOrderNote(Smartstore.Core.Checkout.Orders.Order,System.String,System.Boolean)">
            <summary>
            Adds an order note. The caller is responsible for database commit.
            </summary>
            <param name="order">Order entity.</param>
            <param name="note">Note to add.</param>
            <param name="displayToCustomer">A value indicating whether to display the note to the customer.</param>
        </member>
        <member name="M:Smartstore.OrderExtensions.CanMarkOrderAsAuthorized(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order can be marked as authorized.
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order can be marked as authorized.</returns>
        </member>
        <member name="M:Smartstore.OrderExtensions.CanMarkOrderAsPaid(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order can be marked as paid.
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order can be marked as paid.</returns>
        </member>
        <member name="M:Smartstore.OrderExtensions.CanRefundOffline(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order can be refunded "offline" (without calling any payment provider).
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order can be refunded.</returns>
        </member>
        <member name="M:Smartstore.OrderExtensions.CanPartiallyRefundOffline(Smartstore.Core.Checkout.Orders.Order,System.Decimal)">
            <summary>
            Gets a value indicating whether an order can be partially refunded "offline" (without calling any payment provider).
            </summary>
            <param name="order">Order.</param>
            <param name="amountToRefund">The amount to refund.</param>
            <returns>A value indicating whether an order can be partially refunded "offline".</returns>
        </member>
        <member name="M:Smartstore.OrderExtensions.CanVoidOffline(Smartstore.Core.Checkout.Orders.Order)">
            <summary>
            Gets a value indicating whether an order can be voided "offline" (without calling any payment provider).
            </summary>
            <param name="order">Order.</param>
            <returns>A value indicating whether an order can be voided "offline".</returns>
        </member>
        <member name="M:Smartstore.OrderItemExtensions.GetBundleData(Smartstore.Core.Checkout.Orders.OrderItem)">
            <summary>
            Gets bundle items data for an order item.
            </summary>
            <param name="orderItem">Order item.</param>
            <returns>List of bundle items order data.</returns>
        </member>
        <member name="M:Smartstore.OrderItemExtensions.SetBundleData(Smartstore.Core.Checkout.Orders.OrderItem,System.Collections.Generic.List{Smartstore.Core.Catalog.Products.ProductBundleItemOrderData})">
            <summary>
            Sets the bundle data for an order item.
            </summary>
            <param name="orderItem">Order item.</param>
            <param name="bundleData">List of bundle items order data.</param>
        </member>
        <member name="M:Smartstore.OrderItemQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.OrderItem},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Applies a standard filter for order or customer identifier.
            </summary>
            <param name="query">Order item query.</param>
            <param name="orderId">Order identifier.</param>
            <param name="customerId">Customer identifier.</param>
            <returns>Order item query.</returns>
        </member>
        <member name="M:Smartstore.OrderItemQueryExtensions.ApplyOrderFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.OrderItem},System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32[],System.Int32[],System.Int32[],System.Nullable{System.Int32})">
            <summary>
            Filters order items by criteria met by assigned orders.
            </summary>
            <param name="storeId"><see cref="P:Smartstore.Core.Checkout.Orders.Order.StoreId"/></param>
            <param name="fromUtc">Earliest <see cref="P:Smartstore.Core.Checkout.Orders.Order.CreatedOnUtc"/></param>
            <param name="toUtc">Latest <see cref="P:Smartstore.Core.Checkout.Orders.Order.CreatedOnUtc"/></param>
            <param name="orderStatusIds">IN <see cref="P:Smartstore.Core.Checkout.Orders.Order.OrderStatusId"/></param>
            <param name="paymentStatusIds">IN IN <see cref="P:Smartstore.Core.Checkout.Orders.Order.PaymentStatusId"/></param>
            <param name="shippingStatusIds">IN <see cref="P:Smartstore.Core.Checkout.Orders.Order.ShippingStatusId"/></param>
            <param name="billingCountryId">Order.BillingAddress.CountryId</param>
        </member>
        <member name="M:Smartstore.OrderItemQueryExtensions.ApplyProductFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.OrderItem},System.Int32[],System.Boolean)">
            <summary>
            Filters order items by criteria met by assigned line items.
            </summary>
            <param name="productIds">Filters all <see cref="T:Smartstore.Core.Checkout.Orders.OrderItem"/>s that contain any <paramref name="productIds"/>.</param>
            <param name="includeHidden">A value indicating Include unpublished products.</param>
        </member>
        <member name="M:Smartstore.OrderItemQueryExtensions.SelectAlsoPurchasedProductIds(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.OrderItem},System.Int32,System.Nullable{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Applies a selection for also purchased product ids.
            </summary>
            <param name="query">Query of <see cref="T:Smartstore.Core.Checkout.Orders.OrderItem"/>s to select from.</param>
            <param name="productId">Product identifier to also receive products purchased with the product.</param>
            <param name="recordsToReturn">Number of products to return. <c>Null</c> or 0 to retrieve all.</param>
            <param name="storeId">Store identifier to get orders from.</param>
            <param name="includeHidden">A value indicating whether to include unpublished products.</param>
            <returns>Query of product identifiers.</returns>
        </member>
        <member name="M:Smartstore.OrderItemQueryExtensions.SelectAsBestsellersReportLine(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.OrderItem},Smartstore.Core.Checkout.Orders.Reporting.ReportSorting)">
            <summary>
            Applies a selection for bestsellers report.
            </summary>
            <param name="query">Order item query to select report from.</param>
            <param name="sorting">Sorting setting to define Bestsellers report type.</param>
            <returns>Query of bestsellers report.</returns>
        </member>
        <member name="M:Smartstore.OrderNoteExtensions.FormatOrderNoteText(Smartstore.Core.Checkout.Orders.OrderNote)">
            <summary>
            Formats the order note text.
            </summary>
            <param name="orderNote">Order note.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.IncludeBillingAddress(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order})">
            <summary>
            Includes the billing address graph for eager loading.
            </summary>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.IncludeShippingAddress(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order})">
            <summary>
            Includes the shipping address graph for eager loading.
            </summary>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.IncludeGiftCardHistory(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order})">
            <summary>
            Includes the gift card history graph for eager loading.
            </summary>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.IncludeCustomer(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order},System.Boolean)">
            <summary>
            Includes the customer graph for eager loading.
            </summary>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.IncludeOrderItems(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order})">
            <summary>
            Includes the order item graph for eager loading.
            </summary>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.IncludeShipments(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order})">
            <summary>
            Includes the shipments graph for eager loading.
            </summary>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Applies a standard filter and sorts by <see cref="P:Smartstore.Core.Checkout.Orders.Order.CreatedOnUtc"/> descending.
            </summary>
            <param name="query">Order query.</param>
            <param name="customerId">Customer identifier.</param>
            <param name="storeId">Store identifier.</param>
            <returns>Ordered order query.</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.ApplyStatusFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order},System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Applies a status filter.
            </summary>
            <param name="query">Order query.</param>
            <param name="orderStatusIds">Order status identifiers.</param>
            <param name="paymentStatusIds">Payment status identifiers.</param>
            <param name="shippingStatusIds">Shipping status identifiers.</param>
            <returns>Order query.</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.ApplyPaymentFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order},System.String[],System.String,System.String)">
            <summary>
            Applies a filter for payment methods and transaction\capture identifier.
            </summary>
            <param name="query">Order query.</param>
            <param name="paymentMethodSystemNames">System name of payment methods.</param>
            <param name="authorizationTransactionId">Authorization transaction identifier. Typically a foreign identifier provided by the payment provider.</param>
            <param name="captureTransactionId">Capture transaction identifier. Typically a foreign identifier provided by the payment provider.</param>
            <returns>Order query.</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.ApplyBillingFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order},System.String,System.String,System.Int32[])">
            <summary>
            Applies a filter for billing data.
            </summary>
            <param name="query">Order query.</param>
            <param name="billingEmail">Email of billing address.</param>
            <param name="billingName">First or last name of billing address.</param>
            <param name="billingCountryIds">Billing country identifiers.</param>
            <returns>Order query.</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.ApplyIncompleteOrdersFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order})">
            <summary>
            Applies a filter for incomplete orders. 
            Filters query for !<see cref="F:Smartstore.Core.Checkout.Orders.OrderStatus.Cancelled"/> and <see cref="F:Smartstore.Core.Checkout.Shipping.ShippingStatus.NotYetShipped"/> or <see cref="F:Smartstore.Core.Checkout.Payment.PaymentStatus.Pending"/>.
            </summary>
            <param name="query">Order query.</param>
            <returns>Query without completed orders.</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.ApplyNeverSoldProductsFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order},System.Boolean)">
            <summary>
            Applies a never sold products filter to query.
            </summary>
            <param name="query">Orders query with date filter already applied.</param>
            <param name="includeHidden">A value indicating whether to include unpublished products.</param>
            <returns>Query with products which have never been sold.</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.SelectAsOrderDataPoint(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order})">
            <summary>
            Selects <see cref="T:Smartstore.Core.Checkout.Orders.Reporting.OrderDataPoint"/> from query.
            </summary>
            <param name="query">Order query from which to select.</param>
            <returns><see cref="T:System.Linq.IQueryable"/> of <see cref="T:Smartstore.Core.Checkout.Orders.Reporting.OrderDataPoint"/>.</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.SelectAsTopCustomerReportLine(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order},Smartstore.Core.Checkout.Orders.Reporting.ReportSorting)">
            <summary>
            Groups orders by <see cref="P:Smartstore.Core.Checkout.Orders.Order.CustomerId"/> and selects <see cref="T:Smartstore.Core.Checkout.Orders.Reporting.TopCustomerReportLine"/> from <paramref name="query"/>.
            </summary>
            <param name="query">Order query.</param>
            <param name="sorting"><see cref="T:Smartstore.Core.Checkout.Orders.Reporting.ReportSorting"/> to apply.</param>
            <returns><see cref="T:Smartstore.Core.Checkout.Orders.Reporting.TopCustomerReportLine"/> query.</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.GetOrdersProductCostsAsync(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order})">
            <summary>
            Gets orders product costs async.
            </summary>
            <param name="query">Orders query.</param>
            <returns>Product costs</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.GetOrdersTotalAsync(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order})">
            <summary>
            Gets orders total async.
            </summary>
            <param name="query">Order query.</param>
            <returns>Orders totals.</returns>
        </member>
        <member name="M:Smartstore.OrderQueryExtensions.ApplyCustomerFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.Order},System.Int32[])">
            <summary>
            Selects customer authorized orders from query.
            </summary>
            <param name="query">Order query from which to select.</param>
            <returns><see cref="T:System.Linq.IQueryable"/> of <see cref="T:Smartstore.Core.Checkout.Orders.Reporting.OrderDataPoint"/>.</returns>
        </member>
        <member name="M:Smartstore.ReturnRequestQueryExtensions.IncludeCustomer(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.ReturnRequest},System.Boolean)">
            <summary>
            Includes the the customer graph for eager loading.
            </summary>
        </member>
        <member name="M:Smartstore.ReturnRequestQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Checkout.Orders.ReturnRequest},System.Int32[],System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Applies a standard filter and sorts by <see cref="P:Smartstore.Core.Checkout.Orders.ReturnRequest.CreatedOnUtc"/> descending, then by <see cref="P:Smartstore.Domain.BaseEntity.Id"/> descending.
            </summary>
            <param name="query">Return request query.</param>
            <param name="orderItemIds">Order item identifiers.</param>
            <param name="customerId">Customer identifier.</param>
            <param name="storeId">Store identifier.</param>
            <returns>Return request query.</returns>
        </member>
        <member name="M:Smartstore.ShipmentEventPublisherExtensions.PublishTrackingNumberAddedAsync(Smartstore.Events.IEventPublisher,Smartstore.Core.Checkout.Shipping.Shipment)">
            <summary>
            Publishes the tracking number added event.
            </summary>
            <param name="eventPublisher">The event publisher.</param>
            <param name="shipment">The shipment the tracking number that was added to.</param>
        </member>
        <member name="M:Smartstore.ShipmentEventPublisherExtensions.PublishTrackingNumberChangedAsync(Smartstore.Events.IEventPublisher,Smartstore.Core.Checkout.Shipping.Shipment,System.String)">
            <summary>
            Publishes the tracking number changed event.
            </summary>
            <param name="eventPublisher">The event publisher.</param>
            <param name="shipment">The shipment for which the tracking number has changed.</param>
            <param name="oldTrackingNumber">The old tracking number of the shipment.</param>
        </member>
        <member name="M:Smartstore.ITaxServiceExtensions.ApplyTaxFormat(Smartstore.Core.Checkout.Tax.ITaxService,Smartstore.Core.Common.Money,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Smartstore.Core.Localization.Language)">
            <summary>
                Applies a tax formatting pattern to given <c>product</c> money <paramref name="source"/>,
                e.g. "{0} *", "{0} incl. tax"
            </summary>
            <param name="source">
                The source <see cref="T:Smartstore.Core.Common.Money"/> to apply formatting to.
            </param>
            <param name="displayTaxSuffix">
                A value indicating whether to display the tax suffix.
                If <c>null</c>, current setting will be obtained via <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.DisplayTaxSuffix"/> and
                additionally via <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShippingPriceIncludesTax"/> or <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.PaymentMethodAdditionalFeeIncludesTax"/>.
            </param>
            <param name="priceIncludesTax">
                A value indicating whether given price includes tax already.
                If <c>null</c>, current setting will be obtained via <see cref="P:Smartstore.Core.IWorkContext.TaxDisplayType"/>.
            </param>
            <param name="language">
                Language for tax suffix. If <c>null</c>, language will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingLanguage"/>.
            </param>
            <returns>Money</returns>
        </member>
        <member name="M:Smartstore.ITaxServiceExtensions.ApplyShippingChargeTaxFormat(Smartstore.Core.Checkout.Tax.ITaxService,Smartstore.Core.Common.Money,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Smartstore.Core.Localization.Language)">
            <summary>
                Applies a tax formatting pattern to given <c>shipping charge</c> money <paramref name="source"/>,
                e.g. "{0} *", "{0} incl. tax"
            </summary>
            <param name="source">
                The source <see cref="T:Smartstore.Core.Common.Money"/> to apply formatting to.
            </param>
            <param name="displayTaxSuffix">
                A value indicating whether to display the tax suffix.
                If <c>null</c>, current setting will be obtained via <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.DisplayTaxSuffix"/> and
                additionally via <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShippingPriceIncludesTax"/> or <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.PaymentMethodAdditionalFeeIncludesTax"/>.
            </param>
            <param name="priceIncludesTax">
                A value indicating whether given price includes tax already.
                If <c>null</c>, current setting will be obtained via <see cref="P:Smartstore.Core.IWorkContext.TaxDisplayType"/>.
            </param>
            <param name="language">
                Language for tax suffix. If <c>null</c>, language will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingLanguage"/>.
            </param>
            <returns>Money</returns>
        </member>
        <member name="M:Smartstore.ITaxServiceExtensions.ApplyPaymentFeeTaxFormat(Smartstore.Core.Checkout.Tax.ITaxService,Smartstore.Core.Common.Money,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Smartstore.Core.Localization.Language)">
            <summary>
                Applies a tax formatting pattern to given <c>payment fee</c> money <paramref name="source"/>,
                e.g. "{0} *", "{0} incl. tax"
            </summary>
            <param name="source">
                The source <see cref="T:Smartstore.Core.Common.Money"/> to apply formatting to.
            </param>
            <param name="displayTaxSuffix">
                A value indicating whether to display the tax suffix.
                If <c>null</c>, current setting will be obtained via <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.DisplayTaxSuffix"/> and
                additionally via <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.ShippingPriceIncludesTax"/> or <see cref="P:Smartstore.Core.Checkout.Tax.TaxSettings.PaymentMethodAdditionalFeeIncludesTax"/>.
            </param>
            <param name="priceIncludesTax">
                A value indicating whether given price includes tax already.
                If <c>null</c>, current setting will be obtained via <see cref="P:Smartstore.Core.IWorkContext.TaxDisplayType"/>.
            </param>
            <param name="language">
                Language for tax suffix. If <c>null</c>, language will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingLanguage"/>.
            </param>
            <returns>Money</returns>
        </member>
        <member name="P:Smartstore.Domain.EntityWithAttributes.GenericAttributes">
            <summary>
            Gets a specialized generic attributes collection for the current entity.
            Loaded data will be cached for the duration of the request.
            </summary>
            <returns>
            Generic attributes collection or <c>null</c> if <see cref="T:Smartstore.Core.Common.Services.IGenericAttributeService"/> 
            is not registered in service container. If entity is transient, a readonly collection
            is returned.
            </returns>
        </member>
        <member name="M:Smartstore.AddressExtensions.FindAddress(System.Collections.Generic.ICollection{Smartstore.Core.Common.Address},Smartstore.Core.Common.Address,System.String)">
            <summary>
            Finds first occurrence of an address.
            </summary>
            <param name="source">Addresses in which to search.</param>
            <param name="address">Address to find.</param>
            <param name="email">Specifies whether addresses must match per email. If not empty, the parameter must match the email of the returned address.</param>
            <returns>First matched address.</returns>
        </member>
        <member name="M:Smartstore.AddressExtensions.PatchAddress(Smartstore.Core.Common.Address,Smartstore.Core.Common.Address)">
            <summary>
            Finds first occurrence of an address and patches it by adding <see cref="P:Smartstore.Core.Common.Address.PhoneNumber"/> and <see cref="P:Smartstore.Core.Common.Address.FaxNumber"/> if target properties are empty.
            The caller is responsible for database commit.
            </summary>
            <param name="source">Source address to apply patch from.</param>
            <param name="target">Target Address to patch.</param>
            <returns>The patched target address.</returns>
        </member>
        <member name="M:Smartstore.AddressExtensions.GetFullName(Smartstore.Core.Common.Address,System.Boolean)">
            <summary>
            Returns the full name of the address.
            </summary>
            <param name="withCompanyName">Specifies wheter to include the company name.</param>
            <returns>"FirstName LastName, Company"</returns>
        </member>
        <member name="M:Smartstore.CountryQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Common.Country},System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Applies standard filter and optionally sorts by <see cref="P:Smartstore.Core.Common.Country.DisplayOrder"/>, then by <see cref="P:Smartstore.Core.Common.Country.Name"/>.
            </summary>
            <param name="query">Country query.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Common.Country.Published"/>.</param>
            <param name="storeId">Store identifier to apply filter by store restriction. 0 to load all countries.</param>
            <param name="applySort">Applies standard sorting by <see cref="P:Smartstore.Core.Common.Country.DisplayOrder"/>, then by <see cref="P:Smartstore.Core.Common.Country.Name"/>.</param>
            <returns>Country query.</returns>
        </member>
        <member name="M:Smartstore.CountryQueryExtensions.ApplyIsoCodeFilter(System.Linq.IQueryable{Smartstore.Core.Common.Country},System.String)">
            <summary>
            Applies filter by <see cref="P:Smartstore.Core.Common.Country.TwoLetterIsoCode"/> or <see cref="P:Smartstore.Core.Common.Country.ThreeLetterIsoCode"/>
            </summary>
        </member>
        <member name="M:Smartstore.CurrencyExtensions.HasDomainEnding(Smartstore.Core.Common.Currency,System.String)">
            <summary>
            Checks if a currency was configured for the domain ending.
            </summary>
            <param name="domain">Domain to check.</param>
        </member>
        <member name="M:Smartstore.CurrencyExtensions.GetByDomainEnding(System.Collections.Generic.IEnumerable{Smartstore.Core.Common.Currency},System.String)">
            <summary>
            Returns the currency configured for the domain ending.
            </summary>
            <param name="domain">Domain to check.</param>
        </member>
        <member name="M:Smartstore.CurrencyQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Common.Currency},System.Boolean,System.Int32)">
            <summary>
            Applies standard filter and sorts by <see cref="P:Smartstore.Core.Common.Currency.DisplayOrder"/>.
            </summary>
            <param name="query">Currency query.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Common.Currency.Published"/>.</param>
            <param name="storeId">Store identifier to apply filter by store restriction.</param>
            <returns>Currency query.</returns>
        </member>
        <member name="M:Smartstore.DateTimeHelperExtensions.ConvertToUserTime(Smartstore.Core.Common.Services.IDateTimeHelper,System.DateTime,System.TimeZoneInfo)">
            <summary>
            Converts the date and time zone info to current user date and time
            </summary>
        </member>
        <member name="M:Smartstore.DateTimeHelperExtensions.ConvertToUserTime(Smartstore.Core.Common.Services.IDateTimeHelper,System.DateTime)">
            <summary>
            Converts the date to current user date and time
            </summary>
        </member>
        <member name="M:Smartstore.DateTimeHelperExtensions.ConvertToUtcTime(Smartstore.Core.Common.Services.IDateTimeHelper,System.DateTime,System.DateTimeKind,System.TimeZoneInfo)">
            <summary>
            Converts the date and time to Coordinated Universal Time (UTC)
            </summary>
        </member>
        <member name="M:Smartstore.DateTimeHelperExtensions.ConvertToUtcTime(Smartstore.Core.Common.Services.IDateTimeHelper,System.DateTime)">
            <summary>
            Converts the date and time to Coordinated Universal Time (UTC)
            </summary>
        </member>
        <member name="M:Smartstore.DeliveryTimeExtensions.GetMinOrMaxOrAverageDays(Smartstore.Core.Common.DeliveryTime)">
            <summary>
            Intended to be used for submission of products to third parties which require the delivery days as integer,
            e.g. price comparison portals or after-sales services.
            </summary>
            <returns>Days as integer or null if no days are set for the current delivery time.</returns>
        </member>
        <member name="M:Smartstore.IAuditableQueryExtensions.ApplyAuditDateFilter``1(System.Linq.IQueryable{``0},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Applies a filter for <see cref="P:Smartstore.Domain.IAuditable.CreatedOnUtc"/>
            </summary>
            <param name="fromUtc">Start date in UTC.</param>
            <param name="toUtc">End date in UTC</param>
        </member>
        <member name="M:Smartstore.ICurrencyServiceExtensions.ConvertToPrimaryCurrency(Smartstore.Core.Common.Services.ICurrencyService,Smartstore.Core.Common.Money)">
            <summary>
            Exchanges given <see cref="T:Smartstore.Core.Common.Money"/> amount to <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryCurrency"/>.
            </summary>
            <param name="amount">The source amount to exchange</param>
            <returns>The exchanged amount.</returns>
        </member>
        <member name="M:Smartstore.ICurrencyServiceExtensions.ConvertFromPrimaryCurrency(Smartstore.Core.Common.Services.ICurrencyService,System.Decimal,Smartstore.Core.Common.Currency)">
            <summary>
            Exchanges given money amount (which is assumed to be in <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryCurrency"/>) to <paramref name="toCurrency"/>,
            using <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryExchangeCurrency"/> as exchange rate currency.
            </summary>
            <param name="amount">The source amount to exchange (should be in <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryCurrency"/>).</param>
            <returns>The exchanged amount in <paramref name="toCurrency"/>.</returns>
        </member>
        <member name="M:Smartstore.ICurrencyServiceExtensions.ConvertToExchangeRateCurrency(Smartstore.Core.Common.Services.ICurrencyService,Smartstore.Core.Common.Money)">
            <summary>
            Exchanges given <see cref="T:Smartstore.Core.Common.Money"/> amount to <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryExchangeCurrency"/>.
            </summary>
            <param name="amount">The source amount to exchange</param>
            <returns>The exchanged amount.</returns>
        </member>
        <member name="M:Smartstore.ICurrencyServiceExtensions.ConvertToExchangeRate(Smartstore.Core.Common.Services.ICurrencyService,System.Decimal,System.Decimal,System.Object,System.Boolean)">
            <summary>
            Exchanges given money amount (which is assumed to be in <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryCurrency"/>) by using <paramref name="exchangeRate"/>.
            Typically used when converting money amounts of orders at the rate that was applied at the time the order was placed.
            </summary>
            <param name="amount">The source amount to exchange (should be in <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryCurrency"/>).</param>
            <param name="exchangeRate">The currency exchange rate, e.g. <see cref="P:Smartstore.Core.Checkout.Orders.Order.CurrencyRate"/>.</param>
            <param name="currencyCodeOrObj">Target currency as string code (e.g. <see cref="P:Smartstore.Core.Checkout.Orders.Order.CustomerCurrencyCode"/>) or an actual <see cref="T:Smartstore.Core.Common.Currency"/> instance.</param>
            <param name="displayCurrency">A value indicating whether to display the currency symbol/code.</param>
            <returns>The exchanged amount.</returns>
        </member>
        <member name="M:Smartstore.ICurrencyServiceExtensions.ConvertToCurrency(Smartstore.Core.Common.Services.ICurrencyService,Smartstore.Core.Common.Money,Smartstore.Core.Common.Currency)">
            <summary>
            Exchanges given <see cref="T:Smartstore.Core.Common.Money"/> amount to <paramref name="targetCurrency"/>,
            using <see cref="P:Smartstore.Core.Common.Services.ICurrencyService.PrimaryExchangeCurrency"/> as exchange rate currency.
            </summary>
            <param name="amount">The source amount to exchange.</param>
            <param name="targetCurrency">The target currency to exchange amount to.</param>
            <returns>The exchanged amount.</returns>
        </member>
        <member name="M:Smartstore.IDeliveryTimeServiceExtensions.GetDeliveryTimeAsync(Smartstore.Core.Common.Services.IDeliveryTimeService,Smartstore.Core.Catalog.Products.Product,Smartstore.Core.Catalog.CatalogSettings)">
            <summary>
            Gets the product delivery time according to stock.
            </summary>
        </member>
        <member name="M:Smartstore.IGenericAttributeServiceExtensions.GetAttributesForEntity(Smartstore.Core.Common.Services.IGenericAttributeService,Smartstore.Domain.BaseEntity)">
            <summary>
            Gets a specialized generic attributes collection for the given entity.
            Loaded data will be cached for the duration of the request.
            </summary>
            <param name="entity">The entity instance to get attributes for.</param>
        </member>
        <member name="M:Smartstore.IGenericAttributeServiceExtensions.PrefetchAttributesAsync(Smartstore.Core.Common.Services.IGenericAttributeService,Smartstore.Domain.BaseEntity[])">
            <summary>
            Prefetches a collection of generic attributes for a range of entities in one go
            and caches them for the duration of the current request.
            </summary>
            <param name="entities">The entity instances to prefetch attributes for.</param>
        </member>
        <member name="M:Smartstore.IRoundingHelperExtensions.Round(Smartstore.Core.Common.Services.IRoundingHelper,Smartstore.Core.Common.Money)">
            <summary>
            Rounds <see cref="P:Smartstore.Core.Common.Money.Amount"/> of <paramref name="amount"/> by using its <see cref="P:Smartstore.Core.Common.Money.Currency"/>.
            </summary>
            <param name="amount">Amount to round.</param>
            <returns>Rounded amount.</returns>
        </member>
        <member name="M:Smartstore.IRoundingHelperExtensions.ToSmallestCurrencyUnit(Smartstore.Core.Common.Services.IRoundingHelper,Smartstore.Core.Common.Money)">
            <summary>
            Rounds <see cref="P:Smartstore.Core.Common.Money.Amount"/> of <paramref name="amount"/> to the smallest currency unit (e.g. cents) by using its <see cref="P:Smartstore.Core.Common.Money.Currency"/>.
            </summary>
            <param name="amount">Amount to round.</param>
            <returns>Rounded amount.</returns>
        </member>
        <member name="M:Smartstore.IRoundingHelperExtensions.ToSmallestCurrencyUnit(Smartstore.Core.Common.Services.IRoundingHelper,System.Decimal,Smartstore.Core.Common.Currency)">
            <summary>
            Rounds <paramref name="amount"/> to the smallest currency unit (e.g. cents).
            </summary>
            <param name="amount">Amount to round.</param>
            <param name="currency">
            Rounds <paramref name="amount"/> using <see cref="P:Smartstore.Core.Common.Currency.RoundNumDecimals"/> and <see cref="P:Smartstore.Core.Common.Currency.MidpointRounding"/>.
            Cannot be <c>null</c>.
            </param>
            <returns>Rounded amount.</returns>
        </member>
        <member name="M:Smartstore.IRoundingHelperExtensions.ToNearest(Smartstore.Core.Common.Services.IRoundingHelper,Smartstore.Core.Common.Money,Smartstore.Core.Common.Currency,Smartstore.Core.Common.Money@)">
            <summary>
            Round value up or down to the nearest multiple of denomination (cash rounding) if activated for currency.
            </summary>
            <param name="amount">Amount to round.</param>
            <param name="currency">
            Currency. <see cref="P:Smartstore.Core.Common.Currency.RoundOrderTotalEnabled"/> must be activated for this currency.
            If <c>null</c>, currency will be obtained via <see cref="P:Smartstore.Core.IWorkContext.WorkingCurrency"/>.
            </param>
            <param name="toNearestRounding">Amount by which was rounded.</param>
            <returns>Rounded amount.</returns>
            <example>"Schweizer Rappenrundung" of 16.23 -> returned value is 16.25 and toNearestRounding is 0.02.</example>
            <remarks>Usually this method is used to round the order total.</remarks>
        </member>
        <member name="M:Smartstore.QuantityUnitDbSetExtensions.GetQuantityUnitByIdAsync(Microsoft.EntityFrameworkCore.DbSet{Smartstore.Core.Common.QuantityUnit},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets a quantity unit by identifier. Loads the default quantity unit if none was found by <paramref name="quantityUnitId"/>.
            </summary>
            <param name="quantityUnits">Quantity units.</param>
            <param name="quantityUnitId">The quantity unit identifier.</param>
            <param name="fallbackToDefault">A value indicating whether to load the default quantity unit if none was found by <paramref name="quantityUnitId"/>.</param>
            <param name="tracked">A value indicating whether to put prefetched entities to EF change tracker.</param>
            <returns>Found quantity unit or <c>null</c> if none was found.</returns>
        </member>
        <member name="M:Smartstore.StateProvinceDbSetExtensions.GetStateProvincesByCountryIdAsync(Microsoft.EntityFrameworkCore.DbSet{Smartstore.Core.Common.StateProvince},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets state provinces by country ID.
            </summary>
            <param name="stateProvinces">State provinces.</param>
            <param name="countryId">Country identifier.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Common.StateProvince.Published"/>.</param>
            <param name="tracked">A value indicating whether to put prefetched entities to EF change tracker.</param>
            <returns>State provinces.<c>null</c> if <paramref name="countryId"/> is 0.</returns>
        </member>
        <member name="M:Smartstore.StateRegionQueryExtensions.ApplyCountryFilter(System.Linq.IQueryable{Smartstore.Core.Common.StateProvince},System.Int32,System.Boolean)">
            <summary>
            Applies filter by <see cref="P:Smartstore.Core.Common.StateProvince.CountryId"/> and orders by <see cref="P:Smartstore.Core.Common.StateProvince.DisplayOrder"/>
            </summary>
            <param name="countryId">Country identifier.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Common.StateProvince.Published"/>.</param>
        </member>
        <member name="M:Smartstore.IMediaUrlGeneratorExtensions.GenerateUrl(Smartstore.Core.Content.Media.IMediaUrlGenerator,Smartstore.Core.Content.Media.MediaFileInfo,Smartstore.Core.Content.Media.Imaging.ProcessImageQuery,System.String,System.Boolean)">
            <summary>
            Generates a public URL for a media file
            </summary>
            <param name="file">The file to create a URL for</param>
            <param name="imageQuery">Query for image processing / thumbnails.</param>
            <param name="host">
                Store host for an absolute URL that also contains scheme and host parts. 
                <c>null</c>: tries to resolve host automatically based on <see langword="Store.ContentDeliveryNetwork"/> or <see cref="P:Smartstore.Core.Content.Media.MediaSettings.AutoGenerateAbsoluteUrls"/>.
                <c>String.Empty</c>: bypasses automatic host resolution and does NOT prepend host to path.
                <c>Any string</c>: host name to use explicitly.
            </param>
            <param name="doFallback">
            Specifies behaviour in case URL generation fails.
                <c>false</c>: return <c>null</c>.
                <c>true</c>: return URL to a fallback image which is <c>~/Content/images/default-image.png</c> by default but can be modified with hidden setting <c>Media.DefaultImageName</c>
            </param>
            <returns>The passed file's public URL.</returns>
        </member>
        <member name="M:Smartstore.ISettingServiceExtensions.SettingExistsAsync``2(Smartstore.Core.Configuration.ISettingService,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32)">
            <summary>
            Checks whether a setting for the given store exists.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <typeparam name="TPropType">Property type</typeparam>
            <param name="settings">Settings</param>
            <param name="keySelector">Key selector</param>
            <param name="storeId">Store identifier</param>
            <returns><c>true</c> if setting exists in database.</returns>
        </member>
        <member name="M:Smartstore.ISettingServiceExtensions.ApplySettingAsync``2(Smartstore.Core.Configuration.ISettingService,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32)">
            <summary>
            Applies setting value. The caller is responsible for database commit.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <typeparam name="TPropType">Property type</typeparam>
            <param name="settings">Settings</param>
            <param name="keySelector">Key selector</param>
            <param name="storeId">Store ID</param>
        </member>
        <member name="M:Smartstore.ISettingServiceExtensions.RemoveSettingsAsync``1(Smartstore.Core.Configuration.ISettingService)">
            <summary>
            Remove all settings. The caller is responsible for database commit.
            </summary>
            <typeparam name="T">Type</typeparam>
        </member>
        <member name="M:Smartstore.ISettingServiceExtensions.RemoveSettingAsync``2(Smartstore.Core.Configuration.ISettingService,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32)">
            <summary>
            Removes a setting. The caller is responsible for database commit.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <typeparam name="TPropType">Property type</typeparam>
            <param name="settings">Settings</param>
            <param name="keySelector">Key selector</param>
            <param name="storeId">Store ID</param>
            <returns><c>true</c> when the setting existed and has been deleted</returns>
        </member>
        <member name="M:Smartstore.ISettingServiceExtensions.UpdateSettingAsync``2(Smartstore.Core.Configuration.ISettingService,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.Int32)">
            <summary>
            Applies or removes a setting property. The caller is responsible for database commit.
            </summary>
            <typeparam name="T">Entity type</typeparam>
            <typeparam name="TPropType">Property type</typeparam>
            <param name="settings">Settings</param>
            <param name="keySelector">Key selector</param>
            <param name="storeId">Store ID</param>
            <returns><c>true</c> when the setting property has been modified.</returns>
        </member>
        <member name="M:Smartstore.CustomerExtensions.GetRoleNames(Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Enumerates the system names of the roles the customer is in.
            </summary>
            <remarks>
            Navigation properties <see cref="P:Smartstore.Core.Identity.Customer.CustomerRoleMappings"/> 
            then <see cref="P:Smartstore.Core.Identity.CustomerRoleMapping.CustomerRole"/> are required and must be loaded or lazily loadable.
            </remarks>
            <param name="onlyActiveRoles">A value indicating whether to match only active customer roles.</param>
        </member>
        <member name="M:Smartstore.CustomerExtensions.IsInRole(Smartstore.Core.Identity.Customer,System.String,System.Boolean)">
            <summary>
            Gets a value indicating whether customer is in a certain customer role.
            </summary>
            <remarks>
            Navigation properties <see cref="P:Smartstore.Core.Identity.Customer.CustomerRoleMappings"/> 
            then <see cref="P:Smartstore.Core.Identity.CustomerRoleMapping.CustomerRole"/> are required and must be loaded or lazily loadable.
            </remarks>
            <param name="roleSystemName">Customer role system name.</param>
            <param name="onlyActiveRoles">A value indicating whether to match only active customer roles.</param>
        </member>
        <member name="M:Smartstore.CustomerExtensions.IsAdmin(Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Gets a value indicating whether customer is administrator.
            </summary>
            <remarks>
            Navigation properties <see cref="P:Smartstore.Core.Identity.Customer.CustomerRoleMappings"/> 
            then <see cref="P:Smartstore.Core.Identity.CustomerRoleMapping.CustomerRole"/> are required and must be loaded or lazily loadable.
            </remarks>
            <param name="onlyActiveRoles">A value indicating whether to match only active customer roles.</param>
        </member>
        <member name="M:Smartstore.CustomerExtensions.IsSuperAdmin(Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Gets a value indicating whether customer is super administrator.
            </summary>
            <remarks>
            Navigation properties <see cref="P:Smartstore.Core.Identity.Customer.CustomerRoleMappings"/> 
            then <see cref="P:Smartstore.Core.Identity.CustomerRoleMapping.CustomerRole"/> are required and must be loaded or lazily loadable.
            </remarks>
            <param name="onlyActiveRoles">A value indicating whether to match only active customer roles.</param>
        </member>
        <member name="M:Smartstore.CustomerExtensions.IsRegistered(Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Gets a value indicating whether customer is registered.
            </summary>
            <remarks>
            Navigation properties <see cref="P:Smartstore.Core.Identity.Customer.CustomerRoleMappings"/> 
            then <see cref="P:Smartstore.Core.Identity.CustomerRoleMapping.CustomerRole"/> are required and must be loaded or lazily loadable.
            </remarks>
            <param name="onlyActiveRoles">A value indicating whether to match only active customer roles.</param>
        </member>
        <member name="M:Smartstore.CustomerExtensions.IsGuest(Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Gets a value indicating whether customer is guest.
            </summary>
            <remarks>
            Navigation properties <see cref="P:Smartstore.Core.Identity.Customer.CustomerRoleMappings"/> 
            then <see cref="P:Smartstore.Core.Identity.CustomerRoleMapping.CustomerRole"/> are required and must be loaded or lazily loadable.
            </remarks>
            <param name="onlyActiveRoles">A value indicating whether to match only active customer roles.</param>
        </member>
        <member name="M:Smartstore.CustomerExtensions.IsBackgroundTaskAccount(Smartstore.Core.Identity.Customer)">
            <summary>
            Gets a value indicating whether the customer is a built-in record for background tasks.
            </summary>
        </member>
        <member name="M:Smartstore.CustomerExtensions.IsBot(Smartstore.Core.Identity.Customer)">
            <summary>
            Gets a value indicating whether customer is a search engine.
            </summary>
        </member>
        <member name="M:Smartstore.CustomerExtensions.IsPdfConverter(Smartstore.Core.Identity.Customer)">
            <summary>
            Gets a value indicating whether customer is the pdf converter.
            </summary>
        </member>
        <member name="M:Smartstore.CustomerExtensions.GetFullName(Smartstore.Core.Identity.Customer)">
            <summary>
            Gets the customer's full name or an empty string if given <paramref name="customer"/> is null.
            </summary>
        </member>
        <member name="M:Smartstore.CustomerExtensions.GetDisplayName(Smartstore.Core.Identity.Customer,Smartstore.Core.Localization.Localizer)">
            <summary>
            Gets the display name of a customer (full name, user name or email).
            </summary>
            <returns>Display name of a customer.</returns>
        </member>
        <member name="M:Smartstore.CustomerExtensions.FormatUserName(Smartstore.Core.Identity.Customer)">
            <summary>
            Formats the customer name.
            </summary>
            <returns>Formatted customer name.</returns>
        </member>
        <member name="M:Smartstore.CustomerExtensions.FormatUserName(Smartstore.Core.Identity.Customer,System.Boolean)">
            <summary>
            Formats the customer name.
            </summary>
            <param name="customer">Customer entity.</param>
            <param name="stripTooLong">Whether to strip too long customer name.</param>
            <returns>Formatted customer name.</returns>
        </member>
        <member name="M:Smartstore.CustomerExtensions.FormatUserName(Smartstore.Core.Identity.Customer,Smartstore.Core.Identity.CustomerSettings,Smartstore.Core.Localization.Localizer,System.Boolean)">
            <summary>
            Formats the customer name.
            </summary>
            <param name="customer">Customer entity.</param>
            <param name="customerSettings">Customer settings.</param>
            <param name="T">Localizer.</param>
            <param name="stripTooLong">Whether to strip too long customer name.</param>
            <returns>Formatted customer name.</returns>
        </member>
        <member name="M:Smartstore.CustomerExtensions.FindEmail(Smartstore.Core.Identity.Customer)">
            <summary>
            Find any email address of customer.
            </summary>
        </member>
        <member name="M:Smartstore.CustomerExtensions.ResetCheckoutData(Smartstore.Core.Identity.Customer,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Resets data required for checkout. The caller is responsible for database commit.
            </summary>
            <param name="storeId">Store identifier</param>
            <param name="clearCouponCodes">A value indicating whether to clear coupon code</param>
            <param name="clearCheckoutAttributes">A value indicating whether to clear selected checkout attributes</param>
            <param name="clearRewardPoints">A value indicating whether to clear "Use reward points" flag</param>
            <param name="clearShippingMethod">A value indicating whether to clear selected shipping method</param>
            <param name="clearPaymentMethod">A value indicating whether to clear selected payment method</param>
            <param name="clearCreditBalance">A value indicating whether to clear credit balance.</param>
        </member>
        <member name="M:Smartstore.EmailAccountExtensions.ToMailAddress(Smartstore.Core.Messaging.EmailAccount)">
            <summary>
            Creates a new <see cref="T:Smartstore.Net.Mail.MailAddress"/> based on <see cref="P:Smartstore.Core.Messaging.EmailAccount.Email"/> and <see cref="P:Smartstore.Core.Messaging.EmailAccount.DisplayName"/>.
            </summary>
        </member>
        <member name="M:Smartstore.NewsletterSubscriptionEventPublisherExtensions.PublishNewsletterSubscribedAsync(Smartstore.Events.IEventPublisher,System.String)">
            <summary>
            Publishes the newsletter subscribed event.
            </summary>
            <param name="eventPublisher">The event publisher.</param>
            <param name="email">The mail address which has subscribed.</param>
        </member>
        <member name="M:Smartstore.NewsletterSubscriptionEventPublisherExtensions.PublishNewsletterUnsubscribedAsync(Smartstore.Events.IEventPublisher,System.String)">
            <summary>
            Publishes the newsletter unsubscribed event.
            </summary>
            <param name="eventPublisher">The event publisher.</param>
            <param name="email">The mail address which has unsubscribed.</param>
        </member>
        <member name="M:Smartstore.NewsletterSubscriptionQueryExtensions.ApplyMailAddressFilter(System.Linq.IQueryable{Smartstore.Core.Messaging.NewsletterSubscription},System.String,System.Int32)">
            <summary>
            Applies filter by <see cref="P:Smartstore.Core.Messaging.NewsletterSubscription.Email"/> and <see cref="P:Smartstore.Core.Messaging.NewsletterSubscription.StoreId"/> and validates mail address.
            </summary>
        </member>
        <member name="M:Smartstore.NewsletterSubscriptionQueryExtensions.ApplyStandardFilter(System.Linq.IQueryable{Smartstore.Core.Messaging.NewsletterSubscription},System.String,System.Boolean,System.Int32[],System.Int32[])">
            <summary>
            Applies standard filter and sorts by <see cref="P:Smartstore.Core.Messaging.NewsletterSubscription.Email"/>, then by <see cref="P:Smartstore.Core.Messaging.NewsletterSubscription.StoreId"/>.
            </summary>
            <param name="query">Newsletter subscription query.</param>
            <param name="includeHidden">Applies filter by <see cref="P:Smartstore.Core.Messaging.NewsletterSubscription.Active"/>.</param>
            <param name="customerRoleIds">Customer roles identifiers to filter by active customer roles.</param>
            <param name="storeIds">Store identifiers to apply filter by store restriction.</param>
            <returns>NewsletterSubscriber query.</returns>
        </member>
        <member name="M:Smartstore.QueuedEmailQueryExtensions.ApplyMailAddressFilter(System.Linq.IQueryable{Smartstore.Core.Messaging.QueuedEmail},System.String,System.String)">
            <summary>
            Applies filter by <see cref="P:Smartstore.Core.Messaging.QueuedEmail.From"/> and <see cref="P:Smartstore.Core.Messaging.QueuedEmail.To"/>.
            </summary>
        </member>
        <member name="M:Smartstore.QueuedEmailQueryExtensions.ApplyTimeFilter(System.Linq.IQueryable{Smartstore.Core.Messaging.QueuedEmail},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Applies filter by <see cref="P:Smartstore.Core.Messaging.QueuedEmail.CreatedOnUtc"/> and <see cref="P:Smartstore.Core.Messaging.QueuedEmail.SentOnUtc"/>. 
            </summary>
        </member>
        <member name="M:Smartstore.QueuedEmailQueryExtensions.ApplySorting(System.Linq.IQueryable{Smartstore.Core.Messaging.QueuedEmail},System.Boolean)">
            <summary>
            Applies sorting by <see cref="P:Smartstore.Core.Messaging.QueuedEmail.Priority"/> and <see cref="P:Smartstore.Core.Messaging.QueuedEmail.CreatedOnUtc"/>. 
            </summary>
            <param name="sortByLatest">If <c>true</c>, sorts <see cref="P:Smartstore.Core.Messaging.QueuedEmail.CreatedOnUtc"/> descending.</param>
        </member>
        <member name="T:Smartstore.Engine.Modularity.ModulePopulatorFilter">
            <summary>
            Tries to resolve the originating module and populates
            DataTokens with the module name so that any view location
            expander can rely on this.
            </summary>
        </member>
        <member name="T:Smartstore.Engine.Modularity.IProviderManager">
            <summary>
            Manages provider implementations
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.IProviderManager.GetProvider``1(System.String,System.Int32)">
            <summary>
            Gets a provider of type <typeparamref name="TProvider"/> by system name.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.IProviderManager.GetProvider(System.String,System.Int32)">
            <summary>
            Gets a provider by system name.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.IProviderManager.GetAllProviders``1(System.Int32)">
            <summary>
            Enumerates all providers of type <typeparamref name="TProvider"/> lazily without instantiating them.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.IProviderManager.GetAllProviders(System.Int32)">
            <summary>
            Enumerates all providers lazily without instantiating them.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.IProviderManager.GetUserSetting``1(Smartstore.Engine.Modularity.ProviderMetadata,System.Linq.Expressions.Expression{System.Func{Smartstore.Engine.Modularity.ProviderMetadata,``0}})">
            <summary>
            Gets a user setting for the given provider.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.IProviderManager.ApplyUserSetting``1(Smartstore.Engine.Modularity.ProviderMetadata,System.Linq.Expressions.Expression{System.Func{Smartstore.Engine.Modularity.ProviderMetadata,``0}})">
            <summary>
            Applies a user setting for the given provider. The caller is responsible for database commit.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.IProviderManager.IsEnabledForStore(Smartstore.Engine.Modularity.IModuleDescriptor,System.Int32)">
            <summary>
            Checks whether a given <paramref name="module"/> is enabled for a particular <paramref name="storeId"/>.
            </summary>
            <param name="module">Module to check</param>
            <param name="storeId">Store ID to check.</param>
        </member>
        <member name="T:Smartstore.Engine.Modularity.ModularFileProvider">
            <summary>
            Base modular file provider.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModularFileProvider.ResolveFileProvider(System.String@)">
            <summary>
            Implementors should analyze path segments and resolve matching file providers and rebase given <paramref name="path"/> accordingly.
            </summary>
        </member>
        <member name="T:Smartstore.Engine.Modularity.ModuleBase">
            <inheritdoc cref="T:Smartstore.Engine.Modularity.IModule" />
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleBase.ImportLanguageResourcesAsync">
            <summary>
            Imports all language resources for the current module from xml files in localization directory (if any found).
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleBase.DeleteLanguageResourcesAsync">
            <summary>
            Deletes all language resource for the current module if <see cref="P:Smartstore.Engine.Modularity.IModuleDescriptor.ResourceRootKey"/> is not empty.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleBase.DeleteLanguageResourcesAsync(System.String)">
            <summary>
            Deletes all language resource starting with the given <paramref name="rootKey"/>.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleBase.SaveSettingsAsync``1">
            <summary>
            Saves the default state of a setting class to the database overwriting any existing value.
            </summary>
            <returns>The number of inserted or updated setting properties.</returns>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleBase.SaveSettingsAsync``1(``0)">
            <summary>
            Saves <paramref name="settings"/> to the database overwriting any existing value.
            </summary>
            <returns>The number of inserted or updated setting properties.</returns>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleBase.TrySaveSettingsAsync``1">
            <summary>
            Saves the default state of a setting class to the database without overwriting existing values.
            </summary>
            <returns>The number of inserted or updated setting properties.</returns>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleBase.TrySaveSettingsAsync``1(``0)">
            <summary>
            Saves <paramref name="settings"/> to the database without overwriting existing values.
            </summary>
            <returns>The number of inserted or updated setting properties.</returns>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleBase.DeleteSettingsAsync``1">
            <summary>
            Deletes all properties from <typeparamref name="T"/> settings from the database
            including related <see cref="T:Smartstore.Core.Localization.LocalizedProperty"/> if any.
            </summary>
            <returns>The number of deleted setting properties.</returns>
        </member>
        <member name="T:Smartstore.Engine.Modularity.ProviderBrandImage">
            <summary>
            Cached provider brand image URLs.
            Brand images are located in the "wwwroot/brands" module subfolder.
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderBrandImage.DefaultImageUrl">
            <summary>
            Gets the fully qualified app relative path to the provider's default
            brand image. The search pattern is:
            "{SysName}.png", "{SysName}.gif", "{SysName}.jpg", "default.png", "default.gif", "default.jpg".
            If no file is found, then the parent descriptor's 
            <see cref="P:Smartstore.Engine.Modularity.IModuleDescriptor.BrandImageFileName"/> will be returned instead.
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderBrandImage.NumberedImageUrls">
            <summary>
            Gets the fully qualified app relative paths to the provider's numbered brand images,
            e.g. "provider-1.png", "provider-2.png" etc. Up to 5 images are allowed.
            </summary>
        </member>
        <member name="T:Smartstore.Engine.Modularity.ModuleManager">
            <summary>
            A mediator between modules/providers and core application services: 
            provides localization, setting access, module instantiation etc.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleManager.CreateInstance(System.String)">
            <summary>
            Creates a transient instance of a module entry class by name.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleManager.CreateInstance(Smartstore.Engine.Modularity.IModuleDescriptor)">
            <summary>
            Creates a transient instance of a module entry class by descriptor.
            </summary>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleManager.GetIconUrl(Smartstore.Engine.Modularity.IModuleDescriptor,System.String)">
            <summary>
            Returns the absolute path of a module/provider icon
            </summary>
            <param name="descriptor">The plugin descriptor. Used to resolve the physical path</param>
            <param name="providerSystemName">Optional system name of provider. If passed, an icon with this name is being tried to resolve first.</param>
            <returns>The icon's absolute path</returns>
        </member>
        <member name="M:Smartstore.Engine.Modularity.ModuleManager.GetBrandImage(Smartstore.Engine.Modularity.ProviderMetadata)">
            <summary>
            Gets a cached instance of the <see cref="T:Smartstore.Engine.Modularity.ProviderBrandImage"/> class
            containing URLs to the resolved provider brand images 
            in the "wwwroot/brands" directory.
            </summary>
        </member>
        <member name="T:Smartstore.Engine.Modularity.ModulesInitializer">
            <summary>
            Installs pending modules on app startup and checks whether any module has changed
            and refreshes all module locale resources.
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.IProviderMetadata.SystemName">
            <summary>
            Gets the provider system name
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.IProviderMetadata.ResourceKeyPattern">
            <summary>
            Gets the resource key pattern for user data (e.g. FriendlyName)
            </summary>
            <example>
            Plugins.{1}.{0} > 0 = provider system name, 1 = propertyname
            </example>
        </member>
        <member name="P:Smartstore.Engine.Modularity.IProviderMetadata.FriendlyName">
            <summary>
            Gets the provider friendly name
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.IProviderMetadata.Description">
            <summary>
            Gets the provider description
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.IProviderMetadata.DisplayOrder">
            <summary>
            Gets the provider display order
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.ProviderType">
            <summary>
            Gets or sets the provider type
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.GroupName">
            <summary>
            Gets or sets the provider's group name
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.SystemName">
            <summary>
            Gets or sets the provider system name
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.ImplType">
            <summary>
            Gets or sets the provider concrete implementation type.
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.ResourceKeyPattern">
            <summary>
            Gets or sets the resource key pattern for user data (e.g. FriendlyName)
            </summary>
            <example>
            Plugins.{1}.{0} > 0 = provider system name, 1 = propertyname
            </example>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.SettingKeyPattern">
            <summary>
            Gets or sets the setting key pattern for user data (e.g. DisplayOrder)
            </summary>
            <example>
            Plugins.{0}.{1} > 0 = provider system name, 1 = propertyname
            </example>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.FriendlyName">
            <summary>
            Gets or sets the provider friendly name
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.Description">
            <summary>
            Gets or sets the provider description
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.DisplayOrder">
            <summary>
            Gets or sets the display order
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.IsConfigurable">
            <summary>
            Gets or sets a value indicating whether the provider is configurable (by implementing <see cref="T:Smartstore.Engine.Modularity.IConfigurable"/>)
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.IsEditable">
            <summary>
            Gets or sets a value indicating whether the provider is editable by the user (by implementing <see cref="T:Smartstore.Engine.Modularity.IUserEditable"/>)
            </summary>
            <remarks>
            A provider is editable if the user is allowed to change display order and/or localize display name
            </remarks>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.IsHidden">
            <summary>
            Gets or sets a value indicating whether the provider is hidden (by decorating with <see cref="T:Smartstore.Engine.Modularity.IsHiddenAttribute"/>)
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.ExportFeatures">
            <summary>
            Gets or sets flags that reflects what features of export data processing is supported by a provider.
            </summary>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.DependentWidgets">
            <summary>
            Gets or sets an array of widget system names, which depend on the current provider
            </summary>
            <remarks>
            Dependent widgets get automatically (de)activated when their parent providers get (de)activated
            </remarks>
        </member>
        <member name="P:Smartstore.Engine.Modularity.ProviderMetadata.ModuleDescriptor">
            <summary>
            Gets or sets the <see cref="T:Smartstore.Engine.Modularity.IModuleDescriptor"/> instance in which the provider is implemented
            </summary>
            <remarks>The value is <c>null</c>, if the provider is part of the application core</remarks>
        </member>
        <member name="M:Smartstore.Scheduling.TaskQueryExtensions.ApplyTaskFilter(System.Linq.IQueryable{Smartstore.Scheduling.TaskExecutionInfo},System.Int32,System.Boolean)">
            <summary>
            Filters by <see cref="P:Smartstore.Scheduling.TaskExecutionInfo.TaskDescriptorId"/> and orders by <see cref="P:Smartstore.Scheduling.TaskExecutionInfo.StartedOnUtc"/>
            and Id, both descending.
            </summary>
            <param name="taskId">Filter by task identifier.</param>
            <param name="lastInfoOnly">A value indicating whether to only return the last execution info per task.</param>
        </member>
        <member name="M:Smartstore.Scheduling.TaskQueryExtensions.ApplyCurrentMachineNameFilter(System.Linq.IQueryable{Smartstore.Scheduling.TaskExecutionInfo})">
            <summary>
            Filters by <see cref="P:Smartstore.Scheduling.TaskExecutionInfo.MachineName"/> == current machine name.
            </summary>
        </member>
        <member name="M:Smartstore.IPermissionServiceExtensions.Authorize(Smartstore.Core.Security.IPermissionService,Smartstore.Core.Security.PermissionRecord)">
            <summary>
            Checks whether given permission is granted.
            </summary>
            <param name="permission">Permission to check.</param>
            <returns><c>true</c> if granted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.IPermissionServiceExtensions.Authorize(Smartstore.Core.Security.IPermissionService,Smartstore.Core.Security.PermissionRecord,Smartstore.Core.Identity.Customer)">
            <summary>
            Checks whether given permission is granted.
            </summary>
            <param name="permission">Permission to check.</param>
            <param name="customer">Customer.</param>
            <returns><c>true</c> if granted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.IPermissionServiceExtensions.AuthorizeAsync(Smartstore.Core.Security.IPermissionService,Smartstore.Core.Security.PermissionRecord)">
            <summary>
            Checks whether given permission is granted.
            </summary>
            <param name="permission">Permission to check.</param>
            <returns><c>true</c> if granted, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Smartstore.IPermissionServiceExtensions.AuthorizeAsync(Smartstore.Core.Security.IPermissionService,Smartstore.Core.Security.PermissionRecord,Smartstore.Core.Identity.Customer)">
            <summary>
            Checks whether given permission is granted.
            </summary>
            <param name="permission">Permission to check.</param>
            <param name="customer">Customer.</param>
            <returns><c>true</c> if granted, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Smartstore.Templating.TemplateZoneRenderingEvent">
            <summary>
            Published when a template zone is about to be rendered.
            By subscribing to this event, implementors can inject custom
            content to specific template zones.
            </summary>
        </member>
        <member name="P:Smartstore.Templating.TemplateZoneRenderingEvent.TemplateName">
            <summary>
            The name of the rendered template.
            </summary>
        </member>
        <member name="P:Smartstore.Templating.TemplateZoneRenderingEvent.ZoneName">
            <summary>
            The name of the zone which is rendered.
            </summary>
        </member>
        <member name="P:Smartstore.Templating.TemplateZoneRenderingEvent.Model">
            <summary>
            The template model
            </summary>
        </member>
        <member name="M:Smartstore.Templating.TemplateZoneRenderingEvent.Evaluate(System.String)">
            <summary>
            Evaluates an expression - e.g. Product.Sku - and returns it's value.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Smartstore.Templating.TemplateZoneRenderingEvent.InjectContent(System.String,System.Boolean)">
            <summary>
            Specifies the custom content to inject.
            </summary>
            <param name="content">The content</param>
            <param name="parse">This should be <c>true</c> if the content contains template syntax.</param>
        </member>
        <member name="M:Smartstore.UrlHelperExtensions.Referrer(Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            Generates a URL to the local referrer. This method addresses
            "Open Redirection Vulnerability" (prevents cross-domain redirects / phishing).
            </summary>
            <returns>The local referrer URL or <c>null</c> if the referrer is an external host.</returns>
        </member>
        <member name="M:Smartstore.WebDisplayHelperExtensions.ModifyQueryString(Smartstore.IDisplayHelper,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:Smartstore.Core.Web.IWebHelper.ModifyQueryString(System.String,System.String,System.String,System.String)" />
        </member>
        <member name="M:Smartstore.IViewInvokerExtensions.InvokeViewAsync(Smartstore.Core.Widgets.IViewInvoker,System.String,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)">
            <summary>
            Invokes a view and returns its html content.
            </summary>
            <param name="viewName">View name or path. Will be expanded if it starts with <c>[~]/{theme}/</c>.</param>
            <param name="module">Optional: system name of a module to additionally search for view files in.</param>
            <param name="viewData">The <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary"/> instance that also contains the model.</param>
            <returns>View rendering result</returns>
        </member>
        <member name="M:Smartstore.IViewInvokerExtensions.InvokePartialViewAsync(Smartstore.Core.Widgets.IViewInvoker,System.String,System.String,Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)">
            <summary>
            Invokes a partial view and returns its html content.
            </summary>
            <param name="viewName">View name or path. Will be expanded if it starts with <c>[~]/{theme}/</c>.</param>
            <param name="module">Optional: system name of a module to additionally search for view files in.</param>
            <param name="viewData">The <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary"/> instance that also contains the model.</param>
            <returns>View rendering result</returns>
        </member>
        <member name="M:Smartstore.WidgetDisplayHelperExtensions.ZoneHasWidgetsAsync(Smartstore.IDisplayHelper,System.String)">
            <summary>
            Checks whether the given <paramref name="zoneName"/> contains at least one widget.
            </summary>
            <remarks>
            Because of deferred result invocation this method cannot check whether 
            the widget actually PRODUCES content. E.g., 
            if a zone contained a <see cref="T:Smartstore.Core.Widgets.ComponentWidget"/> with an empty 
            result after invocation, this method would still return <c>true</c>.
            To check whether a zone actually contains non-whitespace content, 
            call <see cref="M:Smartstore.WidgetDisplayHelperExtensions.ZoneHasContentAsync(Smartstore.IDisplayHelper,System.String,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)"/> instead.
            </remarks>
            <param name="zoneName">The zone name to check.</param>
        </member>
        <member name="M:Smartstore.WidgetDisplayHelperExtensions.ZoneHasContentAsync(Smartstore.IDisplayHelper,System.String,Microsoft.AspNetCore.Mvc.Rendering.ViewContext)">
            <summary>
            Checks whether the given <paramref name="zoneName"/> contains at least one widget
            that produces non-whitespace content.
            </summary>
            <remarks>
            This method must actually INVOKE widgets in order to scan for content.
            It will break iteration on first found real content though.
            But to check for the mere existence of widgets in a zone it is better to call 
            <see cref="M:Smartstore.Core.Widgets.IWidgetSelector.EnumerateWidgetsAsync(Smartstore.Core.Widgets.IWidgetZone,System.Object)"/>.AnyAsync() instead.
            </remarks>
            <param name="zoneName">The zone name to check.</param>
            <param name="viewContext">The current view context.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.LocalizedEndpointRouteBuilderExtensions.MapLocalized(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Adds a localized endpoint that matches HTTP requests for the specified pattern.
            </summary>
            <param name="pattern">
            The (language neutral) route pattern without culture prefix.
            </param>
            <param name="requestDelegate">The delegate executed when the endpoint is matched.</param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.LocalizedEndpointRouteBuilderExtensions.MapLocalizedControllerRoute(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Adds localized endpoints for controller actions and specifies
            a route with the given name, pattern, defaults, constraints, and dataTokens.
            </summary>
            <param name="name">The name of the route.</param>
            <param name="pattern">
            The (language neutral) route pattern without culture prefix.
            </param>
            <param name="defaults">
            An object that contains default values for route parameters. The object's properties
            represent the names and values of the default values.
            </param>
            <param name="constraints">
            An object that contains constraints for the route. The object's properties represent
            the names and values of the constraints.
            </param>
            <param name="dataTokens">
            An object that contains data tokens for the route. The object's properties represent
            the names and values of the data tokens.
            </param>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SeoBuilderExtensions.UseUrlPolicy(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Determines current URL policy and performs HTTP redirection
            if any previous middleware required redirection to a new
            valid / sanitized location.
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.SeoBuilderExtensions.MapXmlSitemap(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)">
            <summary>
            Maps XML sitemap endpoint (sitemap.xml)
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsVariantKeyRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsVariantKeyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsVariantKeyRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsVariantKeyRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsVariantKeyRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsVariantKeyRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsVariantKeyRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsVariantKeyRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsVariantKeyRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsVariantKeyRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsVariantAliasKeyRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsVariantAliasKeyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsVariantAliasKeyRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsVariantAliasKeyRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsVariantAliasKeyRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsVariantAliasKeyRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsVariantAliasKeyRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsVariantAliasKeyRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsVariantAliasKeyRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsVariantAliasKeyRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsGiftCardKeyRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsGiftCardKeyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsGiftCardKeyRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsGiftCardKeyRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsGiftCardKeyRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsGiftCardKeyRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsGiftCardKeyRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsGiftCardKeyRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsGiftCardKeyRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsGiftCardKeyRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsCheckoutAttributeKeyRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IsCheckoutAttributeKeyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IsCheckoutAttributeKeyRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCheckoutAttributeKeyRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsCheckoutAttributeKeyRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCheckoutAttributeKeyRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IsCheckoutAttributeKeyRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCheckoutAttributeKeyRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCheckoutAttributeKeyRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IsCheckoutAttributeKeyRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TextRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the TextRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.TextRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TextRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TextRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TextRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TextRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TextRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TextRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TextRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TextAreaRegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the TextAreaRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.TextAreaRegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TextAreaRegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TextAreaRegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TextAreaRegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TextAreaRegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TextAreaRegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TextAreaRegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TextAreaRegex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VatNumberRegex_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the VatNumberRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.VatNumberRegex_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VatNumberRegex_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VatNumberRegex_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VatNumberRegex_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VatNumberRegex_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VatNumberRegex_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VatNumberRegex_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VatNumberRegex_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmbeddedImagesRegex_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EmbeddedImagesRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EmbeddedImagesRegex_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmbeddedImagesRegex_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmbeddedImagesRegex_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmbeddedImagesRegex_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmbeddedImagesRegex_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmbeddedImagesRegex_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmbeddedImagesRegex_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmbeddedImagesRegex_7.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FileNameRegEx_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FileNameRegEx method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FileNameRegEx_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FileNameRegEx_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FileNameRegEx_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FileNameRegEx_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FileNameRegEx_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FileNameRegEx_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FileNameRegEx_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FileNameRegEx_8.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfAnyControlFormatOtherNotAssignedPrivateUseSurrogate(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [\p{C}].</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfNonAsciiOrAny_314611984D610F403F60D09015850D56BF7DC873D825A184DD3A4F4AC949D422(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [^\n\P{C}].</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptControl">
            <summary>Supports searching for characters in or not in " !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_40000FFFFFFFFFFFFFFFFFFFFFF7F">
            <summary>Supports searching for characters in or not in "\n !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~".</summary>
        </member>
    </members>
</doc>
